
SHM_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e424  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800e538  0800e538  0001e538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efc0  0800efc0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800efc0  0800efc0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800efc0  0800efc0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efc4  0800efc4  0001efc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800efc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a08  200001ec  0800f1b4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0800f1b4  00022bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017098  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000346f  00000000  00000000  000372f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001258  00000000  00000000  0003bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001affd  00000000  00000000  0003d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196e5  00000000  00000000  00058165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000944b0  00000000  00000000  0007184a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007910  00000000  00000000  00105cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e51c 	.word	0x0800e51c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800e51c 	.word	0x0800e51c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <SELECT+0x1c>)
 80010a0:	f002 f940 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f001 fe95 	bl	8002dd4 <HAL_Delay>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <DESELECT+0x1c>)
 80010c0:	f002 f930 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f001 fe85 	bl	8002dd4 <HAL_Delay>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010de:	bf00      	nop
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <SPI_TxByte+0x30>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d1f8      	bne.n	80010e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80010ee:	1df9      	adds	r1, r7, #7
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2201      	movs	r2, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <SPI_TxByte+0x30>)
 80010f6:	f003 fd3d 	bl	8004b74 <HAL_SPI_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200022d8 	.word	0x200022d8

08001108 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001114:	bf00      	nop
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <SPI_TxBuffer+0x30>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b02      	cmp	r3, #2
 8001122:	d1f8      	bne.n	8001116 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <SPI_TxBuffer+0x30>)
 800112c:	f003 fd22 	bl	8004b74 <HAL_SPI_Transmit>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200022d8 	.word	0x200022d8

0800113c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001146:	bf00      	nop
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <SPI_RxByte+0x34>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d1f8      	bne.n	8001148 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001156:	1dba      	adds	r2, r7, #6
 8001158:	1df9      	adds	r1, r7, #7
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <SPI_RxByte+0x34>)
 8001162:	f003 ff62 	bl	800502a <HAL_SPI_TransmitReceive>

	return data;
 8001166:	79bb      	ldrb	r3, [r7, #6]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200022d8 	.word	0x200022d8

08001174 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800117c:	f7ff ffde 	bl	800113c <SPI_RxByte>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <SD_ReadyWait+0x30>)
 8001198:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800119c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800119e:	f7ff ffcd 	bl	800113c <SPI_RxByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2bff      	cmp	r3, #255	; 0xff
 80011aa:	d003      	beq.n	80011b4 <SD_ReadyWait+0x24>
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SD_ReadyWait+0x30>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f4      	bne.n	800119e <SD_ReadyWait+0xe>

	return res;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000020a 	.word	0x2000020a

080011c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80011ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80011ce:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80011d0:	f7ff ff70 	bl	80010b4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	e005      	b.n	80011e6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80011da:	20ff      	movs	r0, #255	; 0xff
 80011dc:	f7ff ff7a 	bl	80010d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	ddf6      	ble.n	80011da <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80011ec:	f7ff ff52 	bl	8001094 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001204:	2395      	movs	r3, #149	; 0x95
 8001206:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001208:	463b      	mov	r3, r7
 800120a:	2106      	movs	r1, #6
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff7b 	bl	8001108 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001212:	e002      	b.n	800121a <SD_PowerOn+0x56>
	{
		cnt--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3b01      	subs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800121a:	f7ff ff8f 	bl	800113c <SPI_RxByte>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d002      	beq.n	800122a <SD_PowerOn+0x66>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <SD_PowerOn+0x50>
	}

	DESELECT();
 800122a:	f7ff ff43 	bl	80010b4 <DESELECT>
	SPI_TxByte(0XFF);
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f7ff ff50 	bl	80010d4 <SPI_TxByte>

	PowerFlag = 1;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <SD_PowerOn+0x80>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000020d 	.word	0x2000020d

08001248 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <SD_PowerOff+0x14>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000020d 	.word	0x2000020d

08001260 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <SD_CheckPower+0x10>)
 8001266:	781b      	ldrb	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	2000020d 	.word	0x2000020d

08001274 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <SD_RxDataBlock+0x58>)
 8001280:	22c8      	movs	r2, #200	; 0xc8
 8001282:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001284:	f7ff ff5a 	bl	800113c <SPI_RxByte>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d103      	bne.n	800129a <SD_RxDataBlock+0x26>
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <SD_RxDataBlock+0x58>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f4      	bne.n	8001284 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2bfe      	cmp	r3, #254	; 0xfe
 800129e:	d001      	beq.n	80012a4 <SD_RxDataBlock+0x30>
 80012a0:	2300      	movs	r3, #0
 80012a2:	e00f      	b.n	80012c4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff62 	bl	8001174 <SPI_RxBytePtr>
	} while(len--);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	603a      	str	r2, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f4      	bne.n	80012a4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80012ba:	f7ff ff3f 	bl	800113c <SPI_RxByte>
	SPI_RxByte();
 80012be:	f7ff ff3d 	bl	800113c <SPI_RxByte>

	return TRUE;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000208 	.word	0x20000208

080012d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80012e0:	f7ff ff56 	bl	8001190 <SD_ReadyWait>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2bff      	cmp	r3, #255	; 0xff
 80012e8:	d001      	beq.n	80012ee <SD_TxDataBlock+0x1e>
 80012ea:	2300      	movs	r3, #0
 80012ec:	e02f      	b.n	800134e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff feef 	bl	80010d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	2bfd      	cmp	r3, #253	; 0xfd
 80012fa:	d020      	beq.n	800133e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80012fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff01 	bl	8001108 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001306:	f7ff ff19 	bl	800113c <SPI_RxByte>
		SPI_RxByte();
 800130a:	f7ff ff17 	bl	800113c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800130e:	e00b      	b.n	8001328 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001310:	f7ff ff14 	bl	800113c <SPI_RxByte>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2b05      	cmp	r3, #5
 8001320:	d006      	beq.n	8001330 <SD_TxDataBlock+0x60>
			i++;
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	3301      	adds	r3, #1
 8001326:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	2b40      	cmp	r3, #64	; 0x40
 800132c:	d9f0      	bls.n	8001310 <SD_TxDataBlock+0x40>
 800132e:	e000      	b.n	8001332 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001330:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001332:	bf00      	nop
 8001334:	f7ff ff02 	bl	800113c <SPI_RxByte>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0fa      	beq.n	8001334 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b05      	cmp	r3, #5
 8001346:	d101      	bne.n	800134c <SD_TxDataBlock+0x7c>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <SD_TxDataBlock+0x7e>

	return FALSE;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	6039      	str	r1, [r7, #0]
 8001360:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001362:	f7ff ff15 	bl	8001190 <SD_ReadyWait>
 8001366:	4603      	mov	r3, r0
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	d001      	beq.n	8001370 <SD_SendCmd+0x1a>
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	e042      	b.n	80013f6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feae 	bl	80010d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	0e1b      	lsrs	r3, r3, #24
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fea8 	bl	80010d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	0c1b      	lsrs	r3, r3, #16
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fea2 	bl	80010d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe9c 	bl	80010d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe97 	bl	80010d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d102      	bne.n	80013b2 <SD_SendCmd+0x5c>
 80013ac:	2395      	movs	r3, #149	; 0x95
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e007      	b.n	80013c2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b48      	cmp	r3, #72	; 0x48
 80013b6:	d102      	bne.n	80013be <SD_SendCmd+0x68>
 80013b8:	2387      	movs	r3, #135	; 0x87
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <SD_SendCmd+0x6c>
	else crc = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe85 	bl	80010d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b4c      	cmp	r3, #76	; 0x4c
 80013ce:	d101      	bne.n	80013d4 <SD_SendCmd+0x7e>
 80013d0:	f7ff feb4 	bl	800113c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80013d4:	230a      	movs	r3, #10
 80013d6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80013d8:	f7ff feb0 	bl	800113c <SPI_RxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80013e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da05      	bge.n	80013f4 <SD_SendCmd+0x9e>
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	73bb      	strb	r3, [r7, #14]
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f1      	bne.n	80013d8 <SD_SendCmd+0x82>

	return res;
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SD_disk_initialize+0x14>
 8001410:	2301      	movs	r3, #1
 8001412:	e0d1      	b.n	80015b8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <SD_disk_initialize+0x1c0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <SD_disk_initialize+0x2a>
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <SD_disk_initialize+0x1c0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	e0c6      	b.n	80015b8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800142a:	f7ff fecb 	bl	80011c4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800142e:	f7ff fe31 	bl	8001094 <SELECT>

	/* check disk type */
	type = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001436:	2100      	movs	r1, #0
 8001438:	2040      	movs	r0, #64	; 0x40
 800143a:	f7ff ff8c 	bl	8001356 <SD_SendCmd>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	f040 80a1 	bne.w	8001588 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <SD_disk_initialize+0x1c4>)
 8001448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800144e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001452:	2048      	movs	r0, #72	; 0x48
 8001454:	f7ff ff7f 	bl	8001356 <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d155      	bne.n	800150a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e00c      	b.n	800147e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001464:	7bfc      	ldrb	r4, [r7, #15]
 8001466:	f7ff fe69 	bl	800113c <SPI_RxByte>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	f104 0310 	add.w	r3, r4, #16
 8001472:	443b      	add	r3, r7
 8001474:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3301      	adds	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d9ef      	bls.n	8001464 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d17e      	bne.n	8001588 <SD_disk_initialize+0x188>
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	2baa      	cmp	r3, #170	; 0xaa
 800148e:	d17b      	bne.n	8001588 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001490:	2100      	movs	r1, #0
 8001492:	2077      	movs	r0, #119	; 0x77
 8001494:	f7ff ff5f 	bl	8001356 <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d807      	bhi.n	80014ae <SD_disk_initialize+0xae>
 800149e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014a2:	2069      	movs	r0, #105	; 0x69
 80014a4:	f7ff ff57 	bl	8001356 <SD_SendCmd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <SD_disk_initialize+0x1c4>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ec      	bne.n	8001490 <SD_disk_initialize+0x90>
 80014b6:	e000      	b.n	80014ba <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80014b8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <SD_disk_initialize+0x1c4>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d062      	beq.n	8001588 <SD_disk_initialize+0x188>
 80014c2:	2100      	movs	r1, #0
 80014c4:	207a      	movs	r0, #122	; 0x7a
 80014c6:	f7ff ff46 	bl	8001356 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d15b      	bne.n	8001588 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e00c      	b.n	80014f0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80014d6:	7bfc      	ldrb	r4, [r7, #15]
 80014d8:	f7ff fe30 	bl	800113c <SPI_RxByte>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	f104 0310 	add.w	r3, r4, #16
 80014e4:	443b      	add	r3, r7
 80014e6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9ef      	bls.n	80014d6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80014f6:	7a3b      	ldrb	r3, [r7, #8]
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x104>
 8001500:	230c      	movs	r3, #12
 8001502:	e000      	b.n	8001506 <SD_disk_initialize+0x106>
 8001504:	2304      	movs	r3, #4
 8001506:	73bb      	strb	r3, [r7, #14]
 8001508:	e03e      	b.n	8001588 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800150a:	2100      	movs	r1, #0
 800150c:	2077      	movs	r0, #119	; 0x77
 800150e:	f7ff ff22 	bl	8001356 <SD_SendCmd>
 8001512:	4603      	mov	r3, r0
 8001514:	2b01      	cmp	r3, #1
 8001516:	d808      	bhi.n	800152a <SD_disk_initialize+0x12a>
 8001518:	2100      	movs	r1, #0
 800151a:	2069      	movs	r0, #105	; 0x69
 800151c:	f7ff ff1b 	bl	8001356 <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d801      	bhi.n	800152a <SD_disk_initialize+0x12a>
 8001526:	2302      	movs	r3, #2
 8001528:	e000      	b.n	800152c <SD_disk_initialize+0x12c>
 800152a:	2301      	movs	r3, #1
 800152c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d10e      	bne.n	8001552 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001534:	2100      	movs	r1, #0
 8001536:	2077      	movs	r0, #119	; 0x77
 8001538:	f7ff ff0d 	bl	8001356 <SD_SendCmd>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d80e      	bhi.n	8001560 <SD_disk_initialize+0x160>
 8001542:	2100      	movs	r1, #0
 8001544:	2069      	movs	r0, #105	; 0x69
 8001546:	f7ff ff06 	bl	8001356 <SD_SendCmd>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <SD_disk_initialize+0x160>
 8001550:	e00c      	b.n	800156c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001552:	2100      	movs	r1, #0
 8001554:	2041      	movs	r0, #65	; 0x41
 8001556:	f7ff fefe 	bl	8001356 <SD_SendCmd>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <SD_disk_initialize+0x1c4>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e2      	bne.n	800152e <SD_disk_initialize+0x12e>
 8001568:	e000      	b.n	800156c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800156a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <SD_disk_initialize+0x1c4>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <SD_disk_initialize+0x184>
 8001574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001578:	2050      	movs	r0, #80	; 0x50
 800157a:	f7ff feec 	bl	8001356 <SD_SendCmd>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_initialize+0x188>
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001588:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <SD_disk_initialize+0x1c8>)
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800158e:	f7ff fd91 	bl	80010b4 <DESELECT>
	SPI_RxByte();
 8001592:	f7ff fdd3 	bl	800113c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <SD_disk_initialize+0x1c0>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SD_disk_initialize+0x1c0>)
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	e001      	b.n	80015b2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80015ae:	f7ff fe4b 	bl	8001248 <SD_PowerOff>
	}

	return Stat;
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <SD_disk_initialize+0x1c0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000208 	.word	0x20000208
 80015c8:	2000020c 	.word	0x2000020c

080015cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SD_disk_status+0x14>
 80015dc:	2301      	movs	r3, #1
 80015de:	e002      	b.n	80015e6 <SD_disk_status+0x1a>
	return Stat;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <SD_disk_status+0x24>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000000 	.word	0x20000000

080015f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <SD_disk_read+0x1c>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <SD_disk_read+0x20>
 8001610:	2304      	movs	r3, #4
 8001612:	e051      	b.n	80016b8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <SD_disk_read+0xcc>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SD_disk_read+0x32>
 8001622:	2303      	movs	r3, #3
 8001624:	e048      	b.n	80016b8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <SD_disk_read+0xd0>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <SD_disk_read+0x44>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	607b      	str	r3, [r7, #4]

	SELECT();
 8001638:	f7ff fd2c 	bl	8001094 <SELECT>

	if (count == 1)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d111      	bne.n	8001666 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2051      	movs	r0, #81	; 0x51
 8001646:	f7ff fe86 	bl	8001356 <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d129      	bne.n	80016a4 <SD_disk_read+0xb0>
 8001650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f7ff fe0d 	bl	8001274 <SD_RxDataBlock>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <SD_disk_read+0xb0>
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	e01e      	b.n	80016a4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	2052      	movs	r0, #82	; 0x52
 800166a:	f7ff fe74 	bl	8001356 <SD_SendCmd>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d117      	bne.n	80016a4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001678:	68b8      	ldr	r0, [r7, #8]
 800167a:	f7ff fdfb 	bl	8001274 <SD_RxDataBlock>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00a      	beq.n	800169a <SD_disk_read+0xa6>
				buff += 512;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800168a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	3b01      	subs	r3, #1
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ed      	bne.n	8001674 <SD_disk_read+0x80>
 8001698:	e000      	b.n	800169c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800169a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800169c:	2100      	movs	r1, #0
 800169e:	204c      	movs	r0, #76	; 0x4c
 80016a0:	f7ff fe59 	bl	8001356 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80016a4:	f7ff fd06 	bl	80010b4 <DESELECT>
	SPI_RxByte();
 80016a8:	f7ff fd48 	bl	800113c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000000 	.word	0x20000000
 80016c4:	2000020c 	.word	0x2000020c

080016c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <SD_disk_write+0x1c>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <SD_disk_write+0x20>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e06b      	b.n	80017c0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <SD_disk_write+0x100>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SD_disk_write+0x32>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e062      	b.n	80017c0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <SD_disk_write+0x100>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SD_disk_write+0x44>
 8001708:	2302      	movs	r3, #2
 800170a:	e059      	b.n	80017c0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <SD_disk_write+0x104>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <SD_disk_write+0x56>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	607b      	str	r3, [r7, #4]

	SELECT();
 800171e:	f7ff fcb9 	bl	8001094 <SELECT>

	if (count == 1)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d110      	bne.n	800174a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	2058      	movs	r0, #88	; 0x58
 800172c:	f7ff fe13 	bl	8001356 <SD_SendCmd>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d13a      	bne.n	80017ac <SD_disk_write+0xe4>
 8001736:	21fe      	movs	r1, #254	; 0xfe
 8001738:	68b8      	ldr	r0, [r7, #8]
 800173a:	f7ff fdc9 	bl	80012d0 <SD_TxDataBlock>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d033      	beq.n	80017ac <SD_disk_write+0xe4>
			count = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	e030      	b.n	80017ac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <SD_disk_write+0x104>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001756:	2100      	movs	r1, #0
 8001758:	2077      	movs	r0, #119	; 0x77
 800175a:	f7ff fdfc 	bl	8001356 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	2057      	movs	r0, #87	; 0x57
 8001762:	f7ff fdf8 	bl	8001356 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2059      	movs	r0, #89	; 0x59
 800176a:	f7ff fdf4 	bl	8001356 <SD_SendCmd>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d11b      	bne.n	80017ac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001774:	21fc      	movs	r1, #252	; 0xfc
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f7ff fdaa 	bl	80012d0 <SD_TxDataBlock>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <SD_disk_write+0xd0>
				buff += 512;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001788:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ee      	bne.n	8001774 <SD_disk_write+0xac>
 8001796:	e000      	b.n	800179a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001798:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800179a:	21fd      	movs	r1, #253	; 0xfd
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fd97 	bl	80012d0 <SD_TxDataBlock>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <SD_disk_write+0xe4>
			{
				count = 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80017ac:	f7ff fc82 	bl	80010b4 <DESELECT>
	SPI_RxByte();
 80017b0:	f7ff fcc4 	bl	800113c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	2000020c 	.word	0x2000020c

080017d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08b      	sub	sp, #44	; 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	603a      	str	r2, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	460b      	mov	r3, r1
 80017de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SD_disk_ioctl+0x1e>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e115      	b.n	8001a1a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d124      	bne.n	8001844 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d012      	beq.n	8001828 <SD_disk_ioctl+0x58>
 8001802:	2b02      	cmp	r3, #2
 8001804:	dc1a      	bgt.n	800183c <SD_disk_ioctl+0x6c>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <SD_disk_ioctl+0x40>
 800180a:	2b01      	cmp	r3, #1
 800180c:	d006      	beq.n	800181c <SD_disk_ioctl+0x4c>
 800180e:	e015      	b.n	800183c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001810:	f7ff fd1a 	bl	8001248 <SD_PowerOff>
			res = RES_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800181a:	e0fc      	b.n	8001a16 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800181c:	f7ff fcd2 	bl	80011c4 <SD_PowerOn>
			res = RES_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001826:	e0f6      	b.n	8001a16 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	1c5c      	adds	r4, r3, #1
 800182c:	f7ff fd18 	bl	8001260 <SD_CheckPower>
 8001830:	4603      	mov	r3, r0
 8001832:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800183a:	e0ec      	b.n	8001a16 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800183c:	2304      	movs	r3, #4
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001842:	e0e8      	b.n	8001a16 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001844:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <SD_disk_ioctl+0x254>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SD_disk_ioctl+0x86>
 8001852:	2303      	movs	r3, #3
 8001854:	e0e1      	b.n	8001a1a <SD_disk_ioctl+0x24a>

		SELECT();
 8001856:	f7ff fc1d 	bl	8001094 <SELECT>

		switch (ctrl)
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	2b0d      	cmp	r3, #13
 800185e:	f200 80cb 	bhi.w	80019f8 <SD_disk_ioctl+0x228>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <SD_disk_ioctl+0x98>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001963 	.word	0x08001963
 800186c:	080018a1 	.word	0x080018a1
 8001870:	08001953 	.word	0x08001953
 8001874:	080019f9 	.word	0x080019f9
 8001878:	080019f9 	.word	0x080019f9
 800187c:	080019f9 	.word	0x080019f9
 8001880:	080019f9 	.word	0x080019f9
 8001884:	080019f9 	.word	0x080019f9
 8001888:	080019f9 	.word	0x080019f9
 800188c:	080019f9 	.word	0x080019f9
 8001890:	080019f9 	.word	0x080019f9
 8001894:	08001975 	.word	0x08001975
 8001898:	08001999 	.word	0x08001999
 800189c:	080019bd 	.word	0x080019bd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80018a0:	2100      	movs	r1, #0
 80018a2:	2049      	movs	r0, #73	; 0x49
 80018a4:	f7ff fd57 	bl	8001356 <SD_SendCmd>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 80a8 	bne.w	8001a00 <SD_disk_ioctl+0x230>
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2110      	movs	r1, #16
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fcdc 	bl	8001274 <SD_RxDataBlock>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 809e 	beq.w	8001a00 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80018c4:	7b3b      	ldrb	r3, [r7, #12]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10e      	bne.n	80018ec <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018ce:	7d7b      	ldrb	r3, [r7, #21]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	7d3b      	ldrb	r3, [r7, #20]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80018e2:	8bfb      	ldrh	r3, [r7, #30]
 80018e4:	029a      	lsls	r2, r3, #10
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e02e      	b.n	800194a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018ec:	7c7b      	ldrb	r3, [r7, #17]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	7dbb      	ldrb	r3, [r7, #22]
 80018f6:	09db      	lsrs	r3, r3, #7
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	7d7b      	ldrb	r3, [r7, #21]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f003 0306 	and.w	r3, r3, #6
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3302      	adds	r3, #2
 8001910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001914:	7d3b      	ldrb	r3, [r7, #20]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	b2db      	uxtb	r3, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	b29b      	uxth	r3, r3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	b29b      	uxth	r3, r3
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	7cbb      	ldrb	r3, [r7, #18]
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	b29b      	uxth	r3, r3
 800192e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800193c:	8bfa      	ldrh	r2, [r7, #30]
 800193e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001942:	3b09      	subs	r3, #9
 8001944:	409a      	lsls	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001950:	e056      	b.n	8001a00 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001958:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001960:	e055      	b.n	8001a0e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001962:	f7ff fc15 	bl	8001190 <SD_ReadyWait>
 8001966:	4603      	mov	r3, r0
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d14b      	bne.n	8001a04 <SD_disk_ioctl+0x234>
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001972:	e047      	b.n	8001a04 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001974:	2100      	movs	r1, #0
 8001976:	2049      	movs	r0, #73	; 0x49
 8001978:	f7ff fced 	bl	8001356 <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d142      	bne.n	8001a08 <SD_disk_ioctl+0x238>
 8001982:	2110      	movs	r1, #16
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f7ff fc75 	bl	8001274 <SD_RxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03b      	beq.n	8001a08 <SD_disk_ioctl+0x238>
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001996:	e037      	b.n	8001a08 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001998:	2100      	movs	r1, #0
 800199a:	204a      	movs	r0, #74	; 0x4a
 800199c:	f7ff fcdb 	bl	8001356 <SD_SendCmd>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d132      	bne.n	8001a0c <SD_disk_ioctl+0x23c>
 80019a6:	2110      	movs	r1, #16
 80019a8:	6a38      	ldr	r0, [r7, #32]
 80019aa:	f7ff fc63 	bl	8001274 <SD_RxDataBlock>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02b      	beq.n	8001a0c <SD_disk_ioctl+0x23c>
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019ba:	e027      	b.n	8001a0c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80019bc:	2100      	movs	r1, #0
 80019be:	207a      	movs	r0, #122	; 0x7a
 80019c0:	f7ff fcc9 	bl	8001356 <SD_SendCmd>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019d0:	e00b      	b.n	80019ea <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80019d2:	6a3c      	ldr	r4, [r7, #32]
 80019d4:	1c63      	adds	r3, r4, #1
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	f7ff fbb0 	bl	800113c <SPI_RxByte>
 80019dc:	4603      	mov	r3, r0
 80019de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80019e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019e4:	3301      	adds	r3, #1
 80019e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d9ef      	bls.n	80019d2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019f8:	2304      	movs	r3, #4
 80019fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019fe:	e006      	b.n	8001a0e <SD_disk_ioctl+0x23e>
			break;
 8001a00:	bf00      	nop
 8001a02:	e004      	b.n	8001a0e <SD_disk_ioctl+0x23e>
			break;
 8001a04:	bf00      	nop
 8001a06:	e002      	b.n	8001a0e <SD_disk_ioctl+0x23e>
			break;
 8001a08:	bf00      	nop
 8001a0a:	e000      	b.n	8001a0e <SD_disk_ioctl+0x23e>
			break;
 8001a0c:	bf00      	nop
		}

		DESELECT();
 8001a0e:	f7ff fb51 	bl	80010b4 <DESELECT>
		SPI_RxByte();
 8001a12:	f7ff fb93 	bl	800113c <SPI_RxByte>
	}

	return res;
 8001a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	372c      	adds	r7, #44	; 0x2c
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <iis3dwb_read_reg>:
  *
  */
int32_t __weak iis3dwb_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	461a      	mov	r2, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	72fb      	strb	r3, [r7, #11]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL) return -1;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <iis3dwb_read_reg+0x20>
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a46:	e008      	b.n	8001a5a <iis3dwb_read_reg+0x32>

  return ctx->read_reg(ctx->handle, reg, data, len);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685c      	ldr	r4, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68d8      	ldr	r0, [r3, #12]
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	7af9      	ldrb	r1, [r7, #11]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	47a0      	blx	r4
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}

08001a62 <iis3dwb_write_reg>:
  *
  */
int32_t __weak iis3dwb_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	72fb      	strb	r3, [r7, #11]
 8001a72:	4613      	mov	r3, r2
 8001a74:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL) return -1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <iis3dwb_write_reg+0x20>
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a80:	e008      	b.n	8001a94 <iis3dwb_write_reg+0x32>

  return ctx->write_reg(ctx->handle, reg, data, len);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681c      	ldr	r4, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68d8      	ldr	r0, [r3, #12]
 8001a8a:	893b      	ldrh	r3, [r7, #8]
 8001a8c:	7af9      	ldrb	r1, [r7, #11]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	47a0      	blx	r4
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <iis3dwb_from_fs2g_to_mg>:
  * @{
  *
  */

float_t iis3dwb_from_fs2g_to_mg(int16_t lsb)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f916 	bl	8000cdc <__aeabi_i2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4904      	ldr	r1, [pc, #16]	; (8001ac4 <iis3dwb_from_fs2g_to_mg+0x28>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f965 	bl	8000d84 <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	3d79db23 	.word	0x3d79db23

08001ac8 <iis3dwb_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 0.488f);
}

float_t iis3dwb_from_lsb_to_celsius(int16_t lsb)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f900 	bl	8000cdc <__aeabi_i2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fa02 	bl	8000eec <__aeabi_fdiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4904      	ldr	r1, [pc, #16]	; (8001afc <iis3dwb_from_lsb_to_celsius+0x34>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f841 	bl	8000b74 <__addsf3>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	41c80000 	.word	0x41c80000

08001b00 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;

  int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b0c:	f107 0208 	add.w	r2, r7, #8
 8001b10:	2301      	movs	r3, #1
 8001b12:	2110      	movs	r1, #16
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff87 	bl	8001a28 <iis3dwb_read_reg>
 8001b1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10f      	bne.n	8001b42 <iis3dwb_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	7a3b      	ldrb	r3, [r7, #8]
 8001b2c:	f362 0383 	bfi	r3, r2, #2, #2
 8001b30:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8001b32:	f107 0208 	add.w	r2, r7, #8
 8001b36:	2301      	movs	r3, #1
 8001b38:	2110      	movs	r1, #16
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff91 	bl	8001a62 <iis3dwb_write_reg>
 8001b40:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;

  int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b58:	f107 0208 	add.w	r2, r7, #8
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2110      	movs	r1, #16
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff61 	bl	8001a28 <iis3dwb_read_reg>
 8001b66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <iis3dwb_xl_data_rate_set+0x42>
  {
    ctrl1_xl.xl_en = (uint8_t)val;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	7a3b      	ldrb	r3, [r7, #8]
 8001b78:	f362 1347 	bfi	r3, r2, #5, #3
 8001b7c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8001b7e:	f107 0208 	add.w	r2, r7, #8
 8001b82:	2301      	movs	r3, #1
 8001b84:	2110      	movs	r1, #16
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff6b 	bl	8001a62 <iis3dwb_write_reg>
 8001b8c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;

  int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001ba4:	f107 0208 	add.w	r2, r7, #8
 8001ba8:	2301      	movs	r3, #1
 8001baa:	2112      	movs	r1, #18
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff3b 	bl	8001a28 <iis3dwb_read_reg>
 8001bb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <iis3dwb_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	7a3b      	ldrb	r3, [r7, #8]
 8001bc4:	f362 1386 	bfi	r3, r2, #6, #1
 8001bc8:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bca:	f107 0208 	add.w	r2, r7, #8
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2112      	movs	r1, #18
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff45 	bl	8001a62 <iis3dwb_write_reg>
 8001bd8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <iis3dwb_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  iis3dwb_status_reg_t status_reg;

  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
 8001bee:	f107 0208 	add.w	r2, r7, #8
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	211e      	movs	r1, #30
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff16 	bl	8001a28 <iis3dwb_read_reg>
 8001bfc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001bfe:	7a3b      	ldrb	r3, [r7, #8]
 8001c00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <iis3dwb_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_temp_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  iis3dwb_status_reg_t status_reg;

  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
 8001c20:	f107 0208 	add.w	r2, r7, #8
 8001c24:	2301      	movs	r3, #1
 8001c26:	211e      	movs	r1, #30
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fefd 	bl	8001a28 <iis3dwb_read_reg>
 8001c2e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <iis3dwb_temperature_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];

  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_OUT_TEMP_L, buff, 2);
 8001c52:	f107 0208 	add.w	r2, r7, #8
 8001c56:	2302      	movs	r3, #2
 8001c58:	2120      	movs	r1, #32
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fee4 	bl	8001a28 <iis3dwb_read_reg>
 8001c60:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001c62:	7a7b      	ldrb	r3, [r7, #9]
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	801a      	strh	r2, [r3, #0]
  *val = (*val << 8) + (int16_t)buff[0];
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	7a3b      	ldrb	r3, [r7, #8]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c84:	68fb      	ldr	r3, [r7, #12]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <iis3dwb_acceleration_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];

  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 8001c98:	f107 020c 	add.w	r2, r7, #12
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	2128      	movs	r1, #40	; 0x28
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fec1 	bl	8001a28 <iis3dwb_read_reg>
 8001ca6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] << 8) + (int16_t)buff[0];
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	b212      	sxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] << 8) + (int16_t)buff[2];
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3302      	adds	r3, #2
 8001cee:	b212      	sxth	r2, r2
 8001cf0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001cf2:	7c7a      	ldrb	r2, [r7, #17]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	b212      	sxth	r2, r2
 8001cfa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] << 8) + (int16_t)buff[4];
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	7c3b      	ldrb	r3, [r7, #16]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	b212      	sxth	r2, r2
 8001d18:	801a      	strh	r2, [r3, #0]

  return ret;
 8001d1a:	697b      	ldr	r3, [r7, #20]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <iis3dwb_reset_set>:
  * @param  val    Value of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;

  int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d30:	f107 0208 	add.w	r2, r7, #8
 8001d34:	2301      	movs	r3, #1
 8001d36:	2112      	movs	r1, #18
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe75 	bl	8001a28 <iis3dwb_read_reg>
 8001d3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <iis3dwb_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	7a3b      	ldrb	r3, [r7, #8]
 8001d50:	f362 0300 	bfi	r3, r2, #0, #1
 8001d54:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d56:	f107 0208 	add.w	r2, r7, #8
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2112      	movs	r1, #18
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fe7f 	bl	8001a62 <iis3dwb_write_reg>
 8001d64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <iis3dwb_xl_filt_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_filt_path_on_out_set(const stmdev_ctx_t *ctx,
                                        iis3dwb_filt_xl_en_t val)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;

  int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d7c:	f107 0210 	add.w	r2, r7, #16
 8001d80:	2301      	movs	r3, #1
 8001d82:	2110      	movs	r1, #16
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fe4f 	bl	8001a28 <iis3dwb_read_reg>
 8001d8a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d111      	bne.n	8001db6 <iis3dwb_xl_filt_path_on_out_set+0x46>
  {
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	7c3b      	ldrb	r3, [r7, #16]
 8001da0:	f362 0341 	bfi	r3, r2, #1, #1
 8001da4:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001da6:	f107 0210 	add.w	r2, r7, #16
 8001daa:	2301      	movs	r3, #1
 8001dac:	2110      	movs	r1, #16
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fe57 	bl	8001a62 <iis3dwb_write_reg>
 8001db4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <iis3dwb_xl_filt_path_on_out_set+0x5c>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001dbc:	f107 020c 	add.w	r2, r7, #12
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2117      	movs	r1, #23
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fe2f 	bl	8001a28 <iis3dwb_read_reg>
 8001dca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d121      	bne.n	8001e16 <iis3dwb_xl_filt_path_on_out_set+0xa6>
  {
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	7b3b      	ldrb	r3, [r7, #12]
 8001dde:	f362 0382 	bfi	r3, r2, #2, #1
 8001de2:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	7b3b      	ldrb	r3, [r7, #12]
 8001df0:	f362 1304 	bfi	r3, r2, #4, #1
 8001df4:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	7b3b      	ldrb	r3, [r7, #12]
 8001e00:	f362 1347 	bfi	r3, r2, #5, #3
 8001e04:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001e06:	f107 020c 	add.w	r2, r7, #12
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	2117      	movs	r1, #23
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe27 	bl	8001a62 <iis3dwb_write_reg>
 8001e14:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001e16:	697b      	ldr	r3, [r7, #20]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001e40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00b      	beq.n	8001e60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e48:	e000      	b.n	8001e4c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f9      	beq.n	8001e4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e56:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <putData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void putData (const char* fileName, char* data) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001e76:	2213      	movs	r2, #19
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <putData+0x3c>)
 8001e7c:	f006 fd26 	bl	80088cc <f_open>
	f_lseek(&fil, fil.fsize);
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <putData+0x3c>)
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <putData+0x3c>)
 8001e8c:	f007 fb68 	bl	8009560 <f_lseek>
	f_puts(data, &fil);
 8001e90:	4905      	ldr	r1, [pc, #20]	; (8001ea8 <putData+0x3c>)
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f007 fe92 	bl	8009bbc <f_puts>
	f_close(&fil);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <putData+0x3c>)
 8001e9a:	f007 fb36 	bl	800950a <f_close>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001240 	.word	0x20001240

08001eac <IIS3DWB_Init>:
	putData("Data.txt", data);
}


void IIS3DWB_Init (stmdev_ctx_t* dev_ctx)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	/* Initialize mems driver interface */
	dev_ctx->write_reg = platform_write;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <IIS3DWB_Init+0x5c>)
 8001eb8:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = platform_read;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <IIS3DWB_Init+0x60>)
 8001ebe:	605a      	str	r2, [r3, #4]
	dev_ctx->mdelay = platform_delay;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <IIS3DWB_Init+0x64>)
 8001ec4:	609a      	str	r2, [r3, #8]
	dev_ctx->handle = &SENSOR_BUS;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <IIS3DWB_Init+0x68>)
 8001eca:	60da      	str	r2, [r3, #12]

	/* Init test platform */
	platform_init();
 8001ecc:	f000 fcad 	bl	800282a <platform_init>

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f000 fc9f 	bl	8002814 <platform_delay>

	/* Restore default configuration */
	iis3dwb_reset_set(dev_ctx, PROPERTY_ENABLE);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff23 	bl	8001d24 <iis3dwb_reset_set>

	/* Enable Block Data Update */
	iis3dwb_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 8001ede:	2101      	movs	r1, #1
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe59 	bl	8001b98 <iis3dwb_block_data_update_set>

	/* Set Output Data Rate */
	iis3dwb_xl_data_rate_set(dev_ctx, IIS3DWB_XL_ODR_26k7Hz);
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fe2f 	bl	8001b4c <iis3dwb_xl_data_rate_set>

	/* Set full scale */
	iis3dwb_xl_full_scale_set(dev_ctx, IIS3DWB_2g);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fe05 	bl	8001b00 <iis3dwb_xl_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer low pass filter path
	*/
	iis3dwb_xl_filt_path_on_out_set(dev_ctx, IIS3DWB_LP_ODR_DIV_100);
 8001ef6:	2184      	movs	r1, #132	; 0x84
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff39 	bl	8001d70 <iis3dwb_xl_filt_path_on_out_set>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	08002761 	.word	0x08002761
 8001f0c:	080027b5 	.word	0x080027b5
 8001f10:	08002815 	.word	0x08002815
 8001f14:	20002280 	.word	0x20002280

08001f18 <read_temp_iis3dwb>:


void read_temp_iis3dwb (stmdev_ctx_t* dev_ctx) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t reg_temp = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]

	while (!reg_temp) {
 8001f24:	e027      	b.n	8001f76 <read_temp_iis3dwb+0x5e>
		iis3dwb_temp_flag_data_ready_get(dev_ctx, &reg_temp);
 8001f26:	f107 030f 	add.w	r3, r7, #15
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fe72 	bl	8001c16 <iis3dwb_temp_flag_data_ready_get>

		if (reg_temp) {
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01e      	beq.n	8001f76 <read_temp_iis3dwb+0x5e>
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <read_temp_iis3dwb+0x70>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
			/* Read temperature data */
			memset(&data_raw_temperature, 0x00, sizeof(int16_t));
			iis3dwb_temperature_raw_get(dev_ctx, &data_raw_temperature);
 8001f3e:	4912      	ldr	r1, [pc, #72]	; (8001f88 <read_temp_iis3dwb+0x70>)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe81 	bl	8001c48 <iis3dwb_temperature_raw_get>
			temperature_degC = iis3dwb_from_lsb_to_celsius(data_raw_temperature);
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <read_temp_iis3dwb+0x70>)
 8001f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fdbb 	bl	8001ac8 <iis3dwb_from_lsb_to_celsius>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <read_temp_iis3dwb+0x74>)
 8001f56:	6013      	str	r3, [r2, #0]

			// Write to SD-Card
			sprintf((char *)tx_buffer,"\nT=%4.2f\n", temperature_degC);
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <read_temp_iis3dwb+0x74>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa63 	bl	8000428 <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <read_temp_iis3dwb+0x78>)
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <read_temp_iis3dwb+0x7c>)
 8001f6a:	f008 fe51 	bl	800ac10 <siprintf>
			putData("Data.txt", (char *) tx_buffer);
 8001f6e:	4909      	ldr	r1, [pc, #36]	; (8001f94 <read_temp_iis3dwb+0x7c>)
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <read_temp_iis3dwb+0x80>)
 8001f72:	f7ff ff7b 	bl	8001e6c <putData>
	while (!reg_temp) {
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0d4      	beq.n	8001f26 <read_temp_iis3dwb+0xe>
		}
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20002472 	.word	0x20002472
 8001f8c:	20002480 	.word	0x20002480
 8001f90:	0800e554 	.word	0x0800e554
 8001f94:	20002484 	.word	0x20002484
 8001f98:	0800e548 	.word	0x0800e548

08001f9c <read_acc_iis3dwb>:

void read_acc_iis3dwb (stmdev_ctx_t* dev_ctx, uint32_t startTime) {
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b08a      	sub	sp, #40	; 0x28
 8001fa2:	af06      	add	r7, sp, #24
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
	uint8_t reg = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

	while (!reg) {
 8001fac:	e064      	b.n	8002078 <read_acc_iis3dwb+0xdc>
		/* Read output only if new xl value is available */
		iis3dwb_xl_flag_data_ready_get(dev_ctx, &reg);
 8001fae:	f107 030f 	add.w	r3, r7, #15
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fe15 	bl	8001be4 <iis3dwb_xl_flag_data_ready_get>

		if (reg) {
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <read_acc_iis3dwb+0xdc>
			/* Read acceleration field data */
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4831      	ldr	r0, [pc, #196]	; (800208c <read_acc_iis3dwb+0xf0>)
 8001fc6:	f008 fe86 	bl	800acd6 <memset>
			iis3dwb_acceleration_raw_get(dev_ctx, data_raw_acceleration);
 8001fca:	4930      	ldr	r1, [pc, #192]	; (800208c <read_acc_iis3dwb+0xf0>)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe5e 	bl	8001c8e <iis3dwb_acceleration_raw_get>
			acceleration_mg[0] = iis3dwb_from_fs2g_to_mg(data_raw_acceleration[0]);
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <read_acc_iis3dwb+0xf0>)
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fd5f 	bl	8001a9c <iis3dwb_from_fs2g_to_mg>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a2b      	ldr	r2, [pc, #172]	; (8002090 <read_acc_iis3dwb+0xf4>)
 8001fe2:	6013      	str	r3, [r2, #0]
			acceleration_mg[1] = iis3dwb_from_fs2g_to_mg(data_raw_acceleration[1]);
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <read_acc_iis3dwb+0xf0>)
 8001fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd56 	bl	8001a9c <iis3dwb_from_fs2g_to_mg>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <read_acc_iis3dwb+0xf4>)
 8001ff4:	6053      	str	r3, [r2, #4]
			acceleration_mg[2] = iis3dwb_from_fs2g_to_mg(data_raw_acceleration[2]);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <read_acc_iis3dwb+0xf0>)
 8001ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd4d 	bl	8001a9c <iis3dwb_from_fs2g_to_mg>
 8002002:	4603      	mov	r3, r0
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <read_acc_iis3dwb+0xf4>)
 8002006:	6093      	str	r3, [r2, #8]

			// Write to SD-Card
			sprintf((char *)tx_buffer,"t=%f,A=%4.2f,%4.2f,%4.2f\n", (float)(HAL_GetTick() - startTime)/1000, acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002008:	f000 feda 	bl	8002dc0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fe5e 	bl	8000cd4 <__aeabi_ui2f>
 8002018:	4603      	mov	r3, r0
 800201a:	491e      	ldr	r1, [pc, #120]	; (8002094 <read_acc_iis3dwb+0xf8>)
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe ff65 	bl	8000eec <__aeabi_fdiv>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f9ff 	bl	8000428 <__aeabi_f2d>
 800202a:	4682      	mov	sl, r0
 800202c:	468b      	mov	fp, r1
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <read_acc_iis3dwb+0xf4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe f9f8 	bl	8000428 <__aeabi_f2d>
 8002038:	4604      	mov	r4, r0
 800203a:	460d      	mov	r5, r1
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <read_acc_iis3dwb+0xf4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe f9f1 	bl	8000428 <__aeabi_f2d>
 8002046:	4680      	mov	r8, r0
 8002048:	4689      	mov	r9, r1
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <read_acc_iis3dwb+0xf4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe f9ea 	bl	8000428 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800205c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002060:	e9cd 4500 	strd	r4, r5, [sp]
 8002064:	4652      	mov	r2, sl
 8002066:	465b      	mov	r3, fp
 8002068:	490b      	ldr	r1, [pc, #44]	; (8002098 <read_acc_iis3dwb+0xfc>)
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <read_acc_iis3dwb+0x100>)
 800206c:	f008 fdd0 	bl	800ac10 <siprintf>
			putData("Data.txt", (char *) tx_buffer);
 8002070:	490a      	ldr	r1, [pc, #40]	; (800209c <read_acc_iis3dwb+0x100>)
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <read_acc_iis3dwb+0x104>)
 8002074:	f7ff fefa 	bl	8001e6c <putData>
	while (!reg) {
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d097      	beq.n	8001fae <read_acc_iis3dwb+0x12>
		}
	}
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	2000246c 	.word	0x2000246c
 8002090:	20002474 	.word	0x20002474
 8002094:	447a0000 	.word	0x447a0000
 8002098:	0800e560 	.word	0x0800e560
 800209c:	20002484 	.word	0x20002484
 80020a0:	0800e548 	.word	0x0800e548

080020a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b08c      	sub	sp, #48	; 0x30
 80020aa:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f000 fe30 	bl	8002d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b0:	f000 f8d8 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b4:	f000 faca 	bl	800264c <MX_GPIO_Init>
  MX_RTC_Init();
 80020b8:	f000 f932 	bl	8002320 <MX_RTC_Init>
  MX_SPI1_Init();
 80020bc:	f000 f994 	bl	80023e8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80020c0:	f000 f9fe 	bl	80024c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020c4:	f000 fa98 	bl	80025f8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80020c8:	f003 fee0 	bl	8005e8c <MX_FATFS_Init>
  MX_TIM2_Init();
 80020cc:	f000 fa48 	bl	8002560 <MX_TIM2_Init>
  MX_SPI2_Init();
 80020d0:	f000 f9c0 	bl	8002454 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start(&htim1);
 80020d4:	4855      	ldr	r0, [pc, #340]	; (800222c <main+0x188>)
 80020d6:	f003 faa1 	bl	800561c <HAL_TIM_Base_Start>
	f_mount(&fs, "", 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	4954      	ldr	r1, [pc, #336]	; (8002230 <main+0x18c>)
 80020de:	4855      	ldr	r0, [pc, #340]	; (8002234 <main+0x190>)
 80020e0:	f006 fbaa 	bl	8008838 <f_mount>

	// Switch on all the components
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ea:	4853      	ldr	r0, [pc, #332]	; (8002238 <main+0x194>)
 80020ec:	f001 f91a 	bl	8003324 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2110      	movs	r1, #16
 80020f4:	4850      	ldr	r0, [pc, #320]	; (8002238 <main+0x194>)
 80020f6:	f001 f915 	bl	8003324 <HAL_GPIO_WritePin>

	stmdev_ctx_t dev_ctx;
	IIS3DWB_Init(&dev_ctx);
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fed5 	bl	8001eac <IIS3DWB_Init>

	read_temp_iis3dwb(&dev_ctx);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff07 	bl	8001f18 <read_temp_iis3dwb>
	putData("Data.txt", "Acceleration data begins:\n");
 800210a:	494c      	ldr	r1, [pc, #304]	; (800223c <main+0x198>)
 800210c:	484c      	ldr	r0, [pc, #304]	; (8002240 <main+0x19c>)
 800210e:	f7ff fead 	bl	8001e6c <putData>
	uint32_t startTime = HAL_GetTick();
 8002112:	f000 fe55 	bl	8002dc0 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		read_acc_iis3dwb(&dev_ctx, startTime);
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff3d 	bl	8001f9c <read_acc_iis3dwb>
		// Send to ESP32
		sprintf(buffer, "^%f,%4.2f,%4.2f,%4.2f,", (float)(HAL_GetTick() - startTime)/1000, acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002122:	f000 fe4d 	bl	8002dc0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fdd1 	bl	8000cd4 <__aeabi_ui2f>
 8002132:	4603      	mov	r3, r0
 8002134:	4943      	ldr	r1, [pc, #268]	; (8002244 <main+0x1a0>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fed8 	bl	8000eec <__aeabi_fdiv>
 800213c:	4603      	mov	r3, r0
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f972 	bl	8000428 <__aeabi_f2d>
 8002144:	4682      	mov	sl, r0
 8002146:	468b      	mov	fp, r1
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <main+0x1a4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f96b 	bl	8000428 <__aeabi_f2d>
 8002152:	4604      	mov	r4, r0
 8002154:	460d      	mov	r5, r1
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <main+0x1a4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	4680      	mov	r8, r0
 8002162:	4689      	mov	r9, r1
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <main+0x1a4>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f95d 	bl	8000428 <__aeabi_f2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002176:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800217a:	e9cd 4500 	strd	r4, r5, [sp]
 800217e:	4652      	mov	r2, sl
 8002180:	465b      	mov	r3, fp
 8002182:	4932      	ldr	r1, [pc, #200]	; (800224c <main+0x1a8>)
 8002184:	4832      	ldr	r0, [pc, #200]	; (8002250 <main+0x1ac>)
 8002186:	f008 fd43 	bl	800ac10 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 800218a:	4831      	ldr	r0, [pc, #196]	; (8002250 <main+0x1ac>)
 800218c:	f7fd ffe0 	bl	8000150 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002198:	492d      	ldr	r1, [pc, #180]	; (8002250 <main+0x1ac>)
 800219a:	482e      	ldr	r0, [pc, #184]	; (8002254 <main+0x1b0>)
 800219c:	f003 fcf6 	bl	8005b8c <HAL_UART_Transmit>

		// Send to ESP32
		sprintf(buffer, "*%4.2f,", temperature_degC);
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <main+0x1b4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f93f 	bl	8000428 <__aeabi_f2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	492b      	ldr	r1, [pc, #172]	; (800225c <main+0x1b8>)
 80021b0:	4827      	ldr	r0, [pc, #156]	; (8002250 <main+0x1ac>)
 80021b2:	f008 fd2d 	bl	800ac10 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80021b6:	4826      	ldr	r0, [pc, #152]	; (8002250 <main+0x1ac>)
 80021b8:	f7fd ffca 	bl	8000150 <strlen>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29a      	uxth	r2, r3
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	4922      	ldr	r1, [pc, #136]	; (8002250 <main+0x1ac>)
 80021c6:	4823      	ldr	r0, [pc, #140]	; (8002254 <main+0x1b0>)
 80021c8:	f003 fce0 	bl	8005b8c <HAL_UART_Transmit>


		// Enter STANDBY Mode after 60 seconds
		if (HAL_GetTick() - startTime >= 60000)
 80021cc:	f000 fdf8 	bl	8002dc0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80021da:	4293      	cmp	r3, r2
 80021dc:	d99c      	bls.n	8002118 <main+0x74>
		{
			// Power off all the components
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <main+0x194>)
 80021e6:	f001 f89d 	bl	8003324 <HAL_GPIO_WritePin>

			// Suspend SysTick, otherwise SysTick interrupt will wakeup MCU after 1ms of STANDBY
			HAL_SuspendTick();
 80021ea:	f000 fe17 	bl	8002e1c <HAL_SuspendTick>

			// Disable Wakeup Flag, otherwise MCU will go to STANDBY only once
			(PWR->CR) |= (PWR_FLAG_WU) << 2U;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <main+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <main+0x1bc>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6013      	str	r3, [r2, #0]

			HAL_PWR_EnterSTANDBYMode();											// Enter STANDBY Mode
 80021fa:	f001 f8b7 	bl	800336c <HAL_PWR_EnterSTANDBYMode>

			// Resume SysTick
			HAL_ResumeTick();
 80021fe:	f000 fe1b 	bl	8002e38 <HAL_ResumeTick>

			// Re-init system clock configuration after STANDBY mode exit
			SystemClock_Config();
 8002202:	f000 f82f 	bl	8002264 <SystemClock_Config>

			// Switch on all the components
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220c:	480a      	ldr	r0, [pc, #40]	; (8002238 <main+0x194>)
 800220e:	f001 f889 	bl	8003324 <HAL_GPIO_WritePin>

			read_temp_iis3dwb(&dev_ctx);
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe7f 	bl	8001f18 <read_temp_iis3dwb>
			putData("Data.txt", "Acceleration data begins:\n");
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <main+0x198>)
 800221c:	4808      	ldr	r0, [pc, #32]	; (8002240 <main+0x19c>)
 800221e:	f7ff fe25 	bl	8001e6c <putData>
			startTime = HAL_GetTick();
 8002222:	f000 fdcd 	bl	8002dc0 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]
		read_acc_iis3dwb(&dev_ctx, startTime);
 8002228:	e776      	b.n	8002118 <main+0x74>
 800222a:	bf00      	nop
 800222c:	20002330 	.word	0x20002330
 8002230:	0800e57c 	.word	0x0800e57c
 8002234:	20000210 	.word	0x20000210
 8002238:	40010800 	.word	0x40010800
 800223c:	0800e580 	.word	0x0800e580
 8002240:	0800e548 	.word	0x0800e548
 8002244:	447a0000 	.word	0x447a0000
 8002248:	20002474 	.word	0x20002474
 800224c:	0800e59c 	.word	0x0800e59c
 8002250:	20002408 	.word	0x20002408
 8002254:	200023c0 	.word	0x200023c0
 8002258:	20002480 	.word	0x20002480
 800225c:	0800e5b4 	.word	0x0800e5b4
 8002260:	40007000 	.word	0x40007000

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	; 0x50
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226e:	2228      	movs	r2, #40	; 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f008 fd2f 	bl	800acd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002294:	2309      	movs	r3, #9
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a2:	2301      	movs	r3, #1
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022a6:	2301      	movs	r3, #1
 80022a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022aa:	2302      	movs	r3, #2
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f86c 	bl	800339c <HAL_RCC_OscConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80022ca:	f000 fab4 	bl	8002836 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fad8 	bl	80038a0 <HAL_RCC_ClockConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022f6:	f000 fa9e 	bl	8002836 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022fa:	2301      	movs	r3, #1
 80022fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fc58 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002312:	f000 fa90 	bl	8002836 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	3750      	adds	r7, #80	; 0x50
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2100      	movs	r1, #0
 800232c:	460a      	mov	r2, r1
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	460a      	mov	r2, r1
 8002332:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <MX_RTC_Init+0xc0>)
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <MX_RTC_Init+0xc4>)
 8002344:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <MX_RTC_Init+0xc0>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800234c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <MX_RTC_Init+0xc0>)
 8002350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002354:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002356:	4822      	ldr	r0, [pc, #136]	; (80023e0 <MX_RTC_Init+0xc0>)
 8002358:	f001 fd9c 	bl	8003e94 <HAL_RTC_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002362:	f000 fa68 	bl	8002836 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002366:	2300      	movs	r3, #0
 8002368:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800236a:	2300      	movs	r3, #0
 800236c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800236e:	2300      	movs	r3, #0
 8002370:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	2201      	movs	r2, #1
 8002378:	4619      	mov	r1, r3
 800237a:	4819      	ldr	r0, [pc, #100]	; (80023e0 <MX_RTC_Init+0xc0>)
 800237c:	f001 fe16 	bl	8003fac <HAL_RTC_SetTime>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8002386:	f000 fa56 	bl	8002836 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800238a:	2301      	movs	r3, #1
 800238c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800238e:	2301      	movs	r3, #1
 8002390:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8002392:	2301      	movs	r3, #1
 8002394:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8002396:	2300      	movs	r3, #0
 8002398:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	480f      	ldr	r0, [pc, #60]	; (80023e0 <MX_RTC_Init+0xc0>)
 80023a4:	f001 ff72 	bl	800428c <HAL_RTC_SetDate>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80023ae:	f000 fa42 	bl	8002836 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80023ba:	2330      	movs	r3, #48	; 0x30
 80023bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023c2:	463b      	mov	r3, r7
 80023c4:	2201      	movs	r2, #1
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_RTC_Init+0xc0>)
 80023ca:	f002 f815 	bl	80043f8 <HAL_RTC_SetAlarm>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80023d4:	f000 fa2f 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000226c 	.word	0x2000226c
 80023e4:	40002800 	.word	0x40002800

080023e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_SPI1_Init+0x64>)
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MX_SPI1_Init+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_SPI1_Init+0x64>)
 80023f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_SPI1_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_SPI1_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_SPI1_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_SPI1_Init+0x64>)
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_SPI1_Init+0x64>)
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <MX_SPI1_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_SPI1_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <MX_SPI1_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_SPI1_Init+0x64>)
 8002434:	220a      	movs	r2, #10
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_SPI1_Init+0x64>)
 800243a:	f002 fb17 	bl	8004a6c <HAL_SPI_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002444:	f000 f9f7 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20002280 	.word	0x20002280
 8002450:	40013000 	.word	0x40013000

08002454 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_SPI2_Init+0x64>)
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <MX_SPI2_Init+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_SPI2_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002474:	2202      	movs	r2, #2
 8002476:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_SPI2_Init+0x64>)
 800247a:	2201      	movs	r2, #1
 800247c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_SPI2_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_SPI2_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_SPI2_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_SPI2_Init+0x64>)
 80024a0:	220a      	movs	r2, #10
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_SPI2_Init+0x64>)
 80024a6:	f002 fae1 	bl	8004a6c <HAL_SPI_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 f9c1 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200022d8 	.word	0x200022d8
 80024bc:	40003800 	.word	0x40003800

080024c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	463b      	mov	r3, r7
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <MX_TIM1_Init+0x98>)
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <MX_TIM1_Init+0x9c>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <MX_TIM1_Init+0x98>)
 80024e4:	2247      	movs	r2, #71	; 0x47
 80024e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <MX_TIM1_Init+0x98>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <MX_TIM1_Init+0x98>)
 80024f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <MX_TIM1_Init+0x98>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <MX_TIM1_Init+0x98>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <MX_TIM1_Init+0x98>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002508:	4813      	ldr	r0, [pc, #76]	; (8002558 <MX_TIM1_Init+0x98>)
 800250a:	f003 f837 	bl	800557c <HAL_TIM_Base_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002514:	f000 f98f 	bl	8002836 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	4619      	mov	r1, r3
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_TIM1_Init+0x98>)
 8002526:	f003 f8c3 	bl	80056b0 <HAL_TIM_ConfigClockSource>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002530:	f000 f981 	bl	8002836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_TIM1_Init+0x98>)
 8002542:	f003 fa75 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800254c:	f000 f973 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20002330 	.word	0x20002330
 800255c:	40012c00 	.word	0x40012c00

08002560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	463b      	mov	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <MX_TIM2_Init+0x94>)
 800257e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002582:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <MX_TIM2_Init+0x94>)
 8002586:	2247      	movs	r2, #71	; 0x47
 8002588:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <MX_TIM2_Init+0x94>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MX_TIM2_Init+0x94>)
 8002592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002596:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_TIM2_Init+0x94>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <MX_TIM2_Init+0x94>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025a4:	4813      	ldr	r0, [pc, #76]	; (80025f4 <MX_TIM2_Init+0x94>)
 80025a6:	f002 ffe9 	bl	800557c <HAL_TIM_Base_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025b0:	f000 f941 	bl	8002836 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4619      	mov	r1, r3
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <MX_TIM2_Init+0x94>)
 80025c2:	f003 f875 	bl	80056b0 <HAL_TIM_ConfigClockSource>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025cc:	f000 f933 	bl	8002836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_TIM2_Init+0x94>)
 80025de:	f003 fa27 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025e8:	f000 f925 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20002378 	.word	0x20002378

080025f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_USART1_UART_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002630:	f003 fa5c 	bl	8005aec <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800263a:	f000 f8fc 	bl	8002836 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200023c0 	.word	0x200023c0
 8002648:	40013800 	.word	0x40013800

0800264c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <MX_GPIO_Init+0xd0>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a2d      	ldr	r2, [pc, #180]	; (800271c <MX_GPIO_Init+0xd0>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <MX_GPIO_Init+0xd0>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <MX_GPIO_Init+0xd0>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <MX_GPIO_Init+0xd0>)
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <MX_GPIO_Init+0xd0>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <MX_GPIO_Init+0xd0>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a21      	ldr	r2, [pc, #132]	; (800271c <MX_GPIO_Init+0xd0>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <MX_GPIO_Init+0xd0>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <MX_GPIO_Init+0xd0>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <MX_GPIO_Init+0xd0>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <MX_GPIO_Init+0xd0>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80026c6:	4816      	ldr	r0, [pc, #88]	; (8002720 <MX_GPIO_Init+0xd4>)
 80026c8:	f000 fe2c 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f44f 5192 	mov.w	r1, #4672	; 0x1240
 80026d2:	4814      	ldr	r0, [pc, #80]	; (8002724 <MX_GPIO_Init+0xd8>)
 80026d4:	f000 fe26 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11;
 80026d8:	f44f 6311 	mov.w	r3, #2320	; 0x910
 80026dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4619      	mov	r1, r3
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <MX_GPIO_Init+0xd4>)
 80026f2:	f000 fc93 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_9;
 80026f6:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2302      	movs	r3, #2
 8002706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4619      	mov	r1, r3
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_GPIO_Init+0xd8>)
 8002710:	f000 fc84 	bl	800301c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	40010800 	.word	0x40010800
 8002724:	40010c00 	.word	0x40010c00

08002728 <_write>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
}


int _write(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e009      	b.n	800274e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60ba      	str	r2, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fb6c 	bl	8001e20 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	dbf1      	blt.n	800273a <_write+0x12>
  }
  return len;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	72fb      	strb	r3, [r7, #11]
 8002770:	4613      	mov	r3, r2
 8002772:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	2110      	movs	r1, #16
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <platform_write+0x50>)
 800277a:	f000 fdd3 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800277e:	f107 010b 	add.w	r1, r7, #11
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	2201      	movs	r2, #1
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f002 f9f3 	bl	8004b74 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 800278e:	893a      	ldrh	r2, [r7, #8]
 8002790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f002 f9ec 	bl	8004b74 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	2110      	movs	r1, #16
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <platform_write+0x50>)
 80027a2:	f000 fdbf 	bl	8003324 <HAL_GPIO_WritePin>
	return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40010800 	.word	0x40010800

080027b4 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	460b      	mov	r3, r1
 80027c2:	72fb      	strb	r3, [r7, #11]
 80027c4:	4613      	mov	r3, r2
 80027c6:	813b      	strh	r3, [r7, #8]
    reg |= 0x80;
 80027c8:	7afb      	ldrb	r3, [r7, #11]
 80027ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2110      	movs	r1, #16
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <platform_read+0x5c>)
 80027d8:	f000 fda4 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80027dc:	f107 010b 	add.w	r1, r7, #11
 80027e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e4:	2201      	movs	r2, #1
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f002 f9c4 	bl	8004b74 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 80027ec:	893a      	ldrh	r2, [r7, #8]
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f002 fb00 	bl	8004dfa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	4804      	ldr	r0, [pc, #16]	; (8002810 <platform_read+0x5c>)
 8002800:	f000 fd90 	bl	8003324 <HAL_GPIO_WritePin>
	return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40010800 	.word	0x40010800

08002814 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fad9 	bl	8002dd4 <HAL_Delay>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800283a:	b672      	cpsid	i
}
 800283c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800283e:	e7fe      	b.n	800283e <Error_Handler+0x8>

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_MspInit+0x5c>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_MspInit+0x5c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6193      	str	r3, [r2, #24]
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_MspInit+0x5c>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_MspInit+0x5c>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_MspInit+0x5c>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_MspInit+0x60>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_MspInit+0x60>)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000

080028a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_RTC_MspInit+0x3c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d110      	bne.n	80028d8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80028b6:	f000 fd4d 	bl	8003354 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RTC_MspInit+0x40>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RTC_MspInit+0x40>)
 80028c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <HAL_RTC_MspInit+0x40>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RTC_MspInit+0x44>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40002800 	.word	0x40002800
 80028e4:	40021000 	.word	0x40021000
 80028e8:	4242043c 	.word	0x4242043c

080028ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0318 	add.w	r3, r7, #24
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <HAL_SPI_MspInit+0xf8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d130      	bne.n	800296e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a35      	ldr	r2, [pc, #212]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800293c:	23a0      	movs	r3, #160	; 0xa0
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	4619      	mov	r1, r3
 800294e:	4827      	ldr	r0, [pc, #156]	; (80029ec <HAL_SPI_MspInit+0x100>)
 8002950:	f000 fb64 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	4619      	mov	r1, r3
 8002966:	4821      	ldr	r0, [pc, #132]	; (80029ec <HAL_SPI_MspInit+0x100>)
 8002968:	f000 fb58 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800296c:	e036      	b.n	80029dc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_SPI_MspInit+0x104>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d131      	bne.n	80029dc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_SPI_MspInit+0xfc>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4619      	mov	r1, r3
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <HAL_SPI_MspInit+0x108>)
 80029be:	f000 fb2d 	bl	800301c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0318 	add.w	r3, r7, #24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4807      	ldr	r0, [pc, #28]	; (80029f4 <HAL_SPI_MspInit+0x108>)
 80029d8:	f000 fb20 	bl	800301c <HAL_GPIO_Init>
}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40013000 	.word	0x40013000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010800 	.word	0x40010800
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40010c00 	.word	0x40010c00

080029f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_TIM_Base_MspInit+0x58>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10c      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a14:	6193      	str	r3, [r2, #24]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a22:	e010      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d10b      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	61d3      	str	r3, [r2, #28]
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_TIM_Base_MspInit+0x5c>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_UART_MspInit+0x8c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d131      	bne.n	8002adc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_UART_MspInit+0x90>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4619      	mov	r1, r3
 8002abc:	480b      	ldr	r0, [pc, #44]	; (8002aec <HAL_UART_MspInit+0x94>)
 8002abe:	f000 faad 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_UART_MspInit+0x94>)
 8002ad8:	f000 faa0 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010800 	.word	0x40010800

08002af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002af4:	e7fe      	b.n	8002af4 <NMI_Handler+0x4>

08002af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler+0x4>

08002afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler+0x4>

08002b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <BusFault_Handler+0x4>

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <UsageFault_Handler+0x4>

08002b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <SysTick_Handler+0x34>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <SysTick_Handler+0x18>
		Timer1--;
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <SysTick_Handler+0x34>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <SysTick_Handler+0x34>)
 8002b4a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <SysTick_Handler+0x38>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <SysTick_Handler+0x2c>
		Timer2--;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Handler+0x38>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <SysTick_Handler+0x38>)
 8002b5e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b60:	f000 f91c 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000208 	.word	0x20000208
 8002b6c:	2000020a 	.word	0x2000020a

08002b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return 1;
 8002b74:	2301      	movs	r3, #1
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <_kill>:

int _kill(int pid, int sig)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b88:	f008 f8f8 	bl	800ad7c <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2216      	movs	r2, #22
 8002b90:	601a      	str	r2, [r3, #0]
  return -1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_exit>:

void _exit (int status)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffe7 	bl	8002b7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bb0:	e7fe      	b.n	8002bb0 <_exit+0x12>

08002bb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e00a      	b.n	8002bda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	4601      	mov	r1, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	60ba      	str	r2, [r7, #8]
 8002bd0:	b2ca      	uxtb	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dbf0      	blt.n	8002bc4 <_read+0x12>
  }

  return len;
 8002be2:	687b      	ldr	r3, [r7, #4]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c12:	605a      	str	r2, [r3, #4]
  return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_isatty>:

int _isatty(int file)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f008 f87e 	bl	800ad7c <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20005000 	.word	0x20005000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	2000286c 	.word	0x2000286c
 8002cb4:	20002bf8 	.word	0x20002bf8

08002cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cc4:	f7ff fff8 	bl	8002cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cca:	490c      	ldr	r1, [pc, #48]	; (8002cfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ce0:	4c09      	ldr	r4, [pc, #36]	; (8002d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cee:	f008 f84b 	bl	800ad88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cf2:	f7ff f9d7 	bl	80020a4 <main>
  bx lr
 8002cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cfc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002d00:	0800efc8 	.word	0x0800efc8
  ldr r2, =_sbss
 8002d04:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002d08:	20002bf4 	.word	0x20002bf4

08002d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC1_2_IRQHandler>
	...

08002d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x28>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x28>)
 8002d1a:	f043 0310 	orr.w	r3, r3, #16
 8002d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 f947 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	200f      	movs	r0, #15
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fd88 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40022000 	.word	0x40022000

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f951 	bl	8003002 <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d78:	f000 f927 	bl	8002fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000004 	.word	0x20000004
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	20000008 	.word	0x20000008

08002d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_IncTick+0x1c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_IncTick+0x20>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <HAL_IncTick+0x20>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	2000000c 	.word	0x2000000c
 8002dbc:	20002870 	.word	0x20002870

08002dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_GetTick+0x10>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20002870 	.word	0x20002870

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffe0 	bl	8002dc0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000000c 	.word	0x2000000c

08002e1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_SuspendTick+0x18>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_SuspendTick+0x18>)
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_ResumeTick+0x18>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <HAL_ResumeTick+0x18>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <__NVIC_SetPriorityGrouping>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_SetPriority>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <SysTick_Config>:
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f80:	d301      	bcc.n	8002f86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00f      	b.n	8002fa6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <SysTick_Config+0x40>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8e:	210f      	movs	r1, #15
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f94:	f7ff ff90 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <SysTick_Config+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <SysTick_Config+0x40>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff49 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff5e 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ff90 	bl	8002f0c <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff5f 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ffb0 	bl	8002f70 <SysTick_Config>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b480      	push	{r7}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	e169      	b.n	8003304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003030:	2201      	movs	r2, #1
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 8158 	bne.w	80032fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a9a      	ldr	r2, [pc, #616]	; (80032bc <HAL_GPIO_Init+0x2a0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d05e      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
 8003058:	4a98      	ldr	r2, [pc, #608]	; (80032bc <HAL_GPIO_Init+0x2a0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d875      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 800305e:	4a98      	ldr	r2, [pc, #608]	; (80032c0 <HAL_GPIO_Init+0x2a4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d058      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
 8003064:	4a96      	ldr	r2, [pc, #600]	; (80032c0 <HAL_GPIO_Init+0x2a4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d86f      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 800306a:	4a96      	ldr	r2, [pc, #600]	; (80032c4 <HAL_GPIO_Init+0x2a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d052      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
 8003070:	4a94      	ldr	r2, [pc, #592]	; (80032c4 <HAL_GPIO_Init+0x2a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d869      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 8003076:	4a94      	ldr	r2, [pc, #592]	; (80032c8 <HAL_GPIO_Init+0x2ac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04c      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
 800307c:	4a92      	ldr	r2, [pc, #584]	; (80032c8 <HAL_GPIO_Init+0x2ac>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d863      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 8003082:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_GPIO_Init+0x2b0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d046      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
 8003088:	4a90      	ldr	r2, [pc, #576]	; (80032cc <HAL_GPIO_Init+0x2b0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d85d      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 800308e:	2b12      	cmp	r3, #18
 8003090:	d82a      	bhi.n	80030e8 <HAL_GPIO_Init+0xcc>
 8003092:	2b12      	cmp	r3, #18
 8003094:	d859      	bhi.n	800314a <HAL_GPIO_Init+0x12e>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_GPIO_Init+0x80>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	08003117 	.word	0x08003117
 80030a0:	080030f1 	.word	0x080030f1
 80030a4:	08003103 	.word	0x08003103
 80030a8:	08003145 	.word	0x08003145
 80030ac:	0800314b 	.word	0x0800314b
 80030b0:	0800314b 	.word	0x0800314b
 80030b4:	0800314b 	.word	0x0800314b
 80030b8:	0800314b 	.word	0x0800314b
 80030bc:	0800314b 	.word	0x0800314b
 80030c0:	0800314b 	.word	0x0800314b
 80030c4:	0800314b 	.word	0x0800314b
 80030c8:	0800314b 	.word	0x0800314b
 80030cc:	0800314b 	.word	0x0800314b
 80030d0:	0800314b 	.word	0x0800314b
 80030d4:	0800314b 	.word	0x0800314b
 80030d8:	0800314b 	.word	0x0800314b
 80030dc:	0800314b 	.word	0x0800314b
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	4a79      	ldr	r2, [pc, #484]	; (80032d0 <HAL_GPIO_Init+0x2b4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ee:	e02c      	b.n	800314a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e029      	b.n	800314c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	3304      	adds	r3, #4
 80030fe:	623b      	str	r3, [r7, #32]
          break;
 8003100:	e024      	b.n	800314c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	3308      	adds	r3, #8
 8003108:	623b      	str	r3, [r7, #32]
          break;
 800310a:	e01f      	b.n	800314c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	330c      	adds	r3, #12
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e01a      	b.n	800314c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800311e:	2304      	movs	r3, #4
 8003120:	623b      	str	r3, [r7, #32]
          break;
 8003122:	e013      	b.n	800314c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800312c:	2308      	movs	r3, #8
 800312e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	611a      	str	r2, [r3, #16]
          break;
 8003136:	e009      	b.n	800314c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003138:	2308      	movs	r3, #8
 800313a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	615a      	str	r2, [r3, #20]
          break;
 8003142:	e003      	b.n	800314c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
          break;
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x130>
          break;
 800314a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	d801      	bhi.n	8003156 <HAL_GPIO_Init+0x13a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	e001      	b.n	800315a <HAL_GPIO_Init+0x13e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2bff      	cmp	r3, #255	; 0xff
 8003160:	d802      	bhi.n	8003168 <HAL_GPIO_Init+0x14c>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x152>
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	3b08      	subs	r3, #8
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	210f      	movs	r1, #15
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80b1 	beq.w	80032fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800319c:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <HAL_GPIO_Init+0x2b8>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <HAL_GPIO_Init+0x2b8>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6193      	str	r3, [r2, #24]
 80031a8:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_GPIO_Init+0x2b8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031b4:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_GPIO_Init+0x2bc>)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a40      	ldr	r2, [pc, #256]	; (80032dc <HAL_GPIO_Init+0x2c0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_GPIO_Init+0x1ec>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_GPIO_Init+0x2c4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00d      	beq.n	8003204 <HAL_GPIO_Init+0x1e8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <HAL_GPIO_Init+0x2c8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0x1e4>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3d      	ldr	r2, [pc, #244]	; (80032e8 <HAL_GPIO_Init+0x2cc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_GPIO_Init+0x1e0>
 80031f8:	2303      	movs	r3, #3
 80031fa:	e006      	b.n	800320a <HAL_GPIO_Init+0x1ee>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e004      	b.n	800320a <HAL_GPIO_Init+0x1ee>
 8003200:	2302      	movs	r3, #2
 8003202:	e002      	b.n	800320a <HAL_GPIO_Init+0x1ee>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_GPIO_Init+0x1ee>
 8003208:	2300      	movs	r3, #0
 800320a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320c:	f002 0203 	and.w	r2, r2, #3
 8003210:	0092      	lsls	r2, r2, #2
 8003212:	4093      	lsls	r3, r2
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800321a:	492f      	ldr	r1, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x2bc>)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	492c      	ldr	r1, [pc, #176]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	43db      	mvns	r3, r3
 800324a:	4928      	ldr	r1, [pc, #160]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800324c:	4013      	ands	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	4922      	ldr	r1, [pc, #136]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	60cb      	str	r3, [r1, #12]
 8003268:	e006      	b.n	8003278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	43db      	mvns	r3, r3
 8003272:	491e      	ldr	r1, [pc, #120]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003274:	4013      	ands	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4918      	ldr	r1, [pc, #96]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	43db      	mvns	r3, r3
 800329a:	4914      	ldr	r1, [pc, #80]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800329c:	4013      	ands	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d021      	beq.n	80032f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	490e      	ldr	r1, [pc, #56]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	e021      	b.n	80032fe <HAL_GPIO_Init+0x2e2>
 80032ba:	bf00      	nop
 80032bc:	10320000 	.word	0x10320000
 80032c0:	10310000 	.word	0x10310000
 80032c4:	10220000 	.word	0x10220000
 80032c8:	10210000 	.word	0x10210000
 80032cc:	10120000 	.word	0x10120000
 80032d0:	10110000 	.word	0x10110000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40010800 	.word	0x40010800
 80032e0:	40010c00 	.word	0x40010c00
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40011400 	.word	0x40011400
 80032ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_GPIO_Init+0x304>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <HAL_GPIO_Init+0x304>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	3301      	adds	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f ae8e 	bne.w	8003030 <HAL_GPIO_Init+0x14>
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	372c      	adds	r7, #44	; 0x2c
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_PWR_EnableBkUpAccess+0x14>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	420e0020 	.word	0x420e0020

0800336c <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4a05      	ldr	r2, [pc, #20]	; (8003398 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003388:	bf30      	wfi
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e272      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8087 	beq.w	80034ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033bc:	4b92      	ldr	r3, [pc, #584]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c8:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d112      	bne.n	80033fa <HAL_RCC_OscConfig+0x5e>
 80033d4:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d10b      	bne.n	80033fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e2:	4b89      	ldr	r3, [pc, #548]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d06c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x12c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d168      	bne.n	80034c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e24c      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x76>
 8003404:	4b80      	ldr	r3, [pc, #512]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7f      	ldr	r2, [pc, #508]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800340a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e02e      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x98>
 800341a:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a77      	ldr	r2, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e01d      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0xbc>
 800343e:	4b72      	ldr	r3, [pc, #456]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a71      	ldr	r2, [pc, #452]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6e      	ldr	r2, [pc, #440]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003458:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800345e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b68      	ldr	r3, [pc, #416]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a67      	ldr	r2, [pc, #412]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800346a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7ff fca2 	bl	8002dc0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7ff fc9e 	bl	8002dc0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e200      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0xe4>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff fc8e 	bl	8002dc0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7ff fc8a 	bl	8002dc0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1ec      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x10c>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d063      	beq.n	800359e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d6:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e2:	4b49      	ldr	r3, [pc, #292]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d11c      	bne.n	8003528 <HAL_RCC_OscConfig+0x18c>
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x176>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1c0      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4939      	ldr	r1, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	e03a      	b.n	800359e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003530:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCC_OscConfig+0x270>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff fc43 	bl	8002dc0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353e:	f7ff fc3f 	bl	8002dc0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1a1      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4927      	ldr	r1, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
 8003570:	e015      	b.n	800359e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x270>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff fc22 	bl	8002dc0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7ff fc1e 	bl	8002dc0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e180      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d03a      	beq.n	8003620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_RCC_OscConfig+0x274>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b8:	f7ff fc02 	bl	8002dc0 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7ff fbfe 	bl	8002dc0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e160      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035de:	2001      	movs	r0, #1
 80035e0:	f000 face 	bl	8003b80 <RCC_Delay>
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_OscConfig+0x274>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7ff fbe8 	bl	8002dc0 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f2:	e00f      	b.n	8003614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7ff fbe4 	bl	8002dc0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d908      	bls.n	8003614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e146      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	42420000 	.word	0x42420000
 8003610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e9      	bne.n	80035f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80a6 	beq.w	800377a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003632:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a87      	ldr	r2, [pc, #540]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]
 800364a:	4b85      	ldr	r3, [pc, #532]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b7f      	ldr	r3, [pc, #508]	; (8003864 <HAL_RCC_OscConfig+0x4c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7e      	ldr	r2, [pc, #504]	; (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7ff fba5 	bl	8002dc0 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7ff fba1 	bl	8002dc0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	; 0x64
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e103      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b75      	ldr	r3, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x312>
 80036a0:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e02d      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x334>
 80036b6:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a69      	ldr	r2, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a66      	ldr	r2, [pc, #408]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	e01c      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x356>
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6213      	str	r3, [r2, #32]
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e00b      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036f2:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4a5a      	ldr	r2, [pc, #360]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6213      	str	r3, [r2, #32]
 80036fe:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7ff fb55 	bl	8002dc0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7ff fb51 	bl	8002dc0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0b1      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCC_OscConfig+0x37e>
 800373c:	e014      	b.n	8003768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7ff fb3f 	bl	8002dc0 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7ff fb3b 	bl	8002dc0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e09b      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d061      	beq.n	8003854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d146      	bne.n	8003826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b33      	ldr	r3, [pc, #204]	; (8003868 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7ff fb0f 	bl	8002dc0 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7ff fb0b 	bl	8002dc0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e06d      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d108      	bne.n	80037e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4921      	ldr	r1, [pc, #132]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a19      	ldr	r1, [r3, #32]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	430b      	orrs	r3, r1
 80037f2:	491b      	ldr	r1, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7ff fadf 	bl	8002dc0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7ff fadb 	bl	8002dc0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e03d      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x46a>
 8003824:	e035      	b.n	8003892 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7ff fac8 	bl	8002dc0 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7ff fac4 	bl	8002dc0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e026      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x498>
 8003852:	e01e      	b.n	8003892 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e019      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_OscConfig+0x500>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0d0      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d910      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4965      	ldr	r1, [pc, #404]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800391e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d040      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d115      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e073      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b3d      	ldr	r3, [pc, #244]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e06b      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397e:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4936      	ldr	r1, [pc, #216]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003990:	f7ff fa16 	bl	8002dc0 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7ff fa12 	bl	8002dc0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e053      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d210      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 0207 	bic.w	r2, r3, #7
 80039d6:	4922      	ldr	r1, [pc, #136]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1cc>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f974 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0800e604 	.word	0x0800e604
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	20000008 	.word	0x20000008

08003a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x36>
 8003aa2:	e027      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	613b      	str	r3, [r7, #16]
      break;
 8003aa8:	e027      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0c9b      	lsrs	r3, r3, #18
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	0c5b      	lsrs	r3, r3, #17
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad6:	fb03 f202 	mul.w	r2, r3, r2
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e004      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	613b      	str	r3, [r7, #16]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003af6:	613b      	str	r3, [r7, #16]
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	693b      	ldr	r3, [r7, #16]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	007a1200 	.word	0x007a1200
 8003b10:	0800e61c 	.word	0x0800e61c
 8003b14:	0800e62c 	.word	0x0800e62c
 8003b18:	003d0900 	.word	0x003d0900

08003b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff2 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	0800e614 	.word	0x0800e614

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b5c:	f7ff ffde 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	0adb      	lsrs	r3, r3, #11
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0800e614 	.word	0x0800e614

08003b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCC_Delay+0x34>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <RCC_Delay+0x38>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0a5b      	lsrs	r3, r3, #9
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b9c:	bf00      	nop
  }
  while (Delay --);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	60fa      	str	r2, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <RCC_Delay+0x1c>
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	10624dd3 	.word	0x10624dd3

08003bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d07d      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4a4b      	ldr	r2, [pc, #300]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	61d3      	str	r3, [r2, #28]
 8003bf4:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d118      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c10:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a42      	ldr	r2, [pc, #264]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7ff f8d0 	bl	8002dc0 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7ff f8cc 	bl	8002dc0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e06d      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02e      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d027      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c60:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c76:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d014      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7ff f89b 	bl	8002dc0 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7ff f897 	bl	8002dc0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e036      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ee      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4917      	ldr	r1, [pc, #92]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	490b      	ldr	r1, [pc, #44]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42420440 	.word	0x42420440

08003d28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	f200 808a 	bhi.w	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d045      	beq.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d075      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d5e:	e082      	b.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d66:	4b45      	ldr	r3, [pc, #276]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d07b      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	0c9b      	lsrs	r3, r3, #18
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d015      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0c5b      	lsrs	r3, r3, #17
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	4a3b      	ldr	r2, [pc, #236]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003da4:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a34      	ldr	r2, [pc, #208]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	61bb      	str	r3, [r7, #24]
      break;
 8003dd2:	e04a      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
      break;
 8003de2:	e042      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d108      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e01f      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e12:	d109      	bne.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003e20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e00f      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e32:	d11c      	bne.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003e40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e44:	61bb      	str	r3, [r7, #24]
      break;
 8003e46:	e012      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e4a:	f7ff fe85 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0b9b      	lsrs	r3, r3, #14
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	61bb      	str	r3, [r7, #24]
      break;
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e6e:	bf00      	nop
    }
  }
  return (frequency);
 8003e70:	69bb      	ldr	r3, [r7, #24]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	0800e630 	.word	0x0800e630
 8003e84:	0800e640 	.word	0x0800e640
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	003d0900 	.word	0x003d0900
 8003e90:	aaaaaaab 	.word	0xaaaaaaab

08003e94 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07a      	b.n	8003fa0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7c5b      	ldrb	r3, [r3, #17]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe fcf2 	bl	80028a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb2f 	bl	800452a <HAL_RTC_WaitForSynchro>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e061      	b.n	8003fa0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fbe8 	bl	80046b2 <RTC_EnterInitMode>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e056      	b.n	8003fa0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0207 	bic.w	r2, r2, #7
 8003f00:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RTC_Init+0x114>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_RTC_Init+0x114>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RTC_Init+0x114>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4921      	ldr	r1, [pc, #132]	; (8003fa8 <HAL_RTC_Init+0x114>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f30:	d003      	beq.n	8003f3a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e00e      	b.n	8003f58 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7ff fef4 	bl	8003d28 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f40:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e026      	b.n	8003fa0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	0c1a      	lsrs	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 020f 	and.w	r2, r2, #15
 8003f64:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fbc6 	bl	8004702 <RTC_ExitInitMode>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00c      	b.n	8003fa0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40006c00 	.word	0x40006c00

08003fac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_RTC_SetTime+0x20>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e080      	b.n	80040d2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	7c1b      	ldrb	r3, [r3, #16]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_RTC_SetTime+0x30>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e07a      	b.n	80040d2 <HAL_RTC_SetTime+0x126>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d113      	bne.n	8004016 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ff8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	4619      	mov	r1, r3
 8004002:	460b      	mov	r3, r1
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a5b      	subs	r3, r3, r1
 8004008:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800400a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004010:	4413      	add	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e01e      	b.n	8004054 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fbb6 	bl	800478c <RTC_Bcd2ToByte>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004028:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fbab 	bl	800478c <RTC_Bcd2ToByte>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004042:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	789b      	ldrb	r3, [r3, #2]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fb9f 	bl	800478c <RTC_Bcd2ToByte>
 800404e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004050:	4423      	add	r3, r4
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fac4 	bl	80045e4 <RTC_WriteTimeCounter>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2204      	movs	r2, #4
 8004066:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e02f      	b.n	80040d2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0205 	bic.w	r2, r2, #5
 8004080:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fad5 	bl	8004632 <RTC_ReadAlarmCounter>
 8004088:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004090:	d018      	beq.n	80040c4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	429a      	cmp	r2, r3
 8004098:	d214      	bcs.n	80040c4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040a4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fadb 	bl	8004664 <RTC_WriteAlarmCounter>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2204      	movs	r2, #4
 80040b8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e006      	b.n	80040d2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
	...

080040dc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RTC_GetTime+0x28>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b5      	b.n	8004274 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0ac      	b.n	8004274 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fa32 	bl	8004584 <RTC_ReadTimeCounter>
 8004120:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4a55      	ldr	r2, [pc, #340]	; (800427c <HAL_RTC_GetTime+0x1a0>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0adb      	lsrs	r3, r3, #11
 800412c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4b52      	ldr	r3, [pc, #328]	; (800427c <HAL_RTC_GetTime+0x1a0>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	0adb      	lsrs	r3, r3, #11
 8004138:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4a4f      	ldr	r2, [pc, #316]	; (8004280 <HAL_RTC_GetTime+0x1a4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_RTC_GetTime+0x1a0>)
 8004154:	fba2 1203 	umull	r1, r2, r2, r3
 8004158:	0ad2      	lsrs	r2, r2, #11
 800415a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800415e:	fb01 f202 	mul.w	r2, r1, r2
 8004162:	1a9a      	subs	r2, r3, r2
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RTC_GetTime+0x1a4>)
 8004166:	fba3 1302 	umull	r1, r3, r3, r2
 800416a:	0959      	lsrs	r1, r3, #5
 800416c:	460b      	mov	r3, r1
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a5b      	subs	r3, r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	1ad1      	subs	r1, r2, r3
 8004176:	b2ca      	uxtb	r2, r1
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b17      	cmp	r3, #23
 8004180:	d955      	bls.n	800422e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <HAL_RTC_GetTime+0x1a8>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800418e:	6939      	ldr	r1, [r7, #16]
 8004190:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <HAL_RTC_GetTime+0x1a8>)
 8004192:	fba3 2301 	umull	r2, r3, r3, r1
 8004196:	091a      	lsrs	r2, r3, #4
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	1aca      	subs	r2, r1, r3
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fa42 	bl	8004632 <RTC_ReadAlarmCounter>
 80041ae:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b6:	d008      	beq.n	80041ca <HAL_RTC_GetTime+0xee>
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d904      	bls.n	80041ca <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e002      	b.n	80041d0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ce:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <HAL_RTC_GetTime+0x1ac>)
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f9ff 	bl	80045e4 <RTC_WriteTimeCounter>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e041      	b.n	8004274 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f6:	d00c      	beq.n	8004212 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004200:	69f9      	ldr	r1, [r7, #28]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa2e 	bl	8004664 <RTC_WriteAlarmCounter>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e030      	b.n	8004274 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fa25 	bl	8004664 <RTC_WriteAlarmCounter>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e027      	b.n	8004274 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 facd 	bl	80047c6 <RTC_DateUpdate>
 800422c:	e003      	b.n	8004236 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fa86 	bl	8004752 <RTC_ByteToBcd2>
 8004246:	4603      	mov	r3, r0
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fa7d 	bl	8004752 <RTC_ByteToBcd2>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	789b      	ldrb	r3, [r3, #2]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fa74 	bl	8004752 <RTC_ByteToBcd2>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	91a2b3c5 	.word	0x91a2b3c5
 8004280:	88888889 	.word	0x88888889
 8004284:	aaaaaaab 	.word	0xaaaaaaab
 8004288:	00015180 	.word	0x00015180

0800428c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_RTC_SetDate+0x24>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e097      	b.n	80043e4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	7c1b      	ldrb	r3, [r3, #16]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_RTC_SetDate+0x34>
 80042bc:	2302      	movs	r3, #2
 80042be:	e091      	b.n	80043e4 <HAL_RTC_SetDate+0x158>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10c      	bne.n	80042ec <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	78da      	ldrb	r2, [r3, #3]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	785a      	ldrb	r2, [r3, #1]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	789a      	ldrb	r2, [r3, #2]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	739a      	strb	r2, [r3, #14]
 80042ea:	e01a      	b.n	8004322 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fa4b 	bl	800478c <RTC_Bcd2ToByte>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fa42 	bl	800478c <RTC_Bcd2ToByte>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	789b      	ldrb	r3, [r3, #2]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa39 	bl	800478c <RTC_Bcd2ToByte>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	7bdb      	ldrb	r3, [r3, #15]
 8004326:	4618      	mov	r0, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	7b59      	ldrb	r1, [r3, #13]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	7b9b      	ldrb	r3, [r3, #14]
 8004330:	461a      	mov	r2, r3
 8004332:	f000 fb23 	bl	800497c <RTC_WeekDayNum>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	7b1a      	ldrb	r2, [r3, #12]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f91c 	bl	8004584 <RTC_ReadTimeCounter>
 800434c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_RTC_SetDate+0x160>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0adb      	lsrs	r3, r3, #11
 8004358:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b18      	cmp	r3, #24
 800435e:	d93a      	bls.n	80043d6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4a23      	ldr	r2, [pc, #140]	; (80043f0 <HAL_RTC_SetDate+0x164>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <HAL_RTC_SetDate+0x168>)
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f933 	bl	80045e4 <RTC_WriteTimeCounter>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2204      	movs	r2, #4
 8004388:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e027      	b.n	80043e4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f94c 	bl	8004632 <RTC_ReadAlarmCounter>
 800439a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a2:	d018      	beq.n	80043d6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d214      	bcs.n	80043d6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80043b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043b6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043b8:	69b9      	ldr	r1, [r7, #24]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f952 	bl	8004664 <RTC_WriteAlarmCounter>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2204      	movs	r2, #4
 80043ca:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e006      	b.n	80043e4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	91a2b3c5 	.word	0x91a2b3c5
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	00015180 	.word	0x00015180

080043f8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b089      	sub	sp, #36	; 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	2100      	movs	r1, #0
 800440e:	460a      	mov	r2, r1
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	460a      	mov	r2, r1
 8004414:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_RTC_SetAlarm+0x2a>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07d      	b.n	8004522 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	7c1b      	ldrb	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_RTC_SetAlarm+0x3a>
 800442e:	2302      	movs	r3, #2
 8004430:	e077      	b.n	8004522 <HAL_RTC_SetAlarm+0x12a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2202      	movs	r2, #2
 800443c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	2200      	movs	r2, #0
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fe48 	bl	80040dc <HAL_RTC_GetTime>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e065      	b.n	8004522 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004456:	7d3b      	ldrb	r3, [r7, #20]
 8004458:	461a      	mov	r2, r3
 800445a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800445e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004462:	7d7b      	ldrb	r3, [r7, #21]
 8004464:	4619      	mov	r1, r3
 8004466:	460b      	mov	r3, r1
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a5b      	subs	r3, r3, r1
 800446c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800446e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004470:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004472:	4413      	add	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004486:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	4619      	mov	r1, r3
 8004490:	460b      	mov	r3, r1
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a5b      	subs	r3, r3, r1
 8004496:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004498:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800449e:	4413      	add	r3, r2
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e01e      	b.n	80044e2 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f96f 	bl	800478c <RTC_Bcd2ToByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044b6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f964 	bl	800478c <RTC_Bcd2ToByte>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80044d0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	789b      	ldrb	r3, [r3, #2]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f958 	bl	800478c <RTC_Bcd2ToByte>
 80044dc:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80044de:	4423      	add	r3, r4
 80044e0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d205      	bcs.n	80044f6 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80044f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044f4:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f8b3 	bl	8004664 <RTC_WriteAlarmCounter>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2204      	movs	r2, #4
 8004508:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e006      	b.n	8004522 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd90      	pop	{r4, r7, pc}

0800452a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e01d      	b.n	800457c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0208 	bic.w	r2, r2, #8
 800454e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004550:	f7fe fc36 	bl	8002dc0 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004556:	e009      	b.n	800456c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004558:	f7fe fc32 	bl	8002dc0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004566:	d901      	bls.n	800456c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e007      	b.n	800457c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ee      	beq.n	8004558 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	827b      	strh	r3, [r7, #18]
 8004590:	2300      	movs	r3, #0
 8004592:	823b      	strh	r3, [r7, #16]
 8004594:	2300      	movs	r3, #0
 8004596:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80045b4:	8a7a      	ldrh	r2, [r7, #18]
 80045b6:	8a3b      	ldrh	r3, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d008      	beq.n	80045ce <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80045bc:	8a3b      	ldrh	r3, [r7, #16]
 80045be:	041a      	lsls	r2, r3, #16
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e004      	b.n	80045d8 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80045ce:	8a7b      	ldrh	r3, [r7, #18]
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80045d8:	697b      	ldr	r3, [r7, #20]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f85d 	bl	80046b2 <RTC_EnterInitMode>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e011      	b.n	8004628 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	0c12      	lsrs	r2, r2, #16
 800460c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	b292      	uxth	r2, r2
 8004616:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f872 	bl	8004702 <RTC_ExitInitMode>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	81fb      	strh	r3, [r7, #14]
 800463e:	2300      	movs	r3, #0
 8004640:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	89bb      	ldrh	r3, [r7, #12]
 8004658:	4313      	orrs	r3, r2
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f81d 	bl	80046b2 <RTC_EnterInitMode>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e011      	b.n	80046a8 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	0c12      	lsrs	r2, r2, #16
 800468c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	b292      	uxth	r2, r2
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f832 	bl	8004702 <RTC_ExitInitMode>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80046be:	f7fe fb7f 	bl	8002dc0 <HAL_GetTick>
 80046c2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80046c4:	e009      	b.n	80046da <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046c6:	f7fe fb7b 	bl	8002dc0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d901      	bls.n	80046da <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ee      	beq.n	80046c6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0210 	orr.w	r2, r2, #16
 80046f6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0210 	bic.w	r2, r2, #16
 800471c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800471e:	f7fe fb4f 	bl	8002dc0 <HAL_GetTick>
 8004722:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004724:	e009      	b.n	800473a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004726:	f7fe fb4b 	bl	8002dc0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004734:	d901      	bls.n	800473a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e007      	b.n	800474a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ee      	beq.n	8004726 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004760:	e005      	b.n	800476e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	3b0a      	subs	r3, #10
 800476c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b09      	cmp	r3, #9
 8004772:	d8f6      	bhi.n	8004762 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	b2da      	uxtb	r2, r3
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	4313      	orrs	r3, r2
 8004780:	b2db      	uxtb	r3, r3
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	b2db      	uxtb	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7bdb      	ldrb	r3, [r3, #15]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7b5b      	ldrb	r3, [r3, #13]
 80047ea:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7b9b      	ldrb	r3, [r3, #14]
 80047f0:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	e06f      	b.n	80048d8 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d011      	beq.n	8004822 <RTC_DateUpdate+0x5c>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d00e      	beq.n	8004822 <RTC_DateUpdate+0x5c>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d00b      	beq.n	8004822 <RTC_DateUpdate+0x5c>
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b07      	cmp	r3, #7
 800480e:	d008      	beq.n	8004822 <RTC_DateUpdate+0x5c>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d005      	beq.n	8004822 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b0a      	cmp	r3, #10
 800481a:	d002      	beq.n	8004822 <RTC_DateUpdate+0x5c>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d117      	bne.n	8004852 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b1e      	cmp	r3, #30
 8004826:	d803      	bhi.n	8004830 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800482e:	e050      	b.n	80048d2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	d005      	beq.n	8004842 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800483c:	2301      	movs	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004840:	e047      	b.n	80048d2 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004846:	2301      	movs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
          year++;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3301      	adds	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004850:	e03f      	b.n	80048d2 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d008      	beq.n	800486a <RTC_DateUpdate+0xa4>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d005      	beq.n	800486a <RTC_DateUpdate+0xa4>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b09      	cmp	r3, #9
 8004862:	d002      	beq.n	800486a <RTC_DateUpdate+0xa4>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b0b      	cmp	r3, #11
 8004868:	d10c      	bne.n	8004884 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b1d      	cmp	r3, #29
 800486e:	d803      	bhi.n	8004878 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004876:	e02c      	b.n	80048d2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800487e:	2301      	movs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004882:	e026      	b.n	80048d2 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d123      	bne.n	80048d2 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b1b      	cmp	r3, #27
 800488e:	d803      	bhi.n	8004898 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e01c      	b.n	80048d2 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b1c      	cmp	r3, #28
 800489c:	d111      	bne.n	80048c2 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f838 	bl	8004918 <RTC_IsLeapYear>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <RTC_DateUpdate+0xf0>
        {
          day++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e00d      	b.n	80048d2 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
          day = 1U;
 80048bc:	2301      	movs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e007      	b.n	80048d2 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b1d      	cmp	r3, #29
 80048c6:	d104      	bne.n	80048d2 <RTC_DateUpdate+0x10c>
      {
        month++;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	3301      	adds	r3, #1
 80048cc:	613b      	str	r3, [r7, #16]
        day = 1U;
 80048ce:	2301      	movs	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d38b      	bcc.n	80047f8 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	4619      	mov	r1, r3
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f000 f83a 	bl	800497c <RTC_WeekDayNum>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	731a      	strb	r2, [r3, #12]
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	e01d      	b.n	800496e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <RTC_IsLeapYear+0x60>)
 8004936:	fba2 1203 	umull	r1, r2, r2, r3
 800493a:	0952      	lsrs	r2, r2, #5
 800493c:	2164      	movs	r1, #100	; 0x64
 800493e:	fb01 f202 	mul.w	r2, r1, r2
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800494a:	2301      	movs	r3, #1
 800494c:	e00f      	b.n	800496e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	4a09      	ldr	r2, [pc, #36]	; (8004978 <RTC_IsLeapYear+0x60>)
 8004952:	fba2 1203 	umull	r1, r2, r2, r3
 8004956:	09d2      	lsrs	r2, r2, #7
 8004958:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800495c:	fb01 f202 	mul.w	r2, r1, r2
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800496c:	2300      	movs	r3, #0
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
 8004988:	4613      	mov	r3, r2
 800498a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800499a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d82d      	bhi.n	80049fe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	4613      	mov	r3, r2
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <RTC_WeekDayNum+0xe4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	085a      	lsrs	r2, r3, #1
 80049b6:	78bb      	ldrb	r3, [r7, #2]
 80049b8:	441a      	add	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	441a      	add	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	4926      	ldr	r1, [pc, #152]	; (8004a64 <RTC_WeekDayNum+0xe8>)
 80049cc:	fba1 1303 	umull	r1, r3, r1, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4922      	ldr	r1, [pc, #136]	; (8004a64 <RTC_WeekDayNum+0xe8>)
 80049da:	fba1 1303 	umull	r1, r3, r1, r3
 80049de:	09db      	lsrs	r3, r3, #7
 80049e0:	4413      	add	r3, r2
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <RTC_WeekDayNum+0xec>)
 80049e6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ea:	1ad1      	subs	r1, r2, r3
 80049ec:	0849      	lsrs	r1, r1, #1
 80049ee:	440b      	add	r3, r1
 80049f0:	0899      	lsrs	r1, r3, #2
 80049f2:	460b      	mov	r3, r1
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e029      	b.n	8004a52 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <RTC_WeekDayNum+0xe4>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	085a      	lsrs	r2, r3, #1
 8004a12:	78bb      	ldrb	r3, [r7, #2]
 8004a14:	441a      	add	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	441a      	add	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4910      	ldr	r1, [pc, #64]	; (8004a64 <RTC_WeekDayNum+0xe8>)
 8004a24:	fba1 1303 	umull	r1, r3, r1, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	490d      	ldr	r1, [pc, #52]	; (8004a64 <RTC_WeekDayNum+0xe8>)
 8004a30:	fba1 1303 	umull	r1, r3, r1, r3
 8004a34:	09db      	lsrs	r3, r3, #7
 8004a36:	4413      	add	r3, r2
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <RTC_WeekDayNum+0xec>)
 8004a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a40:	1ad1      	subs	r1, r2, r3
 8004a42:	0849      	lsrs	r1, r1, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	0899      	lsrs	r1, r3, #2
 8004a48:	460b      	mov	r3, r1
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	1a5b      	subs	r3, r3, r1
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	b2db      	uxtb	r3, r3
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	38e38e39 	.word	0x38e38e39
 8004a64:	51eb851f 	.word	0x51eb851f
 8004a68:	24924925 	.word	0x24924925

08004a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e076      	b.n	8004b6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8e:	d009      	beq.n	8004aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
 8004a96:	e005      	b.n	8004aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd ff14 	bl	80028ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	0c1a      	lsrs	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f002 0204 	and.w	r2, r2, #4
 8004b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_SPI_Transmit+0x22>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e12d      	b.n	8004df2 <HAL_SPI_Transmit+0x27e>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9e:	f7fe f90f 	bl	8002dc0 <HAL_GetTick>
 8004ba2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bb8:	e116      	b.n	8004de8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Transmit+0x52>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bca:	e10d      	b.n	8004de8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c12:	d10f      	bne.n	8004c34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d007      	beq.n	8004c52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5a:	d14f      	bne.n	8004cfc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Transmit+0xf6>
 8004c64:	8afb      	ldrh	r3, [r7, #22]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d142      	bne.n	8004cf0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	881a      	ldrh	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c8e:	e02f      	b.n	8004cf0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d112      	bne.n	8004cc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cc2:	e015      	b.n	8004cf0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc4:	f7fe f87c 	bl	8002dc0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d803      	bhi.n	8004cdc <HAL_SPI_Transmit+0x168>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Transmit+0x16e>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cee:	e07b      	b.n	8004de8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ca      	bne.n	8004c90 <HAL_SPI_Transmit+0x11c>
 8004cfa:	e050      	b.n	8004d9e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_SPI_Transmit+0x196>
 8004d04:	8afb      	ldrh	r3, [r7, #22]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d144      	bne.n	8004d94 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d30:	e030      	b.n	8004d94 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d113      	bne.n	8004d68 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d66:	e015      	b.n	8004d94 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d68:	f7fe f82a 	bl	8002dc0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d803      	bhi.n	8004d80 <HAL_SPI_Transmit+0x20c>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_Transmit+0x212>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d92:	e029      	b.n	8004de8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1c9      	bne.n	8004d32 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fbcc 	bl	8005540 <SPI_EndRxTxTransaction>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e003      	b.n	8004de8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b088      	sub	sp, #32
 8004dfe:	af02      	add	r7, sp, #8
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e1e:	e0fb      	b.n	8005018 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e28:	d112      	bne.n	8004e50 <HAL_SPI_Receive+0x56>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10e      	bne.n	8004e50 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2204      	movs	r2, #4
 8004e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f8ef 	bl	800502a <HAL_SPI_TransmitReceive>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	e0e8      	b.n	8005022 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Receive+0x64>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0e1      	b.n	8005022 <HAL_SPI_Receive+0x228>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd ffab 	bl	8002dc0 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Receive+0x7e>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e7c:	e0cc      	b.n	8005018 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2204      	movs	r2, #4
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d007      	beq.n	8004f04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d16a      	bne.n	8004fe2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f0c:	e032      	b.n	8004f74 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d115      	bne.n	8004f48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 020c 	add.w	r2, r3, #12
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f46:	e015      	b.n	8004f74 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f48:	f7fd ff3a 	bl	8002dc0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d803      	bhi.n	8004f60 <HAL_SPI_Receive+0x166>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5e:	d102      	bne.n	8004f66 <HAL_SPI_Receive+0x16c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f72:	e051      	b.n	8005018 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1c7      	bne.n	8004f0e <HAL_SPI_Receive+0x114>
 8004f7e:	e035      	b.n	8004fec <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d113      	bne.n	8004fb6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb4:	e015      	b.n	8004fe2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb6:	f7fd ff03 	bl	8002dc0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d803      	bhi.n	8004fce <HAL_SPI_Receive+0x1d4>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fcc:	d102      	bne.n	8004fd4 <HAL_SPI_Receive+0x1da>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004fe0:	e01a      	b.n	8005018 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1c9      	bne.n	8004f80 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fa53 	bl	800549c <SPI_EndRxTransaction>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
 800500e:	e003      	b.n	8005018 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08c      	sub	sp, #48	; 0x30
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005038:	2301      	movs	r3, #1
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x26>
 800504c:	2302      	movs	r3, #2
 800504e:	e198      	b.n	8005382 <HAL_SPI_TransmitReceive+0x358>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005058:	f7fd feb2 	bl	8002dc0 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00f      	beq.n	800509a <HAL_SPI_TransmitReceive+0x70>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005080:	d107      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x68>
 800508a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800508e:	2b04      	cmp	r3, #4
 8005090:	d003      	beq.n	800509a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005092:	2302      	movs	r3, #2
 8005094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005098:	e16d      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x82>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x82>
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050b2:	e160      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d003      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2205      	movs	r2, #5
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	887a      	ldrh	r2, [r7, #2]
 80050d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	887a      	ldrh	r2, [r7, #2]
 80050de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	887a      	ldrh	r2, [r7, #2]
 80050ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d007      	beq.n	800511c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d17c      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x10a>
 800512e:	8b7b      	ldrh	r3, [r7, #26]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d16a      	bne.n	800520a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005158:	e057      	b.n	800520a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d11b      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x176>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x176>
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d113      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d119      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x1b8>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d014      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	b292      	uxth	r2, r2
 80051c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051e2:	f7fd fded 	bl	8002dc0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d80b      	bhi.n	800520a <HAL_SPI_TransmitReceive+0x1e0>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d007      	beq.n	800520a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005208:	e0b5      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1a2      	bne.n	800515a <HAL_SPI_TransmitReceive+0x130>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d19d      	bne.n	800515a <HAL_SPI_TransmitReceive+0x130>
 800521e:	e080      	b.n	8005322 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_SPI_TransmitReceive+0x204>
 8005228:	8b7b      	ldrh	r3, [r7, #26]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d16f      	bne.n	800530e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005254:	e05b      	b.n	800530e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11c      	bne.n	800529e <HAL_SPI_TransmitReceive+0x274>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <HAL_SPI_TransmitReceive+0x274>
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d114      	bne.n	800529e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d119      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x2b6>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d014      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052dc:	2301      	movs	r3, #1
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052e0:	f7fd fd6e 	bl	8002dc0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d803      	bhi.n	80052f8 <HAL_SPI_TransmitReceive+0x2ce>
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x2d4>
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d107      	bne.n	800530e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800530c:	e033      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d19e      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x22c>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d199      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f90a 	bl	8005540 <SPI_EndRxTxTransaction>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800533e:	e01a      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536c:	e003      	b.n	8005376 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800537e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005382:	4618      	mov	r0, r3
 8005384:	3730      	adds	r7, #48	; 0x30
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800539c:	f7fd fd10 	bl	8002dc0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053ac:	f7fd fd08 	bl	8002dc0 <HAL_GetTick>
 80053b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	0d1b      	lsrs	r3, r3, #20
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c2:	e054      	b.n	800546e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ca:	d050      	beq.n	800546e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053cc:	f7fd fcf8 	bl	8002dc0 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d902      	bls.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fa:	d111      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005404:	d004      	beq.n	8005410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d107      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d10f      	bne.n	800544a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e017      	b.n	800548e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3b01      	subs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	429a      	cmp	r2, r3
 800548a:	d19b      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000004 	.word	0x20000004

0800549c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b0:	d111      	bne.n	80054d6 <SPI_EndRxTransaction+0x3a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ba:	d004      	beq.n	80054c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d107      	bne.n	80054d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d117      	bne.n	8005510 <SPI_EndRxTransaction+0x74>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d112      	bne.n	8005510 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2101      	movs	r1, #1
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff ff49 	bl	800538c <SPI_WaitFlagStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01a      	beq.n	8005536 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e013      	b.n	8005538 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff ff36 	bl	800538c <SPI_WaitFlagStateUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e000      	b.n	8005538 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff ff18 	bl	800538c <SPI_WaitFlagStateUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e000      	b.n	8005574 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e041      	b.n	8005612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fd fa28 	bl	80029f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f000 f940 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d001      	beq.n	8005634 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIM_Base_Start+0x88>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_TIM_Base_Start+0x48>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d009      	beq.n	8005664 <HAL_TIM_Base_Start+0x48>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIM_Base_Start+0x8c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_Base_Start+0x48>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <HAL_TIM_Base_Start+0x90>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d111      	bne.n	8005688 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d010      	beq.n	8005698 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	e007      	b.n	8005698 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800

080056b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_ConfigClockSource+0x1c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0b4      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x186>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xd4>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8086 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x172>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xa6>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x11a>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xfa>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x13a>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	f000 f944 	bl	80059f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04f      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	f000 f92d 	bl	80059f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 f8a4 	bl	8005904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f8fb 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 f8c2 	bl	8005960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f8eb 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 f884 	bl	8005904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f8db 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 8005808:	e00c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 f8d2 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 800581a:	e003      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e000      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a26      	ldr	r2, [pc, #152]	; (80058fc <TIM_Base_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <TIM_Base_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <TIM_Base_SetConfig+0xbc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <TIM_Base_SetConfig+0xc0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800

08005904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f023 0201 	bic.w	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800592e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 030a 	bic.w	r3, r3, #10
 8005940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0210 	bic.w	r2, r3, #16
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800598a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	031b      	lsls	r3, r3, #12
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800599c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f043 0307 	orr.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	609a      	str	r2, [r3, #8]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e046      	b.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d009      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800

08005aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e042      	b.n	8005b84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc ffa0 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f91d 	bl	8005d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d16d      	bne.n	8005c88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Transmit+0x2c>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e066      	b.n	8005c8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2221      	movs	r2, #33	; 0x21
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fd f8f9 	bl	8002dc0 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be4:	d108      	bne.n	8005bf8 <HAL_UART_Transmit+0x6c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e003      	b.n	8005c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c00:	e02a      	b.n	8005c58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2180      	movs	r1, #128	; 0x80
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f840 	bl	8005c92 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e036      	b.n	8005c8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	3302      	adds	r3, #2
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e007      	b.n	8005c4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1cf      	bne.n	8005c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2140      	movs	r1, #64	; 0x40
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f810 	bl	8005c92 <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e006      	b.n	8005c8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b090      	sub	sp, #64	; 0x40
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca2:	e050      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005caa:	d04c      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb2:	f7fd f885 	bl	8002dc0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d241      	bcs.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ce2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	613b      	str	r3, [r7, #16]
   return(result);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d16:	623a      	str	r2, [r7, #32]
 8005d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	69f9      	ldr	r1, [r7, #28]
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d09f      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3740      	adds	r7, #64	; 0x40
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005daa:	f023 030c 	bic.w	r3, r3, #12
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	430b      	orrs	r3, r1
 8005db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <UART_SetConfig+0x114>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d103      	bne.n	8005de0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fd febe 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	e002      	b.n	8005de6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7fd fea6 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8005de4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009a      	lsls	r2, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <UART_SetConfig+0x118>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	0119      	lsls	r1, r3, #4
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009a      	lsls	r2, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <UART_SetConfig+0x118>)
 8005e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	2064      	movs	r0, #100	; 0x64
 8005e26:	fb00 f303 	mul.w	r3, r0, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	3332      	adds	r3, #50	; 0x32
 8005e30:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <UART_SetConfig+0x118>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e3c:	4419      	add	r1, r3
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009a      	lsls	r2, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <UART_SetConfig+0x118>)
 8005e56:	fba3 0302 	umull	r0, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	2064      	movs	r0, #100	; 0x64
 8005e5e:	fb00 f303 	mul.w	r3, r0, r3
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	3332      	adds	r3, #50	; 0x32
 8005e68:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <UART_SetConfig+0x118>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	440a      	add	r2, r1
 8005e7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40013800 	.word	0x40013800
 8005e88:	51eb851f 	.word	0x51eb851f

08005e8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <MX_FATFS_Init+0x18>)
 8005e92:	4805      	ldr	r0, [pc, #20]	; (8005ea8 <MX_FATFS_Init+0x1c>)
 8005e94:	f003 ff16 	bl	8009cc4 <FATFS_LinkDriver>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4b03      	ldr	r3, [pc, #12]	; (8005eac <MX_FATFS_Init+0x20>)
 8005e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20002878 	.word	0x20002878
 8005ea8:	20000010 	.word	0x20000010
 8005eac:	20002874 	.word	0x20002874

08005eb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005eb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fb fa98 	bl	8001400 <SD_disk_initialize>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fb fb6f 	bl	80015cc <SD_disk_status>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005f0a:	7bf8      	ldrb	r0, [r7, #15]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	f7fb fb6f 	bl	80015f4 <SD_disk_read>
 8005f16:	4603      	mov	r3, r0
 8005f18:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005f32:	7bf8      	ldrb	r0, [r7, #15]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	f7fb fbc5 	bl	80016c8 <SD_disk_write>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	603a      	str	r2, [r7, #0]
 8005f54:	71fb      	strb	r3, [r7, #7]
 8005f56:	460b      	mov	r3, r1
 8005f58:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	79b9      	ldrb	r1, [r7, #6]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb fc35 	bl	80017d0 <SD_disk_ioctl>
 8005f66:	4603      	mov	r3, r0
 8005f68:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <disk_status+0x30>)
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	79fa      	ldrb	r2, [r7, #7]
 8005f8c:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <disk_status+0x30>)
 8005f8e:	440a      	add	r2, r1
 8005f90:	7a12      	ldrb	r2, [r2, #8]
 8005f92:	4610      	mov	r0, r2
 8005f94:	4798      	blx	r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20002a9c 	.word	0x20002a9c

08005fa8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ff0 <disk_initialize+0x48>)
 8005fba:	5cd3      	ldrb	r3, [r2, r3]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d111      	bne.n	8005fe4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <disk_initialize+0x48>)
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <disk_initialize+0x48>)
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	79fa      	ldrb	r2, [r7, #7]
 8005fd6:	4906      	ldr	r1, [pc, #24]	; (8005ff0 <disk_initialize+0x48>)
 8005fd8:	440a      	add	r2, r1
 8005fda:	7a12      	ldrb	r2, [r2, #8]
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20002a9c 	.word	0x20002a9c

08005ff4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <disk_read+0x3c>)
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	689c      	ldr	r4, [r3, #8]
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <disk_read+0x3c>)
 8006014:	4413      	add	r3, r2
 8006016:	7a18      	ldrb	r0, [r3, #8]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	47a0      	blx	r4
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]
  return res;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}
 800602e:	bf00      	nop
 8006030:	20002a9c 	.word	0x20002a9c

08006034 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <disk_write+0x3c>)
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68dc      	ldr	r4, [r3, #12]
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4a07      	ldr	r2, [pc, #28]	; (8006070 <disk_write+0x3c>)
 8006054:	4413      	add	r3, r2
 8006056:	7a18      	ldrb	r0, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	47a0      	blx	r4
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]
  return res;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
}
 8006066:	4618      	mov	r0, r3
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
 800606e:	bf00      	nop
 8006070:	20002a9c 	.word	0x20002a9c

08006074 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	603a      	str	r2, [r7, #0]
 800607e:	71fb      	strb	r3, [r7, #7]
 8006080:	460b      	mov	r3, r1
 8006082:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <disk_ioctl+0x38>)
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	79fa      	ldrb	r2, [r7, #7]
 8006092:	4906      	ldr	r1, [pc, #24]	; (80060ac <disk_ioctl+0x38>)
 8006094:	440a      	add	r2, r1
 8006096:	7a10      	ldrb	r0, [r2, #8]
 8006098:	79b9      	ldrb	r1, [r7, #6]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4798      	blx	r3
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20002a9c 	.word	0x20002a9c

080060b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80060c4:	e007      	b.n	80060d6 <mem_cpy+0x26>
		*d++ = *s++;
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	1c53      	adds	r3, r2, #1
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	6179      	str	r1, [r7, #20]
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f2      	bne.n	80060c6 <mem_cpy+0x16>
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80060fc:	e005      	b.n	800610a <mem_set+0x1e>
		*d++ = (BYTE)val;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	617a      	str	r2, [r7, #20]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	1e5a      	subs	r2, r3, #1
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f4      	bne.n	80060fe <mem_set+0x12>
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	; 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006138:	bf00      	nop
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	1e5a      	subs	r2, r3, #1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <mem_cmp+0x40>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	4619      	mov	r1, r3
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	61ba      	str	r2, [r7, #24]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	1acb      	subs	r3, r1, r3
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ec      	beq.n	800613a <mem_cmp+0x1a>
	return r;
 8006160:	697b      	ldr	r3, [r7, #20]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006176:	e002      	b.n	800617e <chk_chr+0x12>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3301      	adds	r3, #1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <chk_chr+0x26>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	4293      	cmp	r3, r2
 8006190:	d1f2      	bne.n	8006178 <chk_chr+0xc>
	return *str;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	781b      	ldrb	r3, [r3, #0]
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	e03b      	b.n	800622c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80061b4:	4931      	ldr	r1, [pc, #196]	; (800627c <chk_lock+0xdc>)
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d02c      	beq.n	8006222 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80061c8:	492c      	ldr	r1, [pc, #176]	; (800627c <chk_lock+0xdc>)
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4613      	mov	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d120      	bne.n	8006226 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80061e4:	4925      	ldr	r1, [pc, #148]	; (800627c <chk_lock+0xdc>)
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	3304      	adds	r3, #4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fc:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80061fe:	429a      	cmp	r2, r3
 8006200:	d111      	bne.n	8006226 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006202:	491e      	ldr	r1, [pc, #120]	; (800627c <chk_lock+0xdc>)
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	3308      	adds	r3, #8
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800621c:	429a      	cmp	r2, r3
 800621e:	d102      	bne.n	8006226 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006220:	e007      	b.n	8006232 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006222:	2301      	movs	r3, #1
 8006224:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d9c0      	bls.n	80061b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d109      	bne.n	800624c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <chk_lock+0xa4>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d101      	bne.n	8006248 <chk_lock+0xa8>
 8006244:	2300      	movs	r3, #0
 8006246:	e013      	b.n	8006270 <chk_lock+0xd0>
 8006248:	2312      	movs	r3, #18
 800624a:	e011      	b.n	8006270 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <chk_lock+0xca>
 8006252:	490a      	ldr	r1, [pc, #40]	; (800627c <chk_lock+0xdc>)
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	330a      	adds	r3, #10
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d101      	bne.n	800626e <chk_lock+0xce>
 800626a:	2310      	movs	r3, #16
 800626c:	e000      	b.n	8006270 <chk_lock+0xd0>
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20002884 	.word	0x20002884

08006280 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	e002      	b.n	8006292 <enq_lock+0x12>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3301      	adds	r3, #1
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d809      	bhi.n	80062ac <enq_lock+0x2c>
 8006298:	490a      	ldr	r1, [pc, #40]	; (80062c4 <enq_lock+0x44>)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1ef      	bne.n	800628c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20002884 	.word	0x20002884

080062c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e02e      	b.n	8006336 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80062d8:	4958      	ldr	r1, [pc, #352]	; (800643c <inc_lock+0x174>)
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4613      	mov	r3, r2
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d11d      	bne.n	8006330 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80062f4:	4951      	ldr	r1, [pc, #324]	; (800643c <inc_lock+0x174>)
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3304      	adds	r3, #4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800630e:	429a      	cmp	r2, r3
 8006310:	d10e      	bne.n	8006330 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006312:	494a      	ldr	r1, [pc, #296]	; (800643c <inc_lock+0x174>)
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	3308      	adds	r3, #8
 8006322:	881a      	ldrh	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800632c:	429a      	cmp	r2, r3
 800632e:	d006      	beq.n	800633e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d9cd      	bls.n	80062d8 <inc_lock+0x10>
 800633c:	e000      	b.n	8006340 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800633e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d148      	bne.n	80063d8 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e002      	b.n	8006352 <inc_lock+0x8a>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d809      	bhi.n	800636c <inc_lock+0xa4>
 8006358:	4938      	ldr	r1, [pc, #224]	; (800643c <inc_lock+0x174>)
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4613      	mov	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ef      	bne.n	800634c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d101      	bne.n	8006376 <inc_lock+0xae>
 8006372:	2300      	movs	r3, #0
 8006374:	e05d      	b.n	8006432 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	482f      	ldr	r0, [pc, #188]	; (800643c <inc_lock+0x174>)
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4403      	add	r3, r0
 800638c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	4829      	ldr	r0, [pc, #164]	; (800643c <inc_lock+0x174>)
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4403      	add	r3, r0
 80063a4:	3304      	adds	r3, #4
 80063a6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ae:	88d8      	ldrh	r0, [r3, #6]
 80063b0:	4922      	ldr	r1, [pc, #136]	; (800643c <inc_lock+0x174>)
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	3308      	adds	r3, #8
 80063c0:	4602      	mov	r2, r0
 80063c2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80063c4:	491d      	ldr	r1, [pc, #116]	; (800643c <inc_lock+0x174>)
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	330a      	adds	r3, #10
 80063d4:	2200      	movs	r2, #0
 80063d6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <inc_lock+0x130>
 80063de:	4917      	ldr	r1, [pc, #92]	; (800643c <inc_lock+0x174>)
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4613      	mov	r3, r2
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	330a      	adds	r3, #10
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <inc_lock+0x130>
 80063f4:	2300      	movs	r3, #0
 80063f6:	e01c      	b.n	8006432 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <inc_lock+0x14e>
 80063fe:	490f      	ldr	r1, [pc, #60]	; (800643c <inc_lock+0x174>)
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4613      	mov	r3, r2
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	330a      	adds	r3, #10
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	b299      	uxth	r1, r3
 8006414:	e001      	b.n	800641a <inc_lock+0x152>
 8006416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800641a:	4808      	ldr	r0, [pc, #32]	; (800643c <inc_lock+0x174>)
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4613      	mov	r3, r2
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4403      	add	r3, r0
 8006428:	330a      	adds	r3, #10
 800642a:	460a      	mov	r2, r1
 800642c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	20002884 	.word	0x20002884

08006440 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3b01      	subs	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d82e      	bhi.n	80064b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8006454:	491b      	ldr	r1, [pc, #108]	; (80064c4 <dec_lock+0x84>)
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	330a      	adds	r3, #10
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006468:	89fb      	ldrh	r3, [r7, #14]
 800646a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646e:	d101      	bne.n	8006474 <dec_lock+0x34>
 8006470:	2300      	movs	r3, #0
 8006472:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006474:	89fb      	ldrh	r3, [r7, #14]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <dec_lock+0x40>
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	3b01      	subs	r3, #1
 800647e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006480:	4910      	ldr	r1, [pc, #64]	; (80064c4 <dec_lock+0x84>)
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	330a      	adds	r3, #10
 8006490:	89fa      	ldrh	r2, [r7, #14]
 8006492:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006494:	89fb      	ldrh	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <dec_lock+0x6c>
 800649a:	490a      	ldr	r1, [pc, #40]	; (80064c4 <dec_lock+0x84>)
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	737b      	strb	r3, [r7, #13]
 80064b0:	e001      	b.n	80064b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80064b2:	2302      	movs	r3, #2
 80064b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20002884 	.word	0x20002884

080064c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e016      	b.n	8006504 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80064d6:	4910      	ldr	r1, [pc, #64]	; (8006518 <clear_lock+0x50>)
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d108      	bne.n	80064fe <clear_lock+0x36>
 80064ec:	490a      	ldr	r1, [pc, #40]	; (8006518 <clear_lock+0x50>)
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d9e5      	bls.n	80064d6 <clear_lock+0xe>
	}
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	20002884 	.word	0x20002884

0800651c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d040      	beq.n	80065b6 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006544:	7858      	ldrb	r0, [r3, #1]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	2301      	movs	r3, #1
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	f7ff fd72 	bl	8006034 <disk_write>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <sync_window+0x40>
			res = FR_DISK_ERR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e02c      	b.n	80065b6 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006562:	2200      	movs	r2, #0
 8006564:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	d21b      	bcs.n	80065b6 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006584:	78db      	ldrb	r3, [r3, #3]
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	e012      	b.n	80065b0 <sync_window+0x94>
					wsect += fs->fsize;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	7858      	ldrb	r0, [r3, #1]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	2301      	movs	r3, #1
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	f7ff fd45 	bl	8006034 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d8e9      	bhi.n	800658a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d01e      	beq.n	800661a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff9d 	bl	800651c <sync_window>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f2:	7858      	ldrb	r0, [r3, #1]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	2301      	movs	r3, #1
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	f7ff fcfb 	bl	8005ff4 <disk_read>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006608:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006614:	461a      	mov	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff75 	bl	800651c <sync_window>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 80ad 	bne.w	8006798 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b03      	cmp	r3, #3
 8006648:	f040 8098 	bne.w	800677c <sync_fs+0x158>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006652:	795b      	ldrb	r3, [r3, #5]
 8006654:	2b01      	cmp	r3, #1
 8006656:	f040 8091 	bne.w	800677c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006662:	895b      	ldrh	r3, [r3, #10]
 8006664:	461a      	mov	r2, r3
 8006666:	2100      	movs	r1, #0
 8006668:	f7ff fd40 	bl	80060ec <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2255      	movs	r2, #85	; 0x55
 8006670:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	22aa      	movs	r2, #170	; 0xaa
 8006678:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2252      	movs	r2, #82	; 0x52
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2252      	movs	r2, #82	; 0x52
 8006686:	705a      	strb	r2, [r3, #1]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2261      	movs	r2, #97	; 0x61
 800668c:	709a      	strb	r2, [r3, #2]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2241      	movs	r2, #65	; 0x41
 8006692:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2272      	movs	r2, #114	; 0x72
 8006698:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2272      	movs	r2, #114	; 0x72
 80066a0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2241      	movs	r2, #65	; 0x41
 80066a8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2261      	movs	r2, #97	; 0x61
 80066b0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	b29b      	uxth	r3, r3
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	b29b      	uxth	r3, r3
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	b2da      	uxtb	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	3301      	adds	r3, #1
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006758:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006760:	7858      	ldrb	r0, [r3, #1]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	2301      	movs	r3, #1
 800676e:	f7ff fc61 	bl	8006034 <disk_write>
			fs->fsi_flag = 0;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006778:	2200      	movs	r2, #0
 800677a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fc73 	bl	8006074 <disk_ioctl>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	3b02      	subs	r3, #2
 80067b0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	3b02      	subs	r3, #2
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d301      	bcc.n	80067c6 <clust2sect+0x24>
 80067c2:	2300      	movs	r3, #0
 80067c4:	e00c      	b.n	80067e0 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	461a      	mov	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	fb03 f202 	mul.w	r2, r3, r2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	4413      	add	r3, r2
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b086      	sub	sp, #24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d906      	bls.n	8006808 <get_fat+0x1e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <get_fat+0x24>
		val = 1;	/* Internal error */
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e0e4      	b.n	80069d8 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800680e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006812:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b03      	cmp	r3, #3
 800681e:	f000 8098 	beq.w	8006952 <get_fat+0x168>
 8006822:	2b03      	cmp	r3, #3
 8006824:	f300 80ce 	bgt.w	80069c4 <get_fat+0x1da>
 8006828:	2b01      	cmp	r3, #1
 800682a:	d002      	beq.n	8006832 <get_fat+0x48>
 800682c:	2b02      	cmp	r3, #2
 800682e:	d05f      	beq.n	80068f0 <get_fat+0x106>
 8006830:	e0c8      	b.n	80069c4 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684e:	895b      	ldrh	r3, [r3, #10]
 8006850:	4619      	mov	r1, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	fbb3 f3f1 	udiv	r3, r3, r1
 8006858:	4413      	add	r3, r2
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff feaf 	bl	80065c0 <move_window>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 80b0 	bne.w	80069ca <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	60fa      	str	r2, [r7, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006876:	8952      	ldrh	r2, [r2, #10]
 8006878:	fbb3 f1f2 	udiv	r1, r3, r2
 800687c:	fb01 f202 	mul.w	r2, r1, r2
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	6a1a      	ldr	r2, [r3, #32]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	895b      	ldrh	r3, [r3, #10]
 8006898:	4619      	mov	r1, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	fbb3 f3f1 	udiv	r3, r3, r1
 80068a0:	4413      	add	r3, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fe8b 	bl	80065c0 <move_window>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 808e 	bne.w	80069ce <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b8:	895b      	ldrh	r3, [r3, #10]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	fbb3 f1f2 	udiv	r1, r3, r2
 80068c2:	fb01 f202 	mul.w	r2, r1, r2
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	5cd3      	ldrb	r3, [r2, r3]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <get_fat+0xfc>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	e002      	b.n	80068ec <get_fat+0x102>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ec:	617b      	str	r3, [r7, #20]
			break;
 80068ee:	e073      	b.n	80069d8 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	895b      	ldrh	r3, [r3, #10]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	b29b      	uxth	r3, r3
 8006904:	4619      	mov	r1, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	fbb3 f3f1 	udiv	r3, r3, r1
 800690c:	4413      	add	r3, r2
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff fe55 	bl	80065c0 <move_window>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d15a      	bne.n	80069d2 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006926:	8952      	ldrh	r2, [r2, #10]
 8006928:	fbb3 f1f2 	udiv	r1, r3, r2
 800692c:	fb01 f202 	mul.w	r2, r1, r2
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	3301      	adds	r3, #1
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	b21a      	sxth	r2, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b21b      	sxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b21b      	sxth	r3, r3
 800694c:	b29b      	uxth	r3, r3
 800694e:	617b      	str	r3, [r7, #20]
			break;
 8006950:	e042      	b.n	80069d8 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006958:	6a1a      	ldr	r2, [r3, #32]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006960:	895b      	ldrh	r3, [r3, #10]
 8006962:	089b      	lsrs	r3, r3, #2
 8006964:	b29b      	uxth	r3, r3
 8006966:	4619      	mov	r1, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	fbb3 f3f1 	udiv	r3, r3, r1
 800696e:	4413      	add	r3, r2
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fe24 	bl	80065c0 <move_window>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d12b      	bne.n	80069d6 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006988:	8952      	ldrh	r2, [r2, #10]
 800698a:	fbb3 f1f2 	udiv	r1, r3, r2
 800698e:	fb01 f202 	mul.w	r2, r1, r2
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4413      	add	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3303      	adds	r3, #3
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	061a      	lsls	r2, r3, #24
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3302      	adds	r3, #2
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	4313      	orrs	r3, r2
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	3201      	adds	r2, #1
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	0212      	lsls	r2, r2, #8
 80069b4:	4313      	orrs	r3, r2
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069c0:	617b      	str	r3, [r7, #20]
			break;
 80069c2:	e009      	b.n	80069d8 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80069c4:	2301      	movs	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e006      	b.n	80069d8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ca:	bf00      	nop
 80069cc:	e004      	b.n	80069d8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ce:	bf00      	nop
 80069d0:	e002      	b.n	80069d8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069d6:	bf00      	nop
		}
	}

	return val;
 80069d8:	697b      	ldr	r3, [r7, #20]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b088      	sub	sp, #32
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d906      	bls.n	8006a02 <put_fat+0x20>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <put_fat+0x26>
		res = FR_INT_ERR;
 8006a02:	2302      	movs	r3, #2
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e13a      	b.n	8006c7e <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	f000 80d0 	beq.w	8006bb6 <put_fat+0x1d4>
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	f300 8127 	bgt.w	8006c6a <put_fat+0x288>
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d003      	beq.n	8006a28 <put_fat+0x46>
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f000 808f 	beq.w	8006b44 <put_fat+0x162>
 8006a26:	e120      	b.n	8006c6a <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4413      	add	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	895b      	ldrh	r3, [r3, #10]
 8006a46:	4619      	mov	r1, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a4e:	4413      	add	r3, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff fdb4 	bl	80065c0 <move_window>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a5c:	7ffb      	ldrb	r3, [r7, #31]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 8106 	bne.w	8006c70 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	617a      	str	r2, [r7, #20]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a70:	8952      	ldrh	r2, [r2, #10]
 8006a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a76:	fb01 f202 	mul.w	r2, r1, r2
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00d      	beq.n	8006aa8 <put_fat+0xc6>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	b25a      	sxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	b25b      	sxtb	r3, r3
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b25b      	sxtb	r3, r3
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e001      	b.n	8006aac <put_fat+0xca>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac0:	6a1a      	ldr	r2, [r3, #32]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac8:	895b      	ldrh	r3, [r3, #10]
 8006aca:	4619      	mov	r1, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fd72 	bl	80065c0 <move_window>
 8006adc:	4603      	mov	r3, r0
 8006ade:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 80c6 	bne.w	8006c74 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aee:	895b      	ldrh	r3, [r3, #10]
 8006af0:	461a      	mov	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af8:	fb01 f202 	mul.w	r2, r1, r2
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <put_fat+0x134>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	e00e      	b.n	8006b34 <put_fat+0x152>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f023 030f 	bic.w	r3, r3, #15
 8006b20:	b25a      	sxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	b25b      	sxtb	r3, r3
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3e:	2201      	movs	r2, #1
 8006b40:	711a      	strb	r2, [r3, #4]
			break;
 8006b42:	e09c      	b.n	8006c7e <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	895b      	ldrh	r3, [r3, #10]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b60:	4413      	add	r3, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fd2b 	bl	80065c0 <move_window>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 8081 	bne.w	8006c78 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b80:	8952      	ldrh	r2, [r2, #10]
 8006b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b86:	fb01 f202 	mul.w	r2, r1, r2
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	711a      	strb	r2, [r3, #4]
			break;
 8006bb4:	e063      	b.n	8006c7e <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bbc:	6a1a      	ldr	r2, [r3, #32]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc4:	895b      	ldrh	r3, [r3, #10]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff fcf2 	bl	80065c0 <move_window>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006be0:	7ffb      	ldrb	r3, [r7, #31]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d14a      	bne.n	8006c7c <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bf0:	8952      	ldrh	r2, [r2, #10]
 8006bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bf6:	fb01 f202 	mul.w	r2, r1, r2
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3303      	adds	r3, #3
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	061a      	lsls	r2, r3, #24
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	4313      	orrs	r3, r2
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	3201      	adds	r2, #1
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	0212      	lsls	r2, r2, #8
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0c1a      	lsrs	r2, r3, #16
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0e1a      	lsrs	r2, r3, #24
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	2201      	movs	r2, #1
 8006c66:	711a      	strb	r2, [r3, #4]
			break;
 8006c68:	e009      	b.n	8006c7e <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e006      	b.n	8006c7e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006c70:	bf00      	nop
 8006c72:	e004      	b.n	8006c7e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006c74:	bf00      	nop
 8006c76:	e002      	b.n	8006c7e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006c7c:	bf00      	nop
		}
	}

	return res;
 8006c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d906      	bls.n	8006ca6 <remove_chain+0x1e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d302      	bcc.n	8006cac <remove_chain+0x24>
		res = FR_INT_ERR;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	73fb      	strb	r3, [r7, #15]
 8006caa:	e049      	b.n	8006d40 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006cb0:	e03b      	b.n	8006d2a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fd98 	bl	80067ea <get_fat>
 8006cba:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d03b      	beq.n	8006d3a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <remove_chain+0x46>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e038      	b.n	8006d40 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd4:	d102      	bne.n	8006cdc <remove_chain+0x54>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e031      	b.n	8006d40 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006cdc:	2200      	movs	r2, #0
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fe7e 	bl	80069e2 <put_fat>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d126      	bne.n	8006d3e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfc:	d013      	beq.n	8006d26 <remove_chain+0x9e>
				fs->free_clust++;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	3301      	adds	r3, #1
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d0e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d16:	795b      	ldrb	r3, [r3, #5]
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d24:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d3bc      	bcc.n	8006cb2 <remove_chain+0x2a>
 8006d38:	e002      	b.n	8006d40 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006d3e:	bf00      	nop
		}
	}

	return res;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d111      	bne.n	8006d7e <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <create_chain+0x2e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d31d      	bcc.n	8006db4 <create_chain+0x6a>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	e01a      	b.n	8006db4 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fd32 	bl	80067ea <get_fat>
 8006d86:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d801      	bhi.n	8006d92 <create_chain+0x48>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e07f      	b.n	8006e92 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d98:	d101      	bne.n	8006d9e <create_chain+0x54>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	e079      	b.n	8006e92 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d201      	bcs.n	8006db0 <create_chain+0x66>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	e070      	b.n	8006e92 <create_chain+0x148>
		scl = clst;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d307      	bcc.n	8006ddc <create_chain+0x92>
			ncl = 2;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d901      	bls.n	8006ddc <create_chain+0x92>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e05a      	b.n	8006e92 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fd03 	bl	80067ea <get_fat>
 8006de4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00e      	beq.n	8006e0a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df2:	d002      	beq.n	8006dfa <create_chain+0xb0>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <create_chain+0xb4>
			return cs;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	e049      	b.n	8006e92 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d1d8      	bne.n	8006db8 <create_chain+0x6e>
 8006e06:	2300      	movs	r3, #0
 8006e08:	e043      	b.n	8006e92 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006e0a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006e0c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006e10:	6979      	ldr	r1, [r7, #20]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fde5 	bl	80069e2 <put_fat>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <create_chain+0xec>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fdd8 	bl	80069e2 <put_fat>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d121      	bne.n	8006e80 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	461a      	mov	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e54:	d01c      	beq.n	8006e90 <create_chain+0x146>
			fs->free_clust--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e66:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6e:	795b      	ldrb	r3, [r3, #5]
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	715a      	strb	r2, [r3, #5]
 8006e7e:	e007      	b.n	8006e90 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d102      	bne.n	8006e8c <create_chain+0x142>
 8006e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e8a:	e000      	b.n	8006e8e <create_chain+0x144>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006e90:	697b      	ldr	r3, [r7, #20]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	3304      	adds	r3, #4
 8006eae:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebc:	895b      	ldrh	r3, [r3, #10]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ed2:	7892      	ldrb	r2, [r2, #2]
 8006ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1d1a      	adds	r2, r3, #4
 8006ede:	613a      	str	r2, [r7, #16]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <clmt_clust+0x54>
 8006eea:	2300      	movs	r3, #0
 8006eec:	e010      	b.n	8006f10 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d307      	bcc.n	8006f06 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3304      	adds	r3, #4
 8006f02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f04:	e7e9      	b.n	8006eda <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006f06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr

08006f1a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d009      	beq.n	8006f54 <dir_sdi+0x3a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d301      	bcc.n	8006f58 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e0aa      	b.n	80070ae <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d110      	bne.n	8006f80 <dir_sdi+0x66>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d107      	bne.n	8006f80 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d115      	bne.n	8006fb2 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f92:	891b      	ldrh	r3, [r3, #8]
 8006f94:	461a      	mov	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d301      	bcc.n	8006fa0 <dir_sdi+0x86>
			return FR_INT_ERR;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e086      	b.n	80070ae <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	e043      	b.n	800703a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbe:	895b      	ldrh	r3, [r3, #10]
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	789b      	ldrb	r3, [r3, #2]
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006fda:	e021      	b.n	8007020 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fbff 	bl	80067ea <get_fat>
 8006fec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff4:	d101      	bne.n	8006ffa <dir_sdi+0xe0>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e059      	b.n	80070ae <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d909      	bls.n	8007014 <dir_sdi+0xfa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	d301      	bcc.n	8007018 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007014:	2302      	movs	r3, #2
 8007016:	e04a      	b.n	80070ae <dir_sdi+0x194>
			idx -= ic;
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d2d9      	bcs.n	8006fdc <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6979      	ldr	r1, [r7, #20]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fbb5 	bl	80067a2 <clust2sect>
 8007038:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	461a      	mov	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <dir_sdi+0x136>
 800704c:	2302      	movs	r3, #2
 800704e:	e02e      	b.n	80070ae <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	895b      	ldrh	r3, [r3, #10]
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	fbb3 f2f2 	udiv	r2, r3, r2
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4413      	add	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007074:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708c:	895b      	ldrh	r3, [r3, #10]
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	fbb3 f1f2 	udiv	r1, r3, r2
 800709a:	fb01 f202 	mul.w	r2, r1, r2
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	015b      	lsls	r3, r3, #5
 80070a2:	4403      	add	r3, r0
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070aa:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070b6:	b590      	push	{r4, r7, lr}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <dir_next+0x2a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <dir_next+0x2e>
		return FR_NO_FILE;
 80070e0:	2304      	movs	r3, #4
 80070e2:	e12e      	b.n	8007342 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	895b      	ldrh	r3, [r3, #10]
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fe:	fb01 f202 	mul.w	r2, r1, r2
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	f040 80fa 	bne.w	80072fe <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	3301      	adds	r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800711a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007134:	891b      	ldrh	r3, [r3, #8]
 8007136:	461a      	mov	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4293      	cmp	r3, r2
 800713c:	f0c0 80df 	bcc.w	80072fe <dir_next+0x248>
				return FR_NO_FILE;
 8007140:	2304      	movs	r3, #4
 8007142:	e0fe      	b.n	8007342 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007150:	895b      	ldrh	r3, [r3, #10]
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	b29b      	uxth	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	fbb3 f3f2 	udiv	r3, r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800716a:	7892      	ldrb	r2, [r2, #2]
 800716c:	3a01      	subs	r2, #1
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 80c4 	bne.w	80072fe <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7ff fb2e 	bl	80067ea <get_fat>
 800718e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d801      	bhi.n	800719a <dir_next+0xe4>
 8007196:	2302      	movs	r3, #2
 8007198:	e0d3      	b.n	8007342 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a0:	d101      	bne.n	80071a6 <dir_next+0xf0>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e0cd      	b.n	8007342 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	f0c0 808e 	bcc.w	80072d8 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <dir_next+0x110>
 80071c2:	2304      	movs	r3, #4
 80071c4:	e0bd      	b.n	8007342 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7ff fdb6 	bl	8006d4a <create_chain>
 80071de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <dir_next+0x134>
 80071e6:	2307      	movs	r3, #7
 80071e8:	e0ab      	b.n	8007342 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <dir_next+0x13e>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e0a6      	b.n	8007342 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071fa:	d101      	bne.n	8007200 <dir_next+0x14a>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0a0      	b.n	8007342 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff f987 	bl	800651c <sync_window>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <dir_next+0x162>
 8007214:	2301      	movs	r3, #1
 8007216:	e094      	b.n	8007342 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	895b      	ldrh	r3, [r3, #10]
 8007230:	461a      	mov	r2, r3
 8007232:	2100      	movs	r1, #0
 8007234:	f7fe ff5a 	bl	80060ec <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007246:	681c      	ldr	r4, [r3, #0]
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	4610      	mov	r0, r2
 800724c:	f7ff faa9 	bl	80067a2 <clust2sect>
 8007250:	4603      	mov	r3, r0
 8007252:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8007256:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007258:	2300      	movs	r3, #0
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	e021      	b.n	80072a2 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	2201      	movs	r2, #1
 800726c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff f950 	bl	800651c <sync_window>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <dir_next+0x1d0>
 8007282:	2301      	movs	r3, #1
 8007284:	e05d      	b.n	8007342 <dir_next+0x28c>
						dp->fs->winsect++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007294:	3201      	adds	r2, #1
 8007296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	461a      	mov	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d3d2      	bcc.n	800725e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1acb      	subs	r3, r1, r3
 80072d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072d6:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	461a      	mov	r2, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6979      	ldr	r1, [r7, #20]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fa57 	bl	80067a2 <clust2sect>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fc:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007308:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007320:	895b      	ldrh	r3, [r3, #10]
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	b29b      	uxth	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	fbb3 f1f2 	udiv	r1, r3, r2
 800732e:	fb01 f202 	mul.w	r2, r1, r2
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	015b      	lsls	r3, r3, #5
 8007336:	4403      	add	r3, r0
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800733e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd90      	pop	{r4, r7, pc}

0800734a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007354:	2100      	movs	r1, #0
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff fddf 	bl	8006f1a <dir_sdi>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d135      	bne.n	80073d2 <dir_alloc+0x88>
		n = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7ff f91f 	bl	80065c0 <move_window>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d121      	bne.n	80073d0 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2be5      	cmp	r3, #229	; 0xe5
 8007398:	d006      	beq.n	80073a8 <dir_alloc+0x5e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d107      	bne.n	80073b8 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d102      	bne.n	80073bc <dir_alloc+0x72>
 80073b6:	e00c      	b.n	80073d2 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073b8:	2300      	movs	r3, #0
 80073ba:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80073bc:	2101      	movs	r1, #1
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fe79 	bl	80070b6 <dir_next>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0cd      	beq.n	800736a <dir_alloc+0x20>
 80073ce:	e000      	b.n	80073d2 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80073d0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d101      	bne.n	80073dc <dir_alloc+0x92>
 80073d8:	2307      	movs	r3, #7
 80073da:	73fb      	strb	r3, [r7, #15]
	return res;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	331b      	adds	r3, #27
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	b21a      	sxth	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	331a      	adds	r3, #26
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b21b      	sxth	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b21b      	sxth	r3, r3
 8007406:	b29b      	uxth	r3, r3
 8007408:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b03      	cmp	r3, #3
 8007414:	d10f      	bne.n	8007436 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	3315      	adds	r3, #21
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b21a      	sxth	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	3314      	adds	r3, #20
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b21b      	sxth	r3, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	b21b      	sxth	r3, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

	return cl;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	331a      	adds	r3, #26
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	331b      	adds	r3, #27
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	0c1a      	lsrs	r2, r3, #16
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3314      	adds	r3, #20
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3315      	adds	r3, #21
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr
	...

08007490 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a2:	1e5a      	subs	r2, r3, #1
 80074a4:	4613      	mov	r3, r2
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	2301      	movs	r3, #1
 80074b6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80074b8:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <cmp_lfn+0xd8>)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	b21a      	sxth	r2, r3
 80074cc:	4926      	ldr	r1, [pc, #152]	; (8007568 <cmp_lfn+0xd8>)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	440b      	add	r3, r1
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	4619      	mov	r1, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	440b      	add	r3, r1
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21b      	sxth	r3, r3
 80074e2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d019      	beq.n	800751e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80074ea:	89bb      	ldrh	r3, [r7, #12]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f002 fc33 	bl	8009d58 <ff_wtoupper>
 80074f2:	4603      	mov	r3, r0
 80074f4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2bfe      	cmp	r3, #254	; 0xfe
 80074fa:	d80e      	bhi.n	800751a <cmp_lfn+0x8a>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	617a      	str	r2, [r7, #20]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f002 fc24 	bl	8009d58 <ff_wtoupper>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	89fb      	ldrh	r3, [r7, #14]
 8007516:	4293      	cmp	r3, r2
 8007518:	d008      	beq.n	800752c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800751a:	2300      	movs	r3, #0
 800751c:	e01f      	b.n	800755e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800751e:	89bb      	ldrh	r3, [r7, #12]
 8007520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007524:	4293      	cmp	r3, r2
 8007526:	d001      	beq.n	800752c <cmp_lfn+0x9c>
 8007528:	2300      	movs	r3, #0
 800752a:	e018      	b.n	800755e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	d9bf      	bls.n	80074b8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <cmp_lfn+0xcc>
 8007544:	89fb      	ldrh	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <cmp_lfn+0xcc>
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <cmp_lfn+0xcc>
		return 0;
 8007558:	2300      	movs	r3, #0
 800755a:	e000      	b.n	800755e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800755c:	2301      	movs	r3, #1
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	0800e6c4 	.word	0x0800e6c4

0800756c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800756c:	b480      	push	{r7}
 800756e:	b089      	sub	sp, #36	; 0x24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4611      	mov	r1, r2
 8007578:	461a      	mov	r2, r3
 800757a:	460b      	mov	r3, r1
 800757c:	71fb      	strb	r3, [r7, #7]
 800757e:	4613      	mov	r3, r2
 8007580:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	330d      	adds	r3, #13
 8007586:	79ba      	ldrb	r2, [r7, #6]
 8007588:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	330b      	adds	r3, #11
 800758e:	220f      	movs	r2, #15
 8007590:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	330c      	adds	r3, #12
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	331a      	adds	r3, #26
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	331b      	adds	r3, #27
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	4613      	mov	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	82fb      	strh	r3, [r7, #22]
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80075c2:	8afb      	ldrh	r3, [r7, #22]
 80075c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <fit_lfn+0x70>
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <fit_lfn+0xe4>)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	4413      	add	r3, r2
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	8afa      	ldrh	r2, [r7, #22]
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	8afb      	ldrh	r3, [r7, #22]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b299      	uxth	r1, r3
 80075f6:	4a16      	ldr	r2, [pc, #88]	; (8007650 <fit_lfn+0xe4>)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	4413      	add	r3, r2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	3301      	adds	r3, #1
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	4413      	add	r3, r2
 8007604:	b2ca      	uxtb	r2, r1
 8007606:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007608:	8afb      	ldrh	r3, [r7, #22]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <fit_lfn+0xa8>
 800760e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007612:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	3301      	adds	r3, #1
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b0c      	cmp	r3, #12
 800761e:	d9d0      	bls.n	80075c2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007620:	8afb      	ldrh	r3, [r7, #22]
 8007622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007626:	4293      	cmp	r3, r2
 8007628:	d006      	beq.n	8007638 <fit_lfn+0xcc>
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <fit_lfn+0xd4>
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800763e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	79fa      	ldrb	r2, [r7, #7]
 8007644:	701a      	strb	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3724      	adds	r7, #36	; 0x24
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	0800e6c4 	.word	0x0800e6c4

08007654 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08c      	sub	sp, #48	; 0x30
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007662:	220b      	movs	r2, #11
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7fe fd22 	bl	80060b0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b05      	cmp	r3, #5
 8007670:	d92b      	bls.n	80076ca <gen_numname+0x76>
		sr = seq;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007676:	e022      	b.n	80076be <gen_numname+0x6a>
			wc = *lfn++;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1c9a      	adds	r2, r3, #2
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007682:	2300      	movs	r3, #0
 8007684:	62bb      	str	r3, [r7, #40]	; 0x28
 8007686:	e017      	b.n	80076b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	005a      	lsls	r2, r3, #1
 800768c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	4413      	add	r3, r2
 8007694:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <gen_numname+0x5e>
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	3301      	adds	r3, #1
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b0f      	cmp	r3, #15
 80076bc:	d9e4      	bls.n	8007688 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1d8      	bne.n	8007678 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80076ca:	2307      	movs	r3, #7
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3330      	adds	r3, #48	; 0x30
 80076da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80076de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076e2:	2b39      	cmp	r3, #57	; 0x39
 80076e4:	d904      	bls.n	80076f0 <gen_numname+0x9c>
 80076e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ea:	3307      	adds	r3, #7
 80076ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	1e5a      	subs	r2, r3, #1
 80076f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80076f6:	3330      	adds	r3, #48	; 0x30
 80076f8:	443b      	add	r3, r7
 80076fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80076fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	091b      	lsrs	r3, r3, #4
 8007706:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1df      	bne.n	80076ce <gen_numname+0x7a>
	ns[i] = '~';
 800770e:	f107 0214 	add.w	r2, r7, #20
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	4413      	add	r3, r2
 8007716:	227e      	movs	r2, #126	; 0x7e
 8007718:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	e002      	b.n	8007726 <gen_numname+0xd2>
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3301      	adds	r3, #1
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
 8007726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	429a      	cmp	r2, r3
 800772c:	d205      	bcs.n	800773a <gen_numname+0xe6>
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b20      	cmp	r3, #32
 8007738:	d1f2      	bne.n	8007720 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	2b07      	cmp	r3, #7
 800773e:	d807      	bhi.n	8007750 <gen_numname+0xfc>
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	62ba      	str	r2, [r7, #40]	; 0x28
 8007746:	3330      	adds	r3, #48	; 0x30
 8007748:	443b      	add	r3, r7
 800774a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800774e:	e000      	b.n	8007752 <gen_numname+0xfe>
 8007750:	2120      	movs	r1, #32
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	627a      	str	r2, [r7, #36]	; 0x24
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	460a      	mov	r2, r1
 800775e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	2b07      	cmp	r3, #7
 8007764:	d9e9      	bls.n	800773a <gen_numname+0xe6>
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	3730      	adds	r7, #48	; 0x30
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800777c:	230b      	movs	r3, #11
 800777e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	0852      	lsrs	r2, r2, #1
 8007786:	01db      	lsls	r3, r3, #7
 8007788:	4313      	orrs	r3, r2
 800778a:	b2da      	uxtb	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1c59      	adds	r1, r3, #1
 8007790:	6079      	str	r1, [r7, #4]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4413      	add	r3, r2
 8007796:	73fb      	strb	r3, [r7, #15]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3b01      	subs	r3, #1
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1ed      	bne.n	8007780 <sum_sfn+0x10>
	return sum;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077b8:	2100      	movs	r1, #0
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fbad 	bl	8006f1a <dir_sdi>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <dir_find+0x1e>
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	e0b8      	b.n	8007940 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	753b      	strb	r3, [r7, #20]
 80077d2:	7d3b      	ldrb	r3, [r7, #20]
 80077d4:	757b      	strb	r3, [r7, #21]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077e0:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe fee3 	bl	80065c0 <move_window>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 8097 	bne.w	8007934 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007816:	7dbb      	ldrb	r3, [r7, #22]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <dir_find+0x72>
 800781c:	2304      	movs	r3, #4
 800781e:	75fb      	strb	r3, [r7, #23]
 8007820:	e08d      	b.n	800793e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	330b      	adds	r3, #11
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800782c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800782e:	7dbb      	ldrb	r3, [r7, #22]
 8007830:	2be5      	cmp	r3, #229	; 0xe5
 8007832:	d007      	beq.n	8007844 <dir_find+0x94>
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <dir_find+0xa6>
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b0f      	cmp	r3, #15
 8007842:	d008      	beq.n	8007856 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007844:	23ff      	movs	r3, #255	; 0xff
 8007846:	757b      	strb	r3, [r7, #21]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007852:	849a      	strh	r2, [r3, #36]	; 0x24
 8007854:	e063      	b.n	800791e <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d137      	bne.n	80078cc <dir_find+0x11c>
				if (dp->lfn) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05a      	beq.n	800791e <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007868:	7dbb      	ldrb	r3, [r7, #22]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	7b5b      	ldrb	r3, [r3, #13]
 8007876:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007878:	7dbb      	ldrb	r3, [r7, #22]
 800787a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787e:	75bb      	strb	r3, [r7, #22]
 8007880:	7dbb      	ldrb	r3, [r7, #22]
 8007882:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788a:	88da      	ldrh	r2, [r3, #6]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007892:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007894:	7dba      	ldrb	r2, [r7, #22]
 8007896:	7d7b      	ldrb	r3, [r7, #21]
 8007898:	429a      	cmp	r2, r3
 800789a:	d114      	bne.n	80078c6 <dir_find+0x116>
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	330d      	adds	r3, #13
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	7d3a      	ldrb	r2, [r7, #20]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d10e      	bne.n	80078c6 <dir_find+0x116>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	6939      	ldr	r1, [r7, #16]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fdec 	bl	8007490 <cmp_lfn>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <dir_find+0x116>
 80078be:	7d7b      	ldrb	r3, [r7, #21]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	e000      	b.n	80078c8 <dir_find+0x118>
 80078c6:	23ff      	movs	r3, #255	; 0xff
 80078c8:	757b      	strb	r3, [r7, #21]
 80078ca:	e028      	b.n	800791e <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80078cc:	7d7b      	ldrb	r3, [r7, #21]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <dir_find+0x132>
 80078d2:	6938      	ldr	r0, [r7, #16]
 80078d4:	f7ff ff4c 	bl	8007770 <sum_sfn>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	7d3b      	ldrb	r3, [r7, #20]
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02a      	beq.n	8007938 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	330b      	adds	r3, #11
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <dir_find+0x15e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	220b      	movs	r2, #11
 8007900:	4619      	mov	r1, r3
 8007902:	6938      	ldr	r0, [r7, #16]
 8007904:	f7fe fc0c 	bl	8006120 <mem_cmp>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800790e:	23ff      	movs	r3, #255	; 0xff
 8007910:	757b      	strb	r3, [r7, #21]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800791c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800791e:	2100      	movs	r1, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fbc8 	bl	80070b6 <dir_next>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f43f af58 	beq.w	80077e2 <dir_find+0x32>
 8007932:	e004      	b.n	800793e <dir_find+0x18e>
		if (res != FR_OK) break;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800793c:	bf00      	nop

	return res;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	623b      	str	r3, [r7, #32]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007964:	f107 030c 	add.w	r3, r7, #12
 8007968:	220c      	movs	r2, #12
 800796a:	6a39      	ldr	r1, [r7, #32]
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fb9f 	bl	80060b0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d03b      	beq.n	80079f4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	330b      	adds	r3, #11
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	461a      	mov	r2, r3
 800798c:	2300      	movs	r3, #0
 800798e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8007990:	2301      	movs	r3, #1
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
 8007994:	e013      	b.n	80079be <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007996:	f107 010c 	add.w	r1, r7, #12
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	6a38      	ldr	r0, [r7, #32]
 80079a0:	f7ff fe58 	bl	8007654 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff ff03 	bl	80077b0 <dir_find>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80079b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d106      	bne.n	80079c6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	3301      	adds	r3, #1
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	2b63      	cmp	r3, #99	; 0x63
 80079c2:	d9e8      	bls.n	8007996 <dir_register+0x4e>
 80079c4:	e000      	b.n	80079c8 <dir_register+0x80>
			if (res != FR_OK) break;
 80079c6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d101      	bne.n	80079d2 <dir_register+0x8a>
 80079ce:	2307      	movs	r3, #7
 80079d0:	e0d8      	b.n	8007b84 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80079d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d002      	beq.n	80079e0 <dir_register+0x98>
 80079da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079de:	e0d1      	b.n	8007b84 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	330b      	adds	r3, #11
 80079e4:	7dfa      	ldrb	r2, [r7, #23]
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ee:	461a      	mov	r2, r3
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d014      	beq.n	8007a28 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80079fe:	2300      	movs	r3, #0
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a02:	e002      	b.n	8007a0a <dir_register+0xc2>
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	3301      	adds	r3, #1
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f5      	bne.n	8007a04 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	3319      	adds	r3, #25
 8007a1c:	4a5b      	ldr	r2, [pc, #364]	; (8007b8c <dir_register+0x244>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	089b      	lsrs	r3, r3, #2
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
 8007a26:	e001      	b.n	8007a2c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fc8b 	bl	800734a <dir_alloc>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d15b      	bne.n	8007afa <dir_register+0x1b2>
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	3b01      	subs	r3, #1
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d055      	beq.n	8007afa <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fa5b 	bl	8006f1a <dir_sdi>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d143      	bne.n	8007afa <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fe78 	bl	8007770 <sum_sfn>
 8007a80:	4603      	mov	r3, r0
 8007a82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7fe fd92 	bl	80065c0 <move_window>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d126      	bne.n	8007af8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab0:	6a18      	ldr	r0, [r3, #32]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab8:	6959      	ldr	r1, [r3, #20]
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7efb      	ldrb	r3, [r7, #27]
 8007ac0:	f7ff fd54 	bl	800756c <fit_lfn>
				dp->fs->wflag = 1;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff faed 	bl	80070b6 <dir_next>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d107      	bne.n	8007afa <dir_register+0x1b2>
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	3b01      	subs	r3, #1
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1c6      	bne.n	8007a84 <dir_register+0x13c>
 8007af6:	e000      	b.n	8007afa <dir_register+0x1b2>
				if (res != FR_OK) break;
 8007af8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d13e      	bne.n	8007b80 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fe fd53 	bl	80065c0 <move_window>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d12b      	bne.n	8007b80 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	2220      	movs	r2, #32
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fad9 	bl	80060ec <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b40:	6958      	ldr	r0, [r3, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	220b      	movs	r2, #11
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7fe faaf 	bl	80060b0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	330b      	adds	r3, #11
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	330c      	adds	r3, #12
 8007b68:	f002 0218 	and.w	r2, r2, #24
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3730      	adds	r7, #48	; 0x30
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	4ec4ec4f 	.word	0x4ec4ec4f

08007b90 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e002      	b.n	8007ba8 <create_name+0x18>
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b2f      	cmp	r3, #47	; 0x2f
 8007bae:	d0f8      	beq.n	8007ba2 <create_name+0x12>
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8007bb6:	d0f4      	beq.n	8007ba2 <create_name+0x12>
	lfn = dp->lfn;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	61ba      	str	r2, [r7, #24]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bda:	2b1f      	cmp	r3, #31
 8007bdc:	d92f      	bls.n	8007c3e <create_name+0xae>
 8007bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be0:	2b2f      	cmp	r3, #47	; 0x2f
 8007be2:	d02c      	beq.n	8007c3e <create_name+0xae>
 8007be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be6:	2b5c      	cmp	r3, #92	; 0x5c
 8007be8:	d029      	beq.n	8007c3e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2bfe      	cmp	r3, #254	; 0xfe
 8007bee:	d901      	bls.n	8007bf4 <create_name+0x64>
			return FR_INVALID_NAME;
 8007bf0:	2306      	movs	r3, #6
 8007bf2:	e186      	b.n	8007f02 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f002 f870 	bl	8009ce4 <ff_convert>
 8007c04:	4603      	mov	r3, r0
 8007c06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <create_name+0x82>
 8007c0e:	2306      	movs	r3, #6
 8007c10:	e177      	b.n	8007f02 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c14:	2b7f      	cmp	r3, #127	; 0x7f
 8007c16:	d809      	bhi.n	8007c2c <create_name+0x9c>
 8007c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	488e      	ldr	r0, [pc, #568]	; (8007e58 <create_name+0x2c8>)
 8007c1e:	f7fe faa5 	bl	800616c <chk_chr>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <create_name+0x9c>
			return FR_INVALID_NAME;
 8007c28:	2306      	movs	r3, #6
 8007c2a:	e16a      	b.n	8007f02 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	617a      	str	r2, [r7, #20]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c3c:	e7c5      	b.n	8007bca <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	441a      	add	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c4a:	2b1f      	cmp	r3, #31
 8007c4c:	d801      	bhi.n	8007c52 <create_name+0xc2>
 8007c4e:	2304      	movs	r3, #4
 8007c50:	e000      	b.n	8007c54 <create_name+0xc4>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007c58:	e011      	b.n	8007c7e <create_name+0xee>
		w = lfn[di - 1];
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c60:	3b01      	subs	r3, #1
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d002      	beq.n	8007c78 <create_name+0xe8>
 8007c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c74:	2b2e      	cmp	r3, #46	; 0x2e
 8007c76:	d106      	bne.n	8007c86 <create_name+0xf6>
		di--;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1ea      	bne.n	8007c5a <create_name+0xca>
 8007c84:	e000      	b.n	8007c88 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8007c86:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <create_name+0x102>
 8007c8e:	2306      	movs	r3, #6
 8007c90:	e137      	b.n	8007f02 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	220b      	movs	r2, #11
 8007ca8:	2120      	movs	r1, #32
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fa1e 	bl	80060ec <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e002      	b.n	8007cbc <create_name+0x12c>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d0f5      	beq.n	8007cb6 <create_name+0x126>
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd6:	d0ee      	beq.n	8007cb6 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <create_name+0x162>
 8007cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce2:	f043 0303 	orr.w	r3, r3, #3
 8007ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007cea:	e002      	b.n	8007cf2 <create_name+0x162>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <create_name+0x17c>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	2b2e      	cmp	r3, #46	; 0x2e
 8007d0a:	d1ef      	bne.n	8007cec <create_name+0x15c>

	b = i = 0; ni = 8;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	623b      	str	r3, [r7, #32]
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d16:	2308      	movs	r3, #8
 8007d18:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	61ba      	str	r2, [r7, #24]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8091 	beq.w	8007e54 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d006      	beq.n	8007d46 <create_name+0x1b6>
 8007d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d3c:	d10a      	bne.n	8007d54 <create_name+0x1c4>
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d006      	beq.n	8007d54 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4a:	f043 0303 	orr.w	r3, r3, #3
 8007d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d52:	e07e      	b.n	8007e52 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d54:	6a3a      	ldr	r2, [r7, #32]
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d203      	bcs.n	8007d64 <create_name+0x1d4>
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d123      	bne.n	8007dac <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2b0b      	cmp	r3, #11
 8007d68:	d106      	bne.n	8007d78 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8007d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d6e:	f043 0303 	orr.w	r3, r3, #3
 8007d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d76:	e076      	b.n	8007e66 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d005      	beq.n	8007d8c <create_name+0x1fc>
 8007d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d84:	f043 0303 	orr.w	r3, r3, #3
 8007d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d867      	bhi.n	8007e64 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	2308      	movs	r3, #8
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	230b      	movs	r3, #11
 8007d9e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007daa:	e052      	b.n	8007e52 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dae:	2b7f      	cmp	r3, #127	; 0x7f
 8007db0:	d914      	bls.n	8007ddc <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 ff94 	bl	8009ce4 <ff_convert>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <create_name+0x240>
 8007dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc8:	3b80      	subs	r3, #128	; 0x80
 8007dca:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <create_name+0x2cc>)
 8007dcc:	5cd3      	ldrb	r3, [r2, r3]
 8007dce:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd4:	f043 0302 	orr.w	r3, r3, #2
 8007dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <create_name+0x262>
 8007de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de4:	4619      	mov	r1, r3
 8007de6:	481e      	ldr	r0, [pc, #120]	; (8007e60 <create_name+0x2d0>)
 8007de8:	f7fe f9c0 	bl	800616c <chk_chr>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007df2:	235f      	movs	r3, #95	; 0x5f
 8007df4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dfa:	f043 0303 	orr.w	r3, r3, #3
 8007dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e02:	e01b      	b.n	8007e3c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d909      	bls.n	8007e1e <create_name+0x28e>
 8007e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0c:	2b5a      	cmp	r3, #90	; 0x5a
 8007e0e:	d806      	bhi.n	8007e1e <create_name+0x28e>
					b |= 2;
 8007e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e14:	f043 0302 	orr.w	r3, r3, #2
 8007e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e1c:	e00e      	b.n	8007e3c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e20:	2b60      	cmp	r3, #96	; 0x60
 8007e22:	d90b      	bls.n	8007e3c <create_name+0x2ac>
 8007e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e26:	2b7a      	cmp	r3, #122	; 0x7a
 8007e28:	d808      	bhi.n	8007e3c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8007e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e38:	3b20      	subs	r3, #32
 8007e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	1c59      	adds	r1, r3, #1
 8007e48:	6239      	str	r1, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007e52:	e762      	b.n	8007d1a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007e54:	bf00      	nop
 8007e56:	e006      	b.n	8007e66 <create_name+0x2d6>
 8007e58:	0800e5bc 	.word	0x0800e5bc
 8007e5c:	0800e644 	.word	0x0800e644
 8007e60:	0800e5c8 	.word	0x0800e5c8
			if (si > di) break;			/* No extension */
 8007e64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2be5      	cmp	r3, #229	; 0xe5
 8007e72:	d105      	bne.n	8007e80 <create_name+0x2f0>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d104      	bne.n	8007e90 <create_name+0x300>
 8007e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8007e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e94:	f003 030c 	and.w	r3, r3, #12
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d005      	beq.n	8007ea8 <create_name+0x318>
 8007e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d105      	bne.n	8007eb4 <create_name+0x324>
		cf |= NS_LFN;
 8007ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eac:	f043 0302 	orr.w	r3, r3, #2
 8007eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d117      	bne.n	8007ef0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d105      	bne.n	8007ed8 <create_name+0x348>
 8007ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed0:	f043 0310 	orr.w	r3, r3, #16
 8007ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007edc:	f003 030c 	and.w	r3, r3, #12
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d105      	bne.n	8007ef0 <create_name+0x360>
 8007ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee8:	f043 0308 	orr.w	r3, r3, #8
 8007eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	330b      	adds	r3, #11
 8007efa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007efe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f00:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3728      	adds	r7, #40	; 0x28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop

08007f0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b2f      	cmp	r3, #47	; 0x2f
 8007f1c:	d003      	beq.n	8007f26 <follow_path+0x1a>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b5c      	cmp	r3, #92	; 0x5c
 8007f24:	d102      	bne.n	8007f2c <follow_path+0x20>
		path++;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f32:	461a      	mov	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b1f      	cmp	r3, #31
 8007f3e:	d80c      	bhi.n	8007f5a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007f40:	2100      	movs	r1, #0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fe ffe9 	bl	8006f1a <dir_sdi>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	6153      	str	r3, [r2, #20]
 8007f58:	e049      	b.n	8007fee <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff fe16 	bl	8007b90 <create_name>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d13a      	bne.n	8007fe4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fc1e 	bl	80077b0 <dir_find>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	7adb      	ldrb	r3, [r3, #11]
 8007f82:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d12b      	bne.n	8007fe8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d126      	bne.n	8007fe8 <follow_path+0xdc>
 8007f9a:	2305      	movs	r3, #5
 8007f9c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007f9e:	e023      	b.n	8007fe8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d120      	bne.n	8007fec <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	330b      	adds	r3, #11
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007fc2:	2305      	movs	r3, #5
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	e012      	b.n	8007fee <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fa07 	bl	80073e6 <ld_clust>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fe2:	e7ba      	b.n	8007f5a <follow_path+0x4e>
			if (res != FR_OK) break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <follow_path+0xe2>
				break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fec:	bf00      	nop
		}
	}

	return res;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008004:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d031      	beq.n	8008072 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e002      	b.n	800801c <get_ldnumber+0x24>
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	3301      	adds	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b1f      	cmp	r3, #31
 8008022:	d903      	bls.n	800802c <get_ldnumber+0x34>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b3a      	cmp	r3, #58	; 0x3a
 800802a:	d1f4      	bne.n	8008016 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b3a      	cmp	r3, #58	; 0x3a
 8008032:	d11c      	bne.n	800806e <get_ldnumber+0x76>
			tp = *path;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	60fa      	str	r2, [r7, #12]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	3b30      	subs	r3, #48	; 0x30
 8008044:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b09      	cmp	r3, #9
 800804a:	d80e      	bhi.n	800806a <get_ldnumber+0x72>
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	429a      	cmp	r2, r3
 8008052:	d10a      	bne.n	800806a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d107      	bne.n	800806a <get_ldnumber+0x72>
					vol = (int)i;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	3301      	adds	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	e002      	b.n	8008074 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008072:	693b      	ldr	r3, [r7, #16]
}
 8008074:	4618      	mov	r0, r3
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
	...

08008080 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008090:	2200      	movs	r2, #0
 8008092:	711a      	strb	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809a:	461a      	mov	r2, r3
 800809c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fe fa8b 	bl	80065c0 <move_window>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <check_fs+0x34>
		return 3;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e04a      	b.n	800814a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ba:	3301      	adds	r3, #1
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	b21a      	sxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80080c8:	b21b      	sxth	r3, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b21b      	sxth	r3, r3
 80080ce:	4a21      	ldr	r2, [pc, #132]	; (8008154 <check_fs+0xd4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d001      	beq.n	80080d8 <check_fs+0x58>
		return 2;
 80080d4:	2302      	movs	r3, #2
 80080d6:	e038      	b.n	800814a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3336      	adds	r3, #54	; 0x36
 80080dc:	3303      	adds	r3, #3
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	061a      	lsls	r2, r3, #24
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3336      	adds	r3, #54	; 0x36
 80080e6:	3302      	adds	r3, #2
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	041b      	lsls	r3, r3, #16
 80080ec:	4313      	orrs	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	3236      	adds	r2, #54	; 0x36
 80080f2:	3201      	adds	r2, #1
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	0212      	lsls	r2, r2, #8
 80080f8:	4313      	orrs	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008100:	4313      	orrs	r3, r2
 8008102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008106:	4a14      	ldr	r2, [pc, #80]	; (8008158 <check_fs+0xd8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d101      	bne.n	8008110 <check_fs+0x90>
		return 0;
 800810c:	2300      	movs	r3, #0
 800810e:	e01c      	b.n	800814a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3352      	adds	r3, #82	; 0x52
 8008114:	3303      	adds	r3, #3
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	061a      	lsls	r2, r3, #24
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3352      	adds	r3, #82	; 0x52
 800811e:	3302      	adds	r3, #2
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	4313      	orrs	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	3252      	adds	r2, #82	; 0x52
 800812a:	3201      	adds	r2, #1
 800812c:	7812      	ldrb	r2, [r2, #0]
 800812e:	0212      	lsls	r2, r2, #8
 8008130:	4313      	orrs	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008138:	4313      	orrs	r3, r2
 800813a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800813e:	4a06      	ldr	r2, [pc, #24]	; (8008158 <check_fs+0xd8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d101      	bne.n	8008148 <check_fs+0xc8>
		return 0;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <check_fs+0xca>

	return 1;
 8008148:	2301      	movs	r3, #1
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	ffffaa55 	.word	0xffffaa55
 8008158:	00544146 	.word	0x00544146

0800815c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b096      	sub	sp, #88	; 0x58
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008170:	68b8      	ldr	r0, [r7, #8]
 8008172:	f7ff ff41 	bl	8007ff8 <get_ldnumber>
 8008176:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	2b00      	cmp	r3, #0
 800817c:	da01      	bge.n	8008182 <find_volume+0x26>
 800817e:	230b      	movs	r3, #11
 8008180:	e311      	b.n	80087a6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008182:	4a98      	ldr	r2, [pc, #608]	; (80083e4 <find_volume+0x288>)
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <find_volume+0x3a>
 8008192:	230c      	movs	r3, #12
 8008194:	e307      	b.n	80087a6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800819a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01c      	beq.n	80081e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fd fedf 	bl	8005f74 <disk_status>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10c      	bne.n	80081e2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <find_volume+0x82>
 80081ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80081da:	230a      	movs	r3, #10
 80081dc:	e2e3      	b.n	80087a6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80081de:	2300      	movs	r3, #0
 80081e0:	e2e1      	b.n	80087a6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd fed1 	bl	8005fa8 <disk_initialize>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800820c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008218:	2303      	movs	r3, #3
 800821a:	e2c4      	b.n	80087a6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <find_volume+0xd6>
 8008222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800822e:	230a      	movs	r3, #10
 8008230:	e2b9      	b.n	80087a6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008238:	7858      	ldrb	r0, [r3, #1]
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008240:	330a      	adds	r3, #10
 8008242:	461a      	mov	r2, r3
 8008244:	2102      	movs	r1, #2
 8008246:	f7fd ff15 	bl	8006074 <disk_ioctl>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008256:	895b      	ldrh	r3, [r3, #10]
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d306      	bcc.n	800826c <find_volume+0x110>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008264:	895b      	ldrh	r3, [r3, #10]
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826a:	d901      	bls.n	8008270 <find_volume+0x114>
 800826c:	2301      	movs	r3, #1
 800826e:	e29a      	b.n	80087a6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008276:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008278:	f7ff ff02 	bl	8008080 <check_fs>
 800827c:	4603      	mov	r3, r0
 800827e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008286:	2b01      	cmp	r3, #1
 8008288:	d153      	bne.n	8008332 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800828a:	2300      	movs	r3, #0
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
 800828e:	e028      	b.n	80082e2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800829a:	4413      	add	r3, r2
 800829c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	3304      	adds	r3, #4
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d012      	beq.n	80082ce <find_volume+0x172>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	330b      	adds	r3, #11
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	061a      	lsls	r2, r3, #24
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	330a      	adds	r3, #10
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	041b      	lsls	r3, r3, #16
 80082b8:	4313      	orrs	r3, r2
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	3209      	adds	r2, #9
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	0212      	lsls	r2, r2, #8
 80082c2:	4313      	orrs	r3, r2
 80082c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c6:	3208      	adds	r2, #8
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	e000      	b.n	80082d0 <find_volume+0x174>
 80082ce:	2200      	movs	r2, #0
 80082d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	3358      	adds	r3, #88	; 0x58
 80082d6:	443b      	add	r3, r7
 80082d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80082dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082de:	3301      	adds	r3, #1
 80082e0:	643b      	str	r3, [r7, #64]	; 0x40
 80082e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d9d3      	bls.n	8008290 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80082e8:	2300      	movs	r3, #0
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <find_volume+0x19c>
 80082f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f4:	3b01      	subs	r3, #1
 80082f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80082f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	3358      	adds	r3, #88	; 0x58
 80082fe:	443b      	add	r3, r7
 8008300:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008304:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <find_volume+0x1bc>
 800830c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800830e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008310:	f7ff feb6 	bl	8008080 <check_fs>
 8008314:	4603      	mov	r3, r0
 8008316:	e000      	b.n	800831a <find_volume+0x1be>
 8008318:	2302      	movs	r3, #2
 800831a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800831e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <find_volume+0x1d6>
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	3301      	adds	r3, #1
 800832a:	643b      	str	r3, [r7, #64]	; 0x40
 800832c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832e:	2b03      	cmp	r3, #3
 8008330:	d9e2      	bls.n	80082f8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008336:	2b03      	cmp	r3, #3
 8008338:	d101      	bne.n	800833e <find_volume+0x1e2>
 800833a:	2301      	movs	r3, #1
 800833c:	e233      	b.n	80087a6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800833e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <find_volume+0x1ee>
 8008346:	230d      	movs	r3, #13
 8008348:	e22d      	b.n	80087a6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	7b1b      	ldrb	r3, [r3, #12]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	b21a      	sxth	r2, r3
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	7adb      	ldrb	r3, [r3, #11]
 8008356:	b21b      	sxth	r3, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	b21a      	sxth	r2, r3
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008362:	895b      	ldrh	r3, [r3, #10]
 8008364:	b21b      	sxth	r3, r3
 8008366:	429a      	cmp	r2, r3
 8008368:	d001      	beq.n	800836e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800836a:	230d      	movs	r3, #13
 800836c:	e21b      	b.n	80087a6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	7ddb      	ldrb	r3, [r3, #23]
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	b21a      	sxth	r2, r3
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	7d9b      	ldrb	r3, [r3, #22]
 800837a:	b21b      	sxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b21b      	sxth	r3, r3
 8008380:	b29b      	uxth	r3, r3
 8008382:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d112      	bne.n	80083b0 <find_volume+0x254>
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008390:	061a      	lsls	r2, r3, #24
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	4313      	orrs	r3, r2
 800839c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800839e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80083a2:	0212      	lsls	r2, r2, #8
 80083a4:	4313      	orrs	r3, r2
 80083a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80083ac:	4313      	orrs	r3, r2
 80083ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b6:	461a      	mov	r2, r3
 80083b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ba:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	7c1a      	ldrb	r2, [r3, #16]
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ce:	78db      	ldrb	r3, [r3, #3]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d009      	beq.n	80083e8 <find_volume+0x28c>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	78db      	ldrb	r3, [r3, #3]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d003      	beq.n	80083e8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80083e0:	230d      	movs	r3, #13
 80083e2:	e1e0      	b.n	80087a6 <find_volume+0x64a>
 80083e4:	2000287c 	.word	0x2000287c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ee:	78db      	ldrb	r3, [r3, #3]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f4:	fb02 f303 	mul.w	r3, r2, r3
 80083f8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	7b5a      	ldrb	r2, [r3, #13]
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008404:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840c:	789b      	ldrb	r3, [r3, #2]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <find_volume+0x2d0>
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008418:	789b      	ldrb	r3, [r3, #2]
 800841a:	461a      	mov	r2, r3
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008422:	789b      	ldrb	r3, [r3, #2]
 8008424:	3b01      	subs	r3, #1
 8008426:	4013      	ands	r3, r2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800842c:	230d      	movs	r3, #13
 800842e:	e1ba      	b.n	80087a6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	7c9b      	ldrb	r3, [r3, #18]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	b21a      	sxth	r2, r3
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	7c5b      	ldrb	r3, [r3, #17]
 800843c:	b21b      	sxth	r3, r3
 800843e:	4313      	orrs	r3, r2
 8008440:	b21b      	sxth	r3, r3
 8008442:	b29a      	uxth	r2, r3
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008452:	891b      	ldrh	r3, [r3, #8]
 8008454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800845a:	8952      	ldrh	r2, [r2, #10]
 800845c:	0952      	lsrs	r2, r2, #5
 800845e:	b292      	uxth	r2, r2
 8008460:	fbb3 f1f2 	udiv	r1, r3, r2
 8008464:	fb01 f202 	mul.w	r2, r1, r2
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8008470:	230d      	movs	r3, #13
 8008472:	e198      	b.n	80087a6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	7d1b      	ldrb	r3, [r3, #20]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	b21a      	sxth	r2, r3
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	7cdb      	ldrb	r3, [r3, #19]
 8008480:	b21b      	sxth	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	b21b      	sxth	r3, r3
 8008486:	b29b      	uxth	r3, r3
 8008488:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800848a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848c:	2b00      	cmp	r3, #0
 800848e:	d112      	bne.n	80084b6 <find_volume+0x35a>
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008496:	061a      	lsls	r2, r3, #24
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	4313      	orrs	r3, r2
 80084a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80084a8:	0212      	lsls	r2, r2, #8
 80084aa:	4313      	orrs	r3, r2
 80084ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	7bdb      	ldrb	r3, [r3, #15]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	b21a      	sxth	r2, r3
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	7b9b      	ldrb	r3, [r3, #14]
 80084c2:	b21b      	sxth	r3, r3
 80084c4:	4313      	orrs	r3, r2
 80084c6:	b21b      	sxth	r3, r3
 80084c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80084ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <find_volume+0x378>
 80084d0:	230d      	movs	r3, #13
 80084d2:	e168      	b.n	80087a6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80084d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d8:	4413      	add	r3, r2
 80084da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084e0:	8911      	ldrh	r1, [r2, #8]
 80084e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084e8:	8952      	ldrh	r2, [r2, #10]
 80084ea:	0952      	lsrs	r2, r2, #5
 80084ec:	b292      	uxth	r2, r2
 80084ee:	fbb1 f2f2 	udiv	r2, r1, r2
 80084f2:	b292      	uxth	r2, r2
 80084f4:	4413      	add	r3, r2
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d201      	bcs.n	8008504 <find_volume+0x3a8>
 8008500:	230d      	movs	r3, #13
 8008502:	e150      	b.n	80087a6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008510:	7892      	ldrb	r2, [r2, #2]
 8008512:	fbb3 f3f2 	udiv	r3, r3, r2
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <find_volume+0x3c6>
 800851e:	230d      	movs	r3, #13
 8008520:	e141      	b.n	80087a6 <find_volume+0x64a>
	fmt = FS_FAT12;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800852e:	4293      	cmp	r3, r2
 8008530:	d902      	bls.n	8008538 <find_volume+0x3dc>
 8008532:	2302      	movs	r3, #2
 8008534:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800853e:	4293      	cmp	r3, r2
 8008540:	d902      	bls.n	8008548 <find_volume+0x3ec>
 8008542:	2303      	movs	r3, #3
 8008544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	3302      	adds	r3, #2
 800854c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008552:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855a:	461a      	mov	r2, r3
 800855c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800855e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008560:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008564:	4413      	add	r3, r2
 8008566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800856c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800856e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	4413      	add	r3, r2
 8008574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800857a:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800857c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008580:	2b03      	cmp	r3, #3
 8008582:	d124      	bne.n	80085ce <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858a:	891b      	ldrh	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <find_volume+0x438>
 8008590:	230d      	movs	r3, #13
 8008592:	e108      	b.n	80087a6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800859a:	061a      	lsls	r2, r3, #24
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	4313      	orrs	r3, r2
 80085a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80085ac:	0212      	lsls	r2, r2, #8
 80085ae:	4313      	orrs	r3, r2
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80085b6:	4313      	orrs	r3, r2
 80085b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085be:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	647b      	str	r3, [r7, #68]	; 0x44
 80085cc:	e02b      	b.n	8008626 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d4:	891b      	ldrh	r3, [r3, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <find_volume+0x482>
 80085da:	230d      	movs	r3, #13
 80085dc:	e0e3      	b.n	80087a6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e4:	6a1a      	ldr	r2, [r3, #32]
 80085e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e8:	4413      	add	r3, r2
 80085ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085f0:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80085f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d105      	bne.n	8008606 <find_volume+0x4aa>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	e00e      	b.n	8008624 <find_volume+0x4c8>
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	4613      	mov	r3, r2
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	4413      	add	r3, r2
 8008614:	085a      	lsrs	r2, r3, #1
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008624:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	895b      	ldrh	r3, [r3, #10]
 8008636:	4619      	mov	r1, r3
 8008638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863a:	440b      	add	r3, r1
 800863c:	3b01      	subs	r3, #1
 800863e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008640:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008644:	8949      	ldrh	r1, [r1, #10]
 8008646:	fbb3 f3f1 	udiv	r3, r3, r1
 800864a:	429a      	cmp	r2, r3
 800864c:	d201      	bcs.n	8008652 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800864e:	230d      	movs	r3, #13
 8008650:	e0a9      	b.n	80087a6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008658:	461a      	mov	r2, r3
 800865a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865e:	6113      	str	r3, [r2, #16]
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800866a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800866e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008676:	2280      	movs	r2, #128	; 0x80
 8008678:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800867a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800867e:	2b03      	cmp	r3, #3
 8008680:	d17a      	bne.n	8008778 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	b21a      	sxth	r2, r3
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008692:	b21b      	sxth	r3, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	b21b      	sxth	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d16d      	bne.n	8008778 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800869c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869e:	3301      	adds	r3, #1
 80086a0:	4619      	mov	r1, r3
 80086a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a4:	f7fd ff8c 	bl	80065c0 <move_window>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d164      	bne.n	8008778 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b4:	2200      	movs	r2, #0
 80086b6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	b21a      	sxth	r2, r3
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80086c8:	b21b      	sxth	r3, r3
 80086ca:	4313      	orrs	r3, r2
 80086cc:	b21b      	sxth	r3, r3
 80086ce:	4a38      	ldr	r2, [pc, #224]	; (80087b0 <find_volume+0x654>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d151      	bne.n	8008778 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	78db      	ldrb	r3, [r3, #3]
 80086d8:	061a      	lsls	r2, r3, #24
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	789b      	ldrb	r3, [r3, #2]
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	4313      	orrs	r3, r2
 80086e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086e4:	7852      	ldrb	r2, [r2, #1]
 80086e6:	0212      	lsls	r2, r2, #8
 80086e8:	4313      	orrs	r3, r2
 80086ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	4a30      	ldr	r2, [pc, #192]	; (80087b4 <find_volume+0x658>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d140      	bne.n	8008778 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80086fc:	061a      	lsls	r2, r3, #24
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	4313      	orrs	r3, r2
 8008708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800870a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800870e:	0212      	lsls	r2, r2, #8
 8008710:	4313      	orrs	r3, r2
 8008712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008714:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008718:	4313      	orrs	r3, r2
 800871a:	4a27      	ldr	r2, [pc, #156]	; (80087b8 <find_volume+0x65c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d12b      	bne.n	8008778 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008726:	061a      	lsls	r2, r3, #24
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	4313      	orrs	r3, r2
 8008732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008734:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008738:	0212      	lsls	r2, r2, #8
 800873a:	4313      	orrs	r3, r2
 800873c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800873e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008742:	4313      	orrs	r3, r2
 8008744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800874a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008752:	061a      	lsls	r2, r3, #24
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	4313      	orrs	r3, r2
 800875e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008760:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008764:	0212      	lsls	r2, r2, #8
 8008766:	4313      	orrs	r3, r2
 8008768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800876e:	4313      	orrs	r3, r2
 8008770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008776:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877e:	461a      	mov	r2, r3
 8008780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008784:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008786:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <find_volume+0x660>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <find_volume+0x660>)
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <find_volume+0x660>)
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800879e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087a0:	f7fd fe92 	bl	80064c8 <clear_lock>
#endif

	return FR_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3758      	adds	r7, #88	; 0x58
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	ffffaa55 	.word	0xffffaa55
 80087b4:	41615252 	.word	0x41615252
 80087b8:	61417272 	.word	0x61417272
 80087bc:	20002880 	.word	0x20002880

080087c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d02a      	beq.n	8008828 <validate+0x68>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d024      	beq.n	8008828 <validate+0x68>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <validate+0x68>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fc:	88da      	ldrh	r2, [r3, #6]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008804:	889b      	ldrh	r3, [r3, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d10e      	bne.n	8008828 <validate+0x68>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	4618      	mov	r0, r3
 800881a:	f7fd fbab 	bl	8005f74 <disk_status>
 800881e:	4603      	mov	r3, r0
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008828:	2309      	movs	r3, #9
 800882a:	e000      	b.n	800882e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800884a:	f107 0310 	add.w	r3, r7, #16
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fbd2 	bl	8007ff8 <get_ldnumber>
 8008854:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2b00      	cmp	r3, #0
 800885a:	da01      	bge.n	8008860 <f_mount+0x28>
 800885c:	230b      	movs	r3, #11
 800885e:	e02f      	b.n	80088c0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008860:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <f_mount+0x90>)
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008868:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008870:	69b8      	ldr	r0, [r7, #24]
 8008872:	f7fd fe29 	bl	80064c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d004      	beq.n	8008890 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	490d      	ldr	r1, [pc, #52]	; (80088c8 <f_mount+0x90>)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <f_mount+0x6e>
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d001      	beq.n	80088aa <f_mount+0x72>
 80088a6:	2300      	movs	r3, #0
 80088a8:	e00a      	b.n	80088c0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80088aa:	f107 0108 	add.w	r1, r7, #8
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	2200      	movs	r2, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fc51 	bl	800815c <find_volume>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3720      	adds	r7, #32
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	2000287c 	.word	0x2000287c

080088cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088da:	f843 0c4c 	str.w	r0, [r3, #-76]
 80088de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088e2:	f843 1c50 	str.w	r1, [r3, #-80]
 80088e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088ea:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80088ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <f_open+0x32>
 80088fa:	2309      	movs	r3, #9
 80088fc:	e2f7      	b.n	8008eee <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 80088fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008902:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890a:	461a      	mov	r2, r3
 800890c:	2300      	movs	r3, #0
 800890e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008910:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008914:	461a      	mov	r2, r3
 8008916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800891a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800892a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	f107 0118 	add.w	r1, r7, #24
 8008938:	3910      	subs	r1, #16
 800893a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800893e:	3b18      	subs	r3, #24
 8008940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fc09 	bl	800815c <find_volume>
 800894a:	4603      	mov	r3, r0
 800894c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008950:	f102 0217 	add.w	r2, r2, #23
 8008954:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008956:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800895a:	f103 0317 	add.w	r3, r3, #23
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 82bf 	bne.w	8008ee4 <f_open+0x618>
		INIT_BUF(dj);
 8008966:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800896a:	461a      	mov	r2, r3
 800896c:	f107 0318 	add.w	r3, r7, #24
 8008970:	3b04      	subs	r3, #4
 8008972:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8008976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800897a:	461a      	mov	r2, r3
 800897c:	4bd4      	ldr	r3, [pc, #848]	; (8008cd0 <f_open+0x404>)
 800897e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8008982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008986:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800898a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800898e:	3b18      	subs	r3, #24
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff faba 	bl	8007f0c <follow_path>
 8008998:	4603      	mov	r3, r0
 800899a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800899e:	f102 0217 	add.w	r2, r2, #23
 80089a2:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80089a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089a8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80089ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089b0:	f102 0210 	add.w	r2, r2, #16
 80089b4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80089b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089ba:	f103 0317 	add.w	r3, r3, #23
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d126      	bne.n	8008a12 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 80089c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089c8:	f103 0310 	add.w	r3, r3, #16
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <f_open+0x114>
				res = FR_INVALID_NAME;
 80089d2:	2306      	movs	r3, #6
 80089d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089d8:	f102 0217 	add.w	r2, r2, #23
 80089dc:	7013      	strb	r3, [r2, #0]
 80089de:	e018      	b.n	8008a12 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089e4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bf14      	ite	ne
 80089f0:	2301      	movne	r3, #1
 80089f2:	2300      	moveq	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089fc:	3b18      	subs	r3, #24
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fd fbcd 	bl	80061a0 <chk_lock>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a0c:	f102 0217 	add.w	r2, r2, #23
 8008a10:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a16:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008a1a:	f003 031c 	and.w	r3, r3, #28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 813c 	beq.w	8008c9c <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8008a24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a28:	f103 0317 	add.w	r3, r3, #23
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d02e      	beq.n	8008a90 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008a32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a36:	f103 0317 	add.w	r3, r3, #23
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d112      	bne.n	8008a66 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a40:	f7fd fc1e 	bl	8006280 <enq_lock>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <f_open+0x18e>
 8008a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a4e:	3b18      	subs	r3, #24
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe ff79 	bl	8007948 <dir_register>
 8008a56:	4603      	mov	r3, r0
 8008a58:	e000      	b.n	8008a5c <f_open+0x190>
 8008a5a:	2312      	movs	r3, #18
 8008a5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a60:	f102 0217 	add.w	r2, r2, #23
 8008a64:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a70:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008a74:	f043 0308 	orr.w	r3, r3, #8
 8008a78:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8008a7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a80:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8008a84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a88:	f102 0210 	add.w	r2, r2, #16
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	e01f      	b.n	8008ad0 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a94:	f103 0310 	add.w	r3, r3, #16
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	330b      	adds	r3, #11
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f003 0311 	and.w	r3, r3, #17
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d006      	beq.n	8008ab4 <f_open+0x1e8>
					res = FR_DENIED;
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008aac:	f102 0217 	add.w	r2, r2, #23
 8008ab0:	7013      	strb	r3, [r2, #0]
 8008ab2:	e00d      	b.n	8008ad0 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008ab4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ab8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <f_open+0x204>
						res = FR_EXIST;
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008aca:	f102 0217 	add.w	r2, r2, #23
 8008ace:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ad0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ad4:	f103 0317 	add.w	r3, r3, #23
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 8113 	bne.w	8008d06 <f_open+0x43a>
 8008ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ae4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 810a 	beq.w	8008d06 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8008af2:	f7fd f9dd 	bl	8005eb0 <get_fattime>
 8008af6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008afa:	f103 030c 	add.w	r3, r3, #12
 8008afe:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008b00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b04:	f103 0310 	add.w	r3, r3, #16
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330e      	adds	r3, #14
 8008b0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b10:	f102 020c 	add.w	r2, r2, #12
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b1e:	f103 030c 	add.w	r3, r3, #12
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b2e:	f103 0310 	add.w	r3, r3, #16
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330f      	adds	r3, #15
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b3e:	f103 030c 	add.w	r3, r3, #12
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	0c1a      	lsrs	r2, r3, #16
 8008b46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b4a:	f103 0310 	add.w	r3, r3, #16
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3310      	adds	r3, #16
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b5a:	f103 030c 	add.w	r3, r3, #12
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0e1a      	lsrs	r2, r3, #24
 8008b62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b66:	f103 0310 	add.w	r3, r3, #16
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3311      	adds	r3, #17
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008b72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b76:	f103 0310 	add.w	r3, r3, #16
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330b      	adds	r3, #11
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008b82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b86:	f103 0310 	add.w	r3, r3, #16
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	331c      	adds	r3, #28
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
 8008b92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b96:	f103 0310 	add.w	r3, r3, #16
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	331d      	adds	r3, #29
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ba6:	f103 0310 	add.w	r3, r3, #16
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	331e      	adds	r3, #30
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bb6:	f103 0310 	add.w	r3, r3, #16
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	331f      	adds	r3, #31
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bc6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008bca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008bce:	f102 0210 	add.w	r2, r2, #16
 8008bd2:	6811      	ldr	r1, [r2, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fc06 	bl	80073e6 <ld_clust>
 8008bda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bde:	f103 0308 	add.w	r3, r3, #8
 8008be2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008be4:	2100      	movs	r1, #0
 8008be6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bea:	f103 0310 	add.w	r3, r3, #16
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	f7fe fc27 	bl	8007442 <st_clust>
				dj.fs->wflag = 1;
 8008bf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bf8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c00:	2201      	movs	r2, #1
 8008c02:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008c04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c08:	f103 0308 	add.w	r3, r3, #8
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d079      	beq.n	8008d06 <f_open+0x43a>
					dw = dj.fs->winsect;
 8008c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c16:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c24:	f102 020c 	add.w	r2, r2, #12
 8008c28:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008c2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c2e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c36:	f102 0208 	add.w	r2, r2, #8
 8008c3a:	6811      	ldr	r1, [r2, #0]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe f823 	bl	8006c88 <remove_chain>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c48:	f102 0217 	add.w	r2, r2, #23
 8008c4c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008c4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c52:	f103 0317 	add.w	r3, r3, #23
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d154      	bne.n	8008d06 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008c5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c60:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8008c64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c68:	f103 0308 	add.w	r3, r3, #8
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c74:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8008c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c7a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c7e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c82:	f102 020c 	add.w	r2, r2, #12
 8008c86:	6811      	ldr	r1, [r2, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fd fc99 	bl	80065c0 <move_window>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c94:	f102 0217 	add.w	r2, r2, #23
 8008c98:	7013      	strb	r3, [r2, #0]
 8008c9a:	e034      	b.n	8008d06 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008c9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ca0:	f103 0317 	add.w	r3, r3, #23
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d12d      	bne.n	8008d06 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008caa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cae:	f103 0310 	add.w	r3, r3, #16
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	330b      	adds	r3, #11
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <f_open+0x408>
					res = FR_NO_FILE;
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cc6:	f102 0217 	add.w	r2, r2, #23
 8008cca:	7013      	strb	r3, [r2, #0]
 8008ccc:	e01b      	b.n	8008d06 <f_open+0x43a>
 8008cce:	bf00      	nop
 8008cd0:	2000289c 	.word	0x2000289c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008cd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cd8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <f_open+0x43a>
 8008ce4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ce8:	f103 0310 	add.w	r3, r3, #16
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	330b      	adds	r3, #11
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <f_open+0x43a>
						res = FR_DENIED;
 8008cfa:	2307      	movs	r3, #7
 8008cfc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d00:	f102 0217 	add.w	r2, r2, #23
 8008d04:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008d06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d0a:	f103 0317 	add.w	r3, r3, #23
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d157      	bne.n	8008dc4 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008d14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d18:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <f_open+0x46e>
				mode |= FA__WRITTEN;
 8008d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d2e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d32:	f043 0320 	orr.w	r3, r3, #32
 8008d36:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d3e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d4c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008d50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d54:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008d56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d62:	461a      	mov	r2, r3
 8008d64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d68:	f103 0310 	add.w	r3, r3, #16
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d74:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bf14      	ite	ne
 8008d80:	2301      	movne	r3, #1
 8008d82:	2300      	moveq	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d8c:	3b18      	subs	r3, #24
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fd fa99 	bl	80062c8 <inc_lock>
 8008d96:	4602      	mov	r2, r0
 8008d98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d9c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008da6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008daa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <f_open+0x4f8>
 8008db8:	2302      	movs	r3, #2
 8008dba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008dbe:	f102 0217 	add.w	r2, r2, #23
 8008dc2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008dc4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008dc8:	f103 0317 	add.w	r3, r3, #23
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f040 8088 	bne.w	8008ee4 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008dd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dd8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de0:	461a      	mov	r2, r3
 8008de2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008de6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008dea:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008df0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	2200      	movs	r2, #0
 8008dfa:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008dfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e00:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008e04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e08:	f102 0210 	add.w	r2, r2, #16
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fae9 	bl	80073e6 <ld_clust>
 8008e14:	4602      	mov	r2, r0
 8008e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e1a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e22:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008e24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e28:	f103 0310 	add.w	r3, r3, #16
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	331f      	adds	r3, #31
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	061a      	lsls	r2, r3, #24
 8008e34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e38:	f103 0310 	add.w	r3, r3, #16
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	331e      	adds	r3, #30
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e4a:	f102 0210 	add.w	r2, r2, #16
 8008e4e:	6812      	ldr	r2, [r2, #0]
 8008e50:	321d      	adds	r2, #29
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	0212      	lsls	r2, r2, #8
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e5c:	f102 0210 	add.w	r2, r2, #16
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	321c      	adds	r2, #28
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008e6c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008e70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e74:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008e76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e7a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e82:	461a      	mov	r2, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e8c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	461a      	mov	r2, r3
 8008e96:	2300      	movs	r3, #0
 8008e98:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008eac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008eb0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008eb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008eb8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ec0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ec6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed4:	88da      	ldrh	r2, [r3, #6]
 8008ed6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008eda:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008ee4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ee8:	f103 0317 	add.w	r3, r3, #23
 8008eec:	781b      	ldrb	r3, [r3, #0]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop

08008efc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fc53 	bl	80087c0 <validate>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <f_write+0x2c>
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	e21e      	b.n	8009366 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2e:	79db      	ldrb	r3, [r3, #7]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	79db      	ldrb	r3, [r3, #7]
 8008f3c:	e213      	b.n	8009366 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f44:	799b      	ldrb	r3, [r3, #6]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008f4e:	2307      	movs	r3, #7
 8008f50:	e209      	b.n	8009366 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	441a      	add	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	f080 81d9 	bcs.w	800931e <f_write+0x422>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008f70:	e1d5      	b.n	800931e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f86:	8952      	ldrh	r2, [r2, #10]
 8008f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f8c:	fb01 f202 	mul.w	r2, r1, r2
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f040 8169 	bne.w	800926a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fac:	8952      	ldrh	r2, [r2, #10]
 8008fae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc0:	789b      	ldrb	r3, [r3, #2]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008fca:	7dbb      	ldrb	r3, [r7, #22]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d15f      	bne.n	8009090 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d111      	bne.n	8009000 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d126      	bne.n	800903a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fea7 	bl	8006d4a <create_chain>
 8008ffc:	6278      	str	r0, [r7, #36]	; 0x24
 8008ffe:	e01c      	b.n	800903a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b00      	cmp	r3, #0
 800900a:	d009      	beq.n	8009020 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4619      	mov	r1, r3
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7fd ff3f 	bl	8006e9a <clmt_clust>
 800901c:	6278      	str	r0, [r7, #36]	; 0x24
 800901e:	e00c      	b.n	800903a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fd fe89 	bl	8006d4a <create_chain>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8173 	beq.w	8009328 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	2b01      	cmp	r3, #1
 8009046:	d106      	bne.n	8009056 <f_write+0x15a>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904e:	2202      	movs	r2, #2
 8009050:	71da      	strb	r2, [r3, #7]
 8009052:	2302      	movs	r3, #2
 8009054:	e187      	b.n	8009366 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905c:	d106      	bne.n	800906c <f_write+0x170>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	2201      	movs	r2, #1
 8009066:	71da      	strb	r2, [r3, #7]
 8009068:	2301      	movs	r3, #1
 800906a:	e17c      	b.n	8009366 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009072:	461a      	mov	r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <f_write+0x194>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908a:	461a      	mov	r2, r3
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009096:	799b      	ldrb	r3, [r3, #6]
 8009098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	d023      	beq.n	80090e8 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ac:	7858      	ldrb	r0, [r3, #1]
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	2301      	movs	r3, #1
 80090ba:	f7fc ffbb 	bl	8006034 <disk_write>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ca:	2201      	movs	r2, #1
 80090cc:	71da      	strb	r2, [r3, #7]
 80090ce:	2301      	movs	r3, #1
 80090d0:	e149      	b.n	8009366 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d8:	799b      	ldrb	r3, [r3, #6]
 80090da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e6:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7fd fb51 	bl	80067a2 <clust2sect>
 8009100:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <f_write+0x21a>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910e:	2202      	movs	r2, #2
 8009110:	71da      	strb	r2, [r3, #7]
 8009112:	2302      	movs	r3, #2
 8009114:	e127      	b.n	8009366 <f_write+0x46a>
			sect += csect;
 8009116:	7dbb      	ldrb	r3, [r7, #22]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	895b      	ldrh	r3, [r3, #10]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	fbb3 f3f2 	udiv	r3, r3, r2
 8009134:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d069      	beq.n	8009210 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800913c:	7dba      	ldrb	r2, [r7, #22]
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800914e:	7892      	ldrb	r2, [r2, #2]
 8009150:	4293      	cmp	r3, r2
 8009152:	d90a      	bls.n	800916a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009160:	789b      	ldrb	r3, [r3, #2]
 8009162:	461a      	mov	r2, r3
 8009164:	7dbb      	ldrb	r3, [r7, #22]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	7858      	ldrb	r0, [r3, #1]
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	69b9      	ldr	r1, [r7, #24]
 800917e:	f7fc ff59 	bl	8006034 <disk_write>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d006      	beq.n	8009196 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800918e:	2201      	movs	r2, #1
 8009190:	71da      	strb	r2, [r3, #7]
 8009192:	2301      	movs	r3, #1
 8009194:	e0e7      	b.n	8009366 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d926      	bls.n	80091f6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091bc:	6812      	ldr	r2, [r2, #0]
 80091be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091c2:	8952      	ldrh	r2, [r2, #10]
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	18d1      	adds	r1, r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d8:	895b      	ldrh	r3, [r3, #10]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7fc ff68 	bl	80060b0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e6:	799b      	ldrb	r3, [r3, #6]
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009202:	895b      	ldrh	r3, [r3, #10]
 8009204:	461a      	mov	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	623b      	str	r3, [r7, #32]
				continue;
 800920e:	e06e      	b.n	80092ee <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	429a      	cmp	r2, r3
 800921c:	d01f      	beq.n	800925e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	429a      	cmp	r2, r3
 8009230:	d215      	bcs.n	800925e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800923e:	7858      	ldrb	r0, [r3, #1]
 8009240:	68f9      	ldr	r1, [r7, #12]
 8009242:	2301      	movs	r3, #1
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	f7fc fed5 	bl	8005ff4 <disk_read>
 800924a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009256:	2201      	movs	r2, #1
 8009258:	71da      	strb	r2, [r3, #7]
 800925a:	2301      	movs	r3, #1
 800925c:	e083      	b.n	8009366 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009264:	461a      	mov	r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009276:	895b      	ldrh	r3, [r3, #10]
 8009278:	4618      	mov	r0, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800928e:	8952      	ldrh	r2, [r2, #10]
 8009290:	fbb3 f1f2 	udiv	r1, r3, r2
 8009294:	fb01 f202 	mul.w	r2, r1, r2
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	1ac3      	subs	r3, r0, r3
 800929c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d901      	bls.n	80092aa <f_write+0x3ae>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092be:	8952      	ldrh	r2, [r2, #10]
 80092c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c4:	fb01 f202 	mul.w	r2, r1, r2
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	6a3a      	ldr	r2, [r7, #32]
 80092d0:	69b9      	ldr	r1, [r7, #24]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fc feec 	bl	80060b0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092de:	799b      	ldrb	r3, [r3, #6]
 80092e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ec:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	4413      	add	r3, r2
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fc:	689a      	ldr	r2, [r3, #8]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	4413      	add	r3, r2
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009308:	6093      	str	r3, [r2, #8]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	441a      	add	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f47f ae26 	bne.w	8008f72 <f_write+0x76>
 8009326:	e000      	b.n	800932a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009328:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	429a      	cmp	r2, r3
 800933c:	d907      	bls.n	800934e <f_write+0x452>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800934c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009354:	799b      	ldrb	r3, [r3, #6]
 8009356:	f043 0320 	orr.w	r3, r3, #32
 800935a:	b2da      	uxtb	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009362:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3728      	adds	r7, #40	; 0x28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b086      	sub	sp, #24
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fa22 	bl	80087c0 <validate>
 800937c:	4603      	mov	r3, r0
 800937e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 80bc 	bne.w	8009500 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938e:	799b      	ldrb	r3, [r3, #6]
 8009390:	f003 0320 	and.w	r3, r3, #32
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80b3 	beq.w	8009500 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a0:	799b      	ldrb	r3, [r3, #6]
 80093a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01e      	beq.n	80093e8 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	7858      	ldrb	r0, [r3, #1]
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	2301      	movs	r3, #1
 80093c4:	f7fc fe36 	bl	8006034 <disk_write>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80093ce:	2301      	movs	r3, #1
 80093d0:	e097      	b.n	8009502 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d8:	799b      	ldrb	r3, [r3, #6]
 80093da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f7fd f8e0 	bl	80065c0 <move_window>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d17a      	bne.n	8009500 <f_sync+0x192>
				dir = fp->dir_ptr;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	330b      	adds	r3, #11
 8009418:	781a      	ldrb	r2, [r3, #0]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	330b      	adds	r3, #11
 800941e:	f042 0220 	orr.w	r2, r2, #32
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	331c      	adds	r3, #28
 8009432:	b2d2      	uxtb	r2, r2
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	b29b      	uxth	r3, r3
 8009440:	0a1b      	lsrs	r3, r3, #8
 8009442:	b29a      	uxth	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	331d      	adds	r3, #29
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	0c1a      	lsrs	r2, r3, #16
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	331e      	adds	r3, #30
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	0e1a      	lsrs	r2, r3, #24
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	331f      	adds	r3, #31
 800946c:	b2d2      	uxtb	r2, r2
 800946e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	4619      	mov	r1, r3
 800947a:	6938      	ldr	r0, [r7, #16]
 800947c:	f7fd ffe1 	bl	8007442 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009480:	f7fc fd16 	bl	8005eb0 <get_fattime>
 8009484:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	3316      	adds	r3, #22
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	b29b      	uxth	r3, r3
 8009494:	0a1b      	lsrs	r3, r3, #8
 8009496:	b29a      	uxth	r2, r3
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	3317      	adds	r3, #23
 800949c:	b2d2      	uxtb	r2, r2
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0c1a      	lsrs	r2, r3, #16
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3318      	adds	r3, #24
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	0e1a      	lsrs	r2, r3, #24
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	3319      	adds	r3, #25
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3312      	adds	r3, #18
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	3313      	adds	r3, #19
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	799b      	ldrb	r3, [r3, #6]
 80094d0:	f023 0320 	bic.w	r3, r3, #32
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094dc:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	2201      	movs	r2, #1
 80094ec:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fd f894 	bl	8006624 <sync_fs>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009500:	7dfb      	ldrb	r3, [r7, #23]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ff2b 	bl	800936e <f_sync>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d119      	bne.n	8009556 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff f94c 	bl	80087c0 <validate>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d111      	bne.n	8009556 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	4618      	mov	r0, r3
 800953c:	f7fc ff80 	bl	8006440 <dec_lock>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d105      	bne.n	8009556 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009550:	461a      	mov	r2, r3
 8009552:	2300      	movs	r3, #0
 8009554:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b090      	sub	sp, #64	; 0x40
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff f928 	bl	80087c0 <validate>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <f_lseek+0x24>
 800957e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009582:	e2da      	b.n	8009b3a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958a:	79db      	ldrb	r3, [r3, #7]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009596:	79db      	ldrb	r3, [r3, #7]
 8009598:	e2cf      	b.n	8009b3a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8124 	beq.w	80097f0 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ae:	d16c      	bne.n	800968a <f_lseek+0x12a>
			tbl = fp->cltbl;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	627a      	str	r2, [r7, #36]	; 0x24
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	2302      	movs	r3, #2
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d046      	beq.n	8009666 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	2300      	movs	r3, #0
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	3302      	adds	r3, #2
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	3301      	adds	r3, #1
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd f8f5 	bl	80067ea <get_fat>
 8009600:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	2b01      	cmp	r3, #1
 8009606:	d806      	bhi.n	8009616 <f_lseek+0xb6>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960e:	2202      	movs	r2, #2
 8009610:	71da      	strb	r2, [r3, #7]
 8009612:	2302      	movs	r3, #2
 8009614:	e291      	b.n	8009b3a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800961c:	d106      	bne.n	800962c <f_lseek+0xcc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009624:	2201      	movs	r2, #1
 8009626:	71da      	strb	r2, [r3, #7]
 8009628:	2301      	movs	r3, #1
 800962a:	e286      	b.n	8009b3a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009632:	429a      	cmp	r2, r3
 8009634:	d0d7      	beq.n	80095e6 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	429a      	cmp	r2, r3
 800963c:	d809      	bhi.n	8009652 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	1d1a      	adds	r2, r3, #4
 8009642:	627a      	str	r2, [r7, #36]	; 0x24
 8009644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	627a      	str	r2, [r7, #36]	; 0x24
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009662:	429a      	cmp	r2, r3
 8009664:	d3b8      	bcc.n	80095d8 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009670:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	429a      	cmp	r2, r3
 8009678:	d803      	bhi.n	8009682 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e259      	b.n	8009b36 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009682:	2311      	movs	r3, #17
 8009684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009688:	e255      	b.n	8009b36 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d904      	bls.n	80096a2 <f_lseek+0x142>
				ofs = fp->fsize;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a8:	461a      	mov	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 8240 	beq.w	8009b36 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7fd fbec 	bl	8006e9a <clmt_clust>
 80096c2:	4602      	mov	r2, r0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ca:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	4619      	mov	r1, r3
 80096de:	4610      	mov	r0, r2
 80096e0:	f7fd f85f 	bl	80067a2 <clust2sect>
 80096e4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <f_lseek+0x19a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f2:	2202      	movs	r2, #2
 80096f4:	71da      	strb	r2, [r3, #7]
 80096f6:	2302      	movs	r3, #2
 80096f8:	e21f      	b.n	8009b3a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800970a:	8952      	ldrh	r2, [r2, #10]
 800970c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009716:	6812      	ldr	r2, [r2, #0]
 8009718:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800971c:	7892      	ldrb	r2, [r2, #2]
 800971e:	3a01      	subs	r2, #1
 8009720:	4013      	ands	r3, r2
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	4413      	add	r3, r2
 8009726:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009736:	6812      	ldr	r2, [r2, #0]
 8009738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800973c:	8952      	ldrh	r2, [r2, #10]
 800973e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009742:	fb01 f202 	mul.w	r2, r1, r2
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 81f4 	beq.w	8009b36 <f_lseek+0x5d6>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	429a      	cmp	r2, r3
 800975a:	f000 81ec 	beq.w	8009b36 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009764:	799b      	ldrb	r3, [r3, #6]
 8009766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976a:	2b00      	cmp	r3, #0
 800976c:	d023      	beq.n	80097b6 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977a:	7858      	ldrb	r0, [r3, #1]
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	2301      	movs	r3, #1
 8009788:	f7fc fc54 	bl	8006034 <disk_write>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009798:	2201      	movs	r2, #1
 800979a:	71da      	strb	r2, [r3, #7]
 800979c:	2301      	movs	r3, #1
 800979e:	e1cc      	b.n	8009b3a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a6:	799b      	ldrb	r3, [r3, #6]
 80097a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b4:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c2:	7858      	ldrb	r0, [r3, #1]
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	2301      	movs	r3, #1
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	f7fc fc13 	bl	8005ff4 <disk_read>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d006      	beq.n	80097e2 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097da:	2201      	movs	r2, #1
 80097dc:	71da      	strb	r2, [r3, #7]
 80097de:	2301      	movs	r3, #1
 80097e0:	e1ab      	b.n	8009b3a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e8:	461a      	mov	r2, r3
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	6193      	str	r3, [r2, #24]
 80097ee:	e1a2      	b.n	8009b36 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d90c      	bls.n	8009818 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009804:	799b      	ldrb	r3, [r3, #6]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d104      	bne.n	8009818 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982c:	461a      	mov	r2, r3
 800982e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009830:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8100 	beq.w	8009a3a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009846:	789b      	ldrb	r3, [r3, #2]
 8009848:	461a      	mov	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009856:	895b      	ldrh	r3, [r3, #10]
 8009858:	fb02 f303 	mul.w	r3, r2, r3
 800985c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d021      	beq.n	80098a8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	1e5a      	subs	r2, r3, #1
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	fbb2 f2f3 	udiv	r2, r2, r3
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	1e59      	subs	r1, r3, #1
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009878:	429a      	cmp	r2, r3
 800987a:	d315      	bcc.n	80098a8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	425b      	negs	r3, r3
 8009884:	4013      	ands	r3, r2
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800988c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80098a6:	e031      	b.n	800990c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d123      	bne.n	8009900 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2100      	movs	r1, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fa41 	bl	8006d4a <create_chain>
 80098c8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d106      	bne.n	80098de <f_lseek+0x37e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	2202      	movs	r2, #2
 80098d8:	71da      	strb	r2, [r3, #7]
 80098da:	2302      	movs	r3, #2
 80098dc:	e12d      	b.n	8009b3a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e4:	d106      	bne.n	80098f4 <f_lseek+0x394>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ec:	2201      	movs	r2, #1
 80098ee:	71da      	strb	r2, [r3, #7]
 80098f0:	2301      	movs	r3, #1
 80098f2:	e122      	b.n	8009b3a <f_lseek+0x5da>
					fp->sclust = clst;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fa:	461a      	mov	r2, r3
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009906:	461a      	mov	r2, r3
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8093 	beq.w	8009a3a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009914:	e052      	b.n	80099bc <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991c:	799b      	ldrb	r3, [r3, #6]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00e      	beq.n	8009944 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd fa0a 	bl	8006d4a <create_chain>
 8009936:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10b      	bne.n	8009956 <f_lseek+0x3f6>
							ofs = bcs; break;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	e03f      	b.n	80099c4 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800994e:	4618      	mov	r0, r3
 8009950:	f7fc ff4b 	bl	80067ea <get_fat>
 8009954:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800995c:	d106      	bne.n	800996c <f_lseek+0x40c>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009964:	2201      	movs	r2, #1
 8009966:	71da      	strb	r2, [r3, #7]
 8009968:	2301      	movs	r3, #1
 800996a:	e0e6      	b.n	8009b3a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	2b01      	cmp	r3, #1
 8009970:	d909      	bls.n	8009986 <f_lseek+0x426>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009982:	429a      	cmp	r2, r3
 8009984:	d306      	bcc.n	8009994 <f_lseek+0x434>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998c:	2202      	movs	r2, #2
 800998e:	71da      	strb	r2, [r3, #7]
 8009990:	2302      	movs	r3, #2
 8009992:	e0d2      	b.n	8009b3a <f_lseek+0x5da>
					fp->clust = clst;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800999a:	461a      	mov	r2, r3
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099b2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d8a8      	bhi.n	8009916 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	4413      	add	r3, r2
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099d6:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	895b      	ldrh	r3, [r3, #10]
 80099e6:	461a      	mov	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80099ee:	fb01 f202 	mul.w	r2, r1, r2
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d020      	beq.n	8009a3a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fc fecd 	bl	80067a2 <clust2sect>
 8009a08:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d106      	bne.n	8009a1e <f_lseek+0x4be>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	2202      	movs	r2, #2
 8009a18:	71da      	strb	r2, [r3, #7]
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e08d      	b.n	8009b3a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a2a:	895b      	ldrh	r3, [r3, #10]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a36:	4413      	add	r3, r2
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a4e:	8952      	ldrh	r2, [r2, #10]
 8009a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a54:	fb01 f202 	mul.w	r2, r1, r2
 8009a58:	1a9b      	subs	r3, r3, r2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d04e      	beq.n	8009afc <f_lseek+0x59c>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d047      	beq.n	8009afc <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a72:	799b      	ldrb	r3, [r3, #6]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d023      	beq.n	8009ac4 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a88:	7858      	ldrb	r0, [r3, #1]
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a92:	699a      	ldr	r2, [r3, #24]
 8009a94:	2301      	movs	r3, #1
 8009a96:	f7fc facd 	bl	8006034 <disk_write>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d006      	beq.n	8009aae <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	71da      	strb	r2, [r3, #7]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e045      	b.n	8009b3a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab4:	799b      	ldrb	r3, [r3, #6]
 8009ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad0:	7858      	ldrb	r0, [r3, #1]
 8009ad2:	6879      	ldr	r1, [r7, #4]
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad8:	f7fc fa8c 	bl	8005ff4 <disk_read>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d006      	beq.n	8009af0 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae8:	2201      	movs	r2, #1
 8009aea:	71da      	strb	r2, [r3, #7]
 8009aec:	2301      	movs	r3, #1
 8009aee:	e024      	b.n	8009b3a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af6:	461a      	mov	r2, r3
 8009af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afa:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d912      	bls.n	8009b36 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b1e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b26:	799b      	ldrb	r3, [r3, #6]
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b34:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009b36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3740      	adds	r7, #64	; 0x40
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	2b0a      	cmp	r3, #10
 8009b52:	d103      	bne.n	8009b5c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009b54:	210d      	movs	r1, #13
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff fff3 	bl	8009b42 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	db25      	blt.n	8009bb4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	60fa      	str	r2, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b3c      	cmp	r3, #60	; 0x3c
 8009b7a:	dd12      	ble.n	8009ba2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f103 010c 	add.w	r1, r3, #12
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f107 0308 	add.w	r3, r7, #8
 8009b8c:	f7ff f9b6 	bl	8008efc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d101      	bne.n	8009b9c <putc_bfd+0x5a>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	e001      	b.n	8009ba0 <putc_bfd+0x5e>
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ba0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	609a      	str	r2, [r3, #8]
 8009bb2:	e000      	b.n	8009bb6 <putc_bfd+0x74>
	if (i < 0) return;
 8009bb4:	bf00      	nop
}
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b097      	sub	sp, #92	; 0x5c
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	613b      	str	r3, [r7, #16]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009bd2:	e009      	b.n	8009be8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	f107 030c 	add.w	r3, r7, #12
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff ffad 	bl	8009b42 <putc_bfd>
	while (*str)			/* Put the string */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1f1      	bne.n	8009bd4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	db15      	blt.n	8009c22 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	461c      	mov	r4, r3
 8009bfc:	f107 0208 	add.w	r2, r7, #8
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	f103 010c 	add.w	r1, r3, #12
 8009c08:	4613      	mov	r3, r2
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	f7ff f976 	bl	8008efc <f_write>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d101      	bne.n	8009c22 <f_puts+0x66>
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	e001      	b.n	8009c26 <f_puts+0x6a>
	return EOF;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	375c      	adds	r7, #92	; 0x5c
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd90      	pop	{r4, r7, pc}
	...

08009c30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009c46:	4b1e      	ldr	r3, [pc, #120]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c48:	7a5b      	ldrb	r3, [r3, #9]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d831      	bhi.n	8009cb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c50:	4b1b      	ldr	r3, [pc, #108]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c52:	7a5b      	ldrb	r3, [r3, #9]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	4b19      	ldr	r3, [pc, #100]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009c5e:	4b18      	ldr	r3, [pc, #96]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c60:	7a5b      	ldrb	r3, [r3, #9]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009c6e:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c70:	7a5b      	ldrb	r3, [r3, #9]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	79fa      	ldrb	r2, [r7, #7]
 8009c7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c80:	7a5b      	ldrb	r3, [r3, #9]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	b2d1      	uxtb	r1, r2
 8009c88:	4a0d      	ldr	r2, [pc, #52]	; (8009cc0 <FATFS_LinkDriverEx+0x90>)
 8009c8a:	7251      	strb	r1, [r2, #9]
 8009c8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c8e:	7dbb      	ldrb	r3, [r7, #22]
 8009c90:	3330      	adds	r3, #48	; 0x30
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	223a      	movs	r2, #58	; 0x3a
 8009c9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	222f      	movs	r2, #47	; 0x2f
 8009ca6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3303      	adds	r3, #3
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bc80      	pop	{r7}
 8009cbe:	4770      	bx	lr
 8009cc0:	20002a9c 	.word	0x20002a9c

08009cc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009cce:	2200      	movs	r2, #0
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ffac 	bl	8009c30 <FATFS_LinkDriverEx>
 8009cd8:	4603      	mov	r3, r0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf4:	d802      	bhi.n	8009cfc <ff_convert+0x18>
		c = chr;
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	81fb      	strh	r3, [r7, #14]
 8009cfa:	e025      	b.n	8009d48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009d02:	88fb      	ldrh	r3, [r7, #6]
 8009d04:	2bff      	cmp	r3, #255	; 0xff
 8009d06:	d805      	bhi.n	8009d14 <ff_convert+0x30>
 8009d08:	88fb      	ldrh	r3, [r7, #6]
 8009d0a:	3b80      	subs	r3, #128	; 0x80
 8009d0c:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <ff_convert+0x70>)
 8009d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d12:	e000      	b.n	8009d16 <ff_convert+0x32>
 8009d14:	2300      	movs	r3, #0
 8009d16:	81fb      	strh	r3, [r7, #14]
 8009d18:	e016      	b.n	8009d48 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	81fb      	strh	r3, [r7, #14]
 8009d1e:	e009      	b.n	8009d34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009d20:	89fb      	ldrh	r3, [r7, #14]
 8009d22:	4a0c      	ldr	r2, [pc, #48]	; (8009d54 <ff_convert+0x70>)
 8009d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d006      	beq.n	8009d3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009d2e:	89fb      	ldrh	r3, [r7, #14]
 8009d30:	3301      	adds	r3, #1
 8009d32:	81fb      	strh	r3, [r7, #14]
 8009d34:	89fb      	ldrh	r3, [r7, #14]
 8009d36:	2b7f      	cmp	r3, #127	; 0x7f
 8009d38:	d9f2      	bls.n	8009d20 <ff_convert+0x3c>
 8009d3a:	e000      	b.n	8009d3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009d3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009d3e:	89fb      	ldrh	r3, [r7, #14]
 8009d40:	3380      	adds	r3, #128	; 0x80
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009d48:	89fb      	ldrh	r3, [r7, #14]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bc80      	pop	{r7}
 8009d52:	4770      	bx	lr
 8009d54:	0800e6d4 	.word	0x0800e6d4

08009d58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e002      	b.n	8009d6e <ff_wtoupper+0x16>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	4a0f      	ldr	r2, [pc, #60]	; (8009dac <ff_wtoupper+0x54>)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d006      	beq.n	8009d88 <ff_wtoupper+0x30>
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <ff_wtoupper+0x54>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d82:	88fa      	ldrh	r2, [r7, #6]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d1ef      	bne.n	8009d68 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009d88:	4a08      	ldr	r2, [pc, #32]	; (8009dac <ff_wtoupper+0x54>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d004      	beq.n	8009d9e <ff_wtoupper+0x46>
 8009d94:	4a06      	ldr	r2, [pc, #24]	; (8009db0 <ff_wtoupper+0x58>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d9c:	e000      	b.n	8009da0 <ff_wtoupper+0x48>
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	0800e7d4 	.word	0x0800e7d4
 8009db0:	0800e9b4 	.word	0x0800e9b4

08009db4 <__cvt>:
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dba:	461f      	mov	r7, r3
 8009dbc:	bfbb      	ittet	lt
 8009dbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009dc2:	461f      	movlt	r7, r3
 8009dc4:	2300      	movge	r3, #0
 8009dc6:	232d      	movlt	r3, #45	; 0x2d
 8009dc8:	b088      	sub	sp, #32
 8009dca:	4614      	mov	r4, r2
 8009dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009dd0:	7013      	strb	r3, [r2, #0]
 8009dd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009dd8:	f023 0820 	bic.w	r8, r3, #32
 8009ddc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009de0:	d005      	beq.n	8009dee <__cvt+0x3a>
 8009de2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009de6:	d100      	bne.n	8009dea <__cvt+0x36>
 8009de8:	3501      	adds	r5, #1
 8009dea:	2302      	movs	r3, #2
 8009dec:	e000      	b.n	8009df0 <__cvt+0x3c>
 8009dee:	2303      	movs	r3, #3
 8009df0:	aa07      	add	r2, sp, #28
 8009df2:	9204      	str	r2, [sp, #16]
 8009df4:	aa06      	add	r2, sp, #24
 8009df6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009dfa:	e9cd 3500 	strd	r3, r5, [sp]
 8009dfe:	4622      	mov	r2, r4
 8009e00:	463b      	mov	r3, r7
 8009e02:	f001 f885 	bl	800af10 <_dtoa_r>
 8009e06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	d102      	bne.n	8009e14 <__cvt+0x60>
 8009e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e10:	07db      	lsls	r3, r3, #31
 8009e12:	d522      	bpl.n	8009e5a <__cvt+0xa6>
 8009e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e18:	eb06 0905 	add.w	r9, r6, r5
 8009e1c:	d110      	bne.n	8009e40 <__cvt+0x8c>
 8009e1e:	7833      	ldrb	r3, [r6, #0]
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	d10a      	bne.n	8009e3a <__cvt+0x86>
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f7f6 fdbc 	bl	80009a8 <__aeabi_dcmpeq>
 8009e30:	b918      	cbnz	r0, 8009e3a <__cvt+0x86>
 8009e32:	f1c5 0501 	rsb	r5, r5, #1
 8009e36:	f8ca 5000 	str.w	r5, [sl]
 8009e3a:	f8da 3000 	ldr.w	r3, [sl]
 8009e3e:	4499      	add	r9, r3
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	4620      	mov	r0, r4
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8009e4c:	b108      	cbz	r0, 8009e52 <__cvt+0x9e>
 8009e4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e52:	2230      	movs	r2, #48	; 0x30
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	454b      	cmp	r3, r9
 8009e58:	d307      	bcc.n	8009e6a <__cvt+0xb6>
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e60:	1b9b      	subs	r3, r3, r6
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	b008      	add	sp, #32
 8009e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6a:	1c59      	adds	r1, r3, #1
 8009e6c:	9107      	str	r1, [sp, #28]
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	e7f0      	b.n	8009e54 <__cvt+0xa0>

08009e72 <__exponent>:
 8009e72:	4603      	mov	r3, r0
 8009e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e76:	2900      	cmp	r1, #0
 8009e78:	f803 2b02 	strb.w	r2, [r3], #2
 8009e7c:	bfb6      	itet	lt
 8009e7e:	222d      	movlt	r2, #45	; 0x2d
 8009e80:	222b      	movge	r2, #43	; 0x2b
 8009e82:	4249      	neglt	r1, r1
 8009e84:	2909      	cmp	r1, #9
 8009e86:	7042      	strb	r2, [r0, #1]
 8009e88:	dd2a      	ble.n	8009ee0 <__exponent+0x6e>
 8009e8a:	f10d 0207 	add.w	r2, sp, #7
 8009e8e:	4617      	mov	r7, r2
 8009e90:	260a      	movs	r6, #10
 8009e92:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e96:	4694      	mov	ip, r2
 8009e98:	fb06 1415 	mls	r4, r6, r5, r1
 8009e9c:	3430      	adds	r4, #48	; 0x30
 8009e9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	2c63      	cmp	r4, #99	; 0x63
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009eac:	dcf1      	bgt.n	8009e92 <__exponent+0x20>
 8009eae:	3130      	adds	r1, #48	; 0x30
 8009eb0:	f1ac 0402 	sub.w	r4, ip, #2
 8009eb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009eb8:	4622      	mov	r2, r4
 8009eba:	1c41      	adds	r1, r0, #1
 8009ebc:	42ba      	cmp	r2, r7
 8009ebe:	d30a      	bcc.n	8009ed6 <__exponent+0x64>
 8009ec0:	f10d 0209 	add.w	r2, sp, #9
 8009ec4:	eba2 020c 	sub.w	r2, r2, ip
 8009ec8:	42bc      	cmp	r4, r7
 8009eca:	bf88      	it	hi
 8009ecc:	2200      	movhi	r2, #0
 8009ece:	4413      	add	r3, r2
 8009ed0:	1a18      	subs	r0, r3, r0
 8009ed2:	b003      	add	sp, #12
 8009ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009eda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ede:	e7ed      	b.n	8009ebc <__exponent+0x4a>
 8009ee0:	2330      	movs	r3, #48	; 0x30
 8009ee2:	3130      	adds	r1, #48	; 0x30
 8009ee4:	7083      	strb	r3, [r0, #2]
 8009ee6:	70c1      	strb	r1, [r0, #3]
 8009ee8:	1d03      	adds	r3, r0, #4
 8009eea:	e7f1      	b.n	8009ed0 <__exponent+0x5e>

08009eec <_printf_float>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	b091      	sub	sp, #68	; 0x44
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009ef8:	4616      	mov	r6, r2
 8009efa:	461f      	mov	r7, r3
 8009efc:	4605      	mov	r5, r0
 8009efe:	f000 fef3 	bl	800ace8 <_localeconv_r>
 8009f02:	6803      	ldr	r3, [r0, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	9309      	str	r3, [sp, #36]	; 0x24
 8009f08:	f7f6 f922 	bl	8000150 <strlen>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f10:	f8d8 3000 	ldr.w	r3, [r8]
 8009f14:	900a      	str	r0, [sp, #40]	; 0x28
 8009f16:	3307      	adds	r3, #7
 8009f18:	f023 0307 	bic.w	r3, r3, #7
 8009f1c:	f103 0208 	add.w	r2, r3, #8
 8009f20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f24:	f8d4 b000 	ldr.w	fp, [r4]
 8009f28:	f8c8 2000 	str.w	r2, [r8]
 8009f2c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009f30:	4652      	mov	r2, sl
 8009f32:	4643      	mov	r3, r8
 8009f34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f38:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f42:	4650      	mov	r0, sl
 8009f44:	4b9c      	ldr	r3, [pc, #624]	; (800a1b8 <_printf_float+0x2cc>)
 8009f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f48:	f7f6 fd60 	bl	8000a0c <__aeabi_dcmpun>
 8009f4c:	bb70      	cbnz	r0, 8009fac <_printf_float+0xc0>
 8009f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f52:	4650      	mov	r0, sl
 8009f54:	4b98      	ldr	r3, [pc, #608]	; (800a1b8 <_printf_float+0x2cc>)
 8009f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f58:	f7f6 fd3a 	bl	80009d0 <__aeabi_dcmple>
 8009f5c:	bb30      	cbnz	r0, 8009fac <_printf_float+0xc0>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	4650      	mov	r0, sl
 8009f64:	4641      	mov	r1, r8
 8009f66:	f7f6 fd29 	bl	80009bc <__aeabi_dcmplt>
 8009f6a:	b110      	cbz	r0, 8009f72 <_printf_float+0x86>
 8009f6c:	232d      	movs	r3, #45	; 0x2d
 8009f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f72:	4a92      	ldr	r2, [pc, #584]	; (800a1bc <_printf_float+0x2d0>)
 8009f74:	4b92      	ldr	r3, [pc, #584]	; (800a1c0 <_printf_float+0x2d4>)
 8009f76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f7a:	bf94      	ite	ls
 8009f7c:	4690      	movls	r8, r2
 8009f7e:	4698      	movhi	r8, r3
 8009f80:	2303      	movs	r3, #3
 8009f82:	f04f 0a00 	mov.w	sl, #0
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	f02b 0304 	bic.w	r3, fp, #4
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	4633      	mov	r3, r6
 8009f90:	4621      	mov	r1, r4
 8009f92:	4628      	mov	r0, r5
 8009f94:	9700      	str	r7, [sp, #0]
 8009f96:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f98:	f000 f9d6 	bl	800a348 <_printf_common>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f040 8090 	bne.w	800a0c2 <_printf_float+0x1d6>
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa6:	b011      	add	sp, #68	; 0x44
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	4652      	mov	r2, sl
 8009fae:	4643      	mov	r3, r8
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	f7f6 fd2a 	bl	8000a0c <__aeabi_dcmpun>
 8009fb8:	b148      	cbz	r0, 8009fce <_printf_float+0xe2>
 8009fba:	f1b8 0f00 	cmp.w	r8, #0
 8009fbe:	bfb8      	it	lt
 8009fc0:	232d      	movlt	r3, #45	; 0x2d
 8009fc2:	4a80      	ldr	r2, [pc, #512]	; (800a1c4 <_printf_float+0x2d8>)
 8009fc4:	bfb8      	it	lt
 8009fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fca:	4b7f      	ldr	r3, [pc, #508]	; (800a1c8 <_printf_float+0x2dc>)
 8009fcc:	e7d3      	b.n	8009f76 <_printf_float+0x8a>
 8009fce:	6863      	ldr	r3, [r4, #4]
 8009fd0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	d142      	bne.n	800a05e <_printf_float+0x172>
 8009fd8:	2306      	movs	r3, #6
 8009fda:	6063      	str	r3, [r4, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	9206      	str	r2, [sp, #24]
 8009fe0:	aa0e      	add	r2, sp, #56	; 0x38
 8009fe2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009fe6:	aa0d      	add	r2, sp, #52	; 0x34
 8009fe8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009fec:	9203      	str	r2, [sp, #12]
 8009fee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009ff2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	4628      	mov	r0, r5
 800a000:	4643      	mov	r3, r8
 800a002:	910b      	str	r1, [sp, #44]	; 0x2c
 800a004:	f7ff fed6 	bl	8009db4 <__cvt>
 800a008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a00a:	4680      	mov	r8, r0
 800a00c:	2947      	cmp	r1, #71	; 0x47
 800a00e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a010:	d108      	bne.n	800a024 <_printf_float+0x138>
 800a012:	1cc8      	adds	r0, r1, #3
 800a014:	db02      	blt.n	800a01c <_printf_float+0x130>
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	4299      	cmp	r1, r3
 800a01a:	dd40      	ble.n	800a09e <_printf_float+0x1b2>
 800a01c:	f1a9 0902 	sub.w	r9, r9, #2
 800a020:	fa5f f989 	uxtb.w	r9, r9
 800a024:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a028:	d81f      	bhi.n	800a06a <_printf_float+0x17e>
 800a02a:	464a      	mov	r2, r9
 800a02c:	3901      	subs	r1, #1
 800a02e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a032:	910d      	str	r1, [sp, #52]	; 0x34
 800a034:	f7ff ff1d 	bl	8009e72 <__exponent>
 800a038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a03a:	4682      	mov	sl, r0
 800a03c:	1813      	adds	r3, r2, r0
 800a03e:	2a01      	cmp	r2, #1
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	dc02      	bgt.n	800a04a <_printf_float+0x15e>
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	07d2      	lsls	r2, r2, #31
 800a048:	d501      	bpl.n	800a04e <_printf_float+0x162>
 800a04a:	3301      	adds	r3, #1
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a052:	2b00      	cmp	r3, #0
 800a054:	d09b      	beq.n	8009f8e <_printf_float+0xa2>
 800a056:	232d      	movs	r3, #45	; 0x2d
 800a058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a05c:	e797      	b.n	8009f8e <_printf_float+0xa2>
 800a05e:	2947      	cmp	r1, #71	; 0x47
 800a060:	d1bc      	bne.n	8009fdc <_printf_float+0xf0>
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1ba      	bne.n	8009fdc <_printf_float+0xf0>
 800a066:	2301      	movs	r3, #1
 800a068:	e7b7      	b.n	8009fda <_printf_float+0xee>
 800a06a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a06e:	d118      	bne.n	800a0a2 <_printf_float+0x1b6>
 800a070:	2900      	cmp	r1, #0
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	dd0b      	ble.n	800a08e <_printf_float+0x1a2>
 800a076:	6121      	str	r1, [r4, #16]
 800a078:	b913      	cbnz	r3, 800a080 <_printf_float+0x194>
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	07d0      	lsls	r0, r2, #31
 800a07e:	d502      	bpl.n	800a086 <_printf_float+0x19a>
 800a080:	3301      	adds	r3, #1
 800a082:	440b      	add	r3, r1
 800a084:	6123      	str	r3, [r4, #16]
 800a086:	f04f 0a00 	mov.w	sl, #0
 800a08a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a08c:	e7df      	b.n	800a04e <_printf_float+0x162>
 800a08e:	b913      	cbnz	r3, 800a096 <_printf_float+0x1aa>
 800a090:	6822      	ldr	r2, [r4, #0]
 800a092:	07d2      	lsls	r2, r2, #31
 800a094:	d501      	bpl.n	800a09a <_printf_float+0x1ae>
 800a096:	3302      	adds	r3, #2
 800a098:	e7f4      	b.n	800a084 <_printf_float+0x198>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e7f2      	b.n	800a084 <_printf_float+0x198>
 800a09e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0a4:	4299      	cmp	r1, r3
 800a0a6:	db05      	blt.n	800a0b4 <_printf_float+0x1c8>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	6121      	str	r1, [r4, #16]
 800a0ac:	07d8      	lsls	r0, r3, #31
 800a0ae:	d5ea      	bpl.n	800a086 <_printf_float+0x19a>
 800a0b0:	1c4b      	adds	r3, r1, #1
 800a0b2:	e7e7      	b.n	800a084 <_printf_float+0x198>
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	bfcc      	ite	gt
 800a0b8:	2201      	movgt	r2, #1
 800a0ba:	f1c1 0202 	rsble	r2, r1, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	e7e0      	b.n	800a084 <_printf_float+0x198>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	055a      	lsls	r2, r3, #21
 800a0c6:	d407      	bmi.n	800a0d8 <_printf_float+0x1ec>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	4642      	mov	r2, r8
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d12b      	bne.n	800a12e <_printf_float+0x242>
 800a0d6:	e764      	b.n	8009fa2 <_printf_float+0xb6>
 800a0d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a0dc:	f240 80dd 	bls.w	800a29a <_printf_float+0x3ae>
 800a0e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f7f6 fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d033      	beq.n	800a158 <_printf_float+0x26c>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	4a35      	ldr	r2, [pc, #212]	; (800a1cc <_printf_float+0x2e0>)
 800a0f8:	47b8      	blx	r7
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	f43f af51 	beq.w	8009fa2 <_printf_float+0xb6>
 800a100:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a104:	429a      	cmp	r2, r3
 800a106:	db02      	blt.n	800a10e <_printf_float+0x222>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07d8      	lsls	r0, r3, #31
 800a10c:	d50f      	bpl.n	800a12e <_printf_float+0x242>
 800a10e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	f43f af42 	beq.w	8009fa2 <_printf_float+0xb6>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 091a 	add.w	r9, r4, #26
 800a126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a128:	3b01      	subs	r3, #1
 800a12a:	4543      	cmp	r3, r8
 800a12c:	dc09      	bgt.n	800a142 <_printf_float+0x256>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	079b      	lsls	r3, r3, #30
 800a132:	f100 8104 	bmi.w	800a33e <_printf_float+0x452>
 800a136:	68e0      	ldr	r0, [r4, #12]
 800a138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a13a:	4298      	cmp	r0, r3
 800a13c:	bfb8      	it	lt
 800a13e:	4618      	movlt	r0, r3
 800a140:	e731      	b.n	8009fa6 <_printf_float+0xba>
 800a142:	2301      	movs	r3, #1
 800a144:	464a      	mov	r2, r9
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	f43f af28 	beq.w	8009fa2 <_printf_float+0xb6>
 800a152:	f108 0801 	add.w	r8, r8, #1
 800a156:	e7e6      	b.n	800a126 <_printf_float+0x23a>
 800a158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dc38      	bgt.n	800a1d0 <_printf_float+0x2e4>
 800a15e:	2301      	movs	r3, #1
 800a160:	4631      	mov	r1, r6
 800a162:	4628      	mov	r0, r5
 800a164:	4a19      	ldr	r2, [pc, #100]	; (800a1cc <_printf_float+0x2e0>)
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	f43f af1a 	beq.w	8009fa2 <_printf_float+0xb6>
 800a16e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a172:	4313      	orrs	r3, r2
 800a174:	d102      	bne.n	800a17c <_printf_float+0x290>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	07d9      	lsls	r1, r3, #31
 800a17a:	d5d8      	bpl.n	800a12e <_printf_float+0x242>
 800a17c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a180:	4631      	mov	r1, r6
 800a182:	4628      	mov	r0, r5
 800a184:	47b8      	blx	r7
 800a186:	3001      	adds	r0, #1
 800a188:	f43f af0b 	beq.w	8009fa2 <_printf_float+0xb6>
 800a18c:	f04f 0900 	mov.w	r9, #0
 800a190:	f104 0a1a 	add.w	sl, r4, #26
 800a194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a196:	425b      	negs	r3, r3
 800a198:	454b      	cmp	r3, r9
 800a19a:	dc01      	bgt.n	800a1a0 <_printf_float+0x2b4>
 800a19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19e:	e794      	b.n	800a0ca <_printf_float+0x1de>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4652      	mov	r2, sl
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f43f aef9 	beq.w	8009fa2 <_printf_float+0xb6>
 800a1b0:	f109 0901 	add.w	r9, r9, #1
 800a1b4:	e7ee      	b.n	800a194 <_printf_float+0x2a8>
 800a1b6:	bf00      	nop
 800a1b8:	7fefffff 	.word	0x7fefffff
 800a1bc:	0800eb94 	.word	0x0800eb94
 800a1c0:	0800eb98 	.word	0x0800eb98
 800a1c4:	0800eb9c 	.word	0x0800eb9c
 800a1c8:	0800eba0 	.word	0x0800eba0
 800a1cc:	0800eba4 	.word	0x0800eba4
 800a1d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	bfa8      	it	ge
 800a1d8:	461a      	movge	r2, r3
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	4691      	mov	r9, r2
 800a1de:	dc37      	bgt.n	800a250 <_printf_float+0x364>
 800a1e0:	f04f 0b00 	mov.w	fp, #0
 800a1e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e8:	f104 021a 	add.w	r2, r4, #26
 800a1ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a1f0:	ebaa 0309 	sub.w	r3, sl, r9
 800a1f4:	455b      	cmp	r3, fp
 800a1f6:	dc33      	bgt.n	800a260 <_printf_float+0x374>
 800a1f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	db3b      	blt.n	800a278 <_printf_float+0x38c>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	07da      	lsls	r2, r3, #31
 800a204:	d438      	bmi.n	800a278 <_printf_float+0x38c>
 800a206:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a20a:	eba2 0903 	sub.w	r9, r2, r3
 800a20e:	eba2 020a 	sub.w	r2, r2, sl
 800a212:	4591      	cmp	r9, r2
 800a214:	bfa8      	it	ge
 800a216:	4691      	movge	r9, r2
 800a218:	f1b9 0f00 	cmp.w	r9, #0
 800a21c:	dc34      	bgt.n	800a288 <_printf_float+0x39c>
 800a21e:	f04f 0800 	mov.w	r8, #0
 800a222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a226:	f104 0a1a 	add.w	sl, r4, #26
 800a22a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	eba3 0309 	sub.w	r3, r3, r9
 800a234:	4543      	cmp	r3, r8
 800a236:	f77f af7a 	ble.w	800a12e <_printf_float+0x242>
 800a23a:	2301      	movs	r3, #1
 800a23c:	4652      	mov	r2, sl
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	f43f aeac 	beq.w	8009fa2 <_printf_float+0xb6>
 800a24a:	f108 0801 	add.w	r8, r8, #1
 800a24e:	e7ec      	b.n	800a22a <_printf_float+0x33e>
 800a250:	4613      	mov	r3, r2
 800a252:	4631      	mov	r1, r6
 800a254:	4642      	mov	r2, r8
 800a256:	4628      	mov	r0, r5
 800a258:	47b8      	blx	r7
 800a25a:	3001      	adds	r0, #1
 800a25c:	d1c0      	bne.n	800a1e0 <_printf_float+0x2f4>
 800a25e:	e6a0      	b.n	8009fa2 <_printf_float+0xb6>
 800a260:	2301      	movs	r3, #1
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	920b      	str	r2, [sp, #44]	; 0x2c
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f ae99 	beq.w	8009fa2 <_printf_float+0xb6>
 800a270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a272:	f10b 0b01 	add.w	fp, fp, #1
 800a276:	e7b9      	b.n	800a1ec <_printf_float+0x300>
 800a278:	4631      	mov	r1, r6
 800a27a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	d1bf      	bne.n	800a206 <_printf_float+0x31a>
 800a286:	e68c      	b.n	8009fa2 <_printf_float+0xb6>
 800a288:	464b      	mov	r3, r9
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	eb08 020a 	add.w	r2, r8, sl
 800a292:	47b8      	blx	r7
 800a294:	3001      	adds	r0, #1
 800a296:	d1c2      	bne.n	800a21e <_printf_float+0x332>
 800a298:	e683      	b.n	8009fa2 <_printf_float+0xb6>
 800a29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a29c:	2a01      	cmp	r2, #1
 800a29e:	dc01      	bgt.n	800a2a4 <_printf_float+0x3b8>
 800a2a0:	07db      	lsls	r3, r3, #31
 800a2a2:	d539      	bpl.n	800a318 <_printf_float+0x42c>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f ae77 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f ae6f 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a2d0:	f7f6 fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 800a2d4:	b9d8      	cbnz	r0, 800a30e <_printf_float+0x422>
 800a2d6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800a2da:	f108 0201 	add.w	r2, r8, #1
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d10e      	bne.n	800a306 <_printf_float+0x41a>
 800a2e8:	e65b      	b.n	8009fa2 <_printf_float+0xb6>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	464a      	mov	r2, r9
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47b8      	blx	r7
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f43f ae54 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2fa:	f108 0801 	add.w	r8, r8, #1
 800a2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a300:	3b01      	subs	r3, #1
 800a302:	4543      	cmp	r3, r8
 800a304:	dcf1      	bgt.n	800a2ea <_printf_float+0x3fe>
 800a306:	4653      	mov	r3, sl
 800a308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a30c:	e6de      	b.n	800a0cc <_printf_float+0x1e0>
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	f104 091a 	add.w	r9, r4, #26
 800a316:	e7f2      	b.n	800a2fe <_printf_float+0x412>
 800a318:	2301      	movs	r3, #1
 800a31a:	4642      	mov	r2, r8
 800a31c:	e7df      	b.n	800a2de <_printf_float+0x3f2>
 800a31e:	2301      	movs	r3, #1
 800a320:	464a      	mov	r2, r9
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f ae3a 	beq.w	8009fa2 <_printf_float+0xb6>
 800a32e:	f108 0801 	add.w	r8, r8, #1
 800a332:	68e3      	ldr	r3, [r4, #12]
 800a334:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a336:	1a5b      	subs	r3, r3, r1
 800a338:	4543      	cmp	r3, r8
 800a33a:	dcf0      	bgt.n	800a31e <_printf_float+0x432>
 800a33c:	e6fb      	b.n	800a136 <_printf_float+0x24a>
 800a33e:	f04f 0800 	mov.w	r8, #0
 800a342:	f104 0919 	add.w	r9, r4, #25
 800a346:	e7f4      	b.n	800a332 <_printf_float+0x446>

0800a348 <_printf_common>:
 800a348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a34c:	4616      	mov	r6, r2
 800a34e:	4699      	mov	r9, r3
 800a350:	688a      	ldr	r2, [r1, #8]
 800a352:	690b      	ldr	r3, [r1, #16]
 800a354:	4607      	mov	r7, r0
 800a356:	4293      	cmp	r3, r2
 800a358:	bfb8      	it	lt
 800a35a:	4613      	movlt	r3, r2
 800a35c:	6033      	str	r3, [r6, #0]
 800a35e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a362:	460c      	mov	r4, r1
 800a364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a368:	b10a      	cbz	r2, 800a36e <_printf_common+0x26>
 800a36a:	3301      	adds	r3, #1
 800a36c:	6033      	str	r3, [r6, #0]
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	0699      	lsls	r1, r3, #26
 800a372:	bf42      	ittt	mi
 800a374:	6833      	ldrmi	r3, [r6, #0]
 800a376:	3302      	addmi	r3, #2
 800a378:	6033      	strmi	r3, [r6, #0]
 800a37a:	6825      	ldr	r5, [r4, #0]
 800a37c:	f015 0506 	ands.w	r5, r5, #6
 800a380:	d106      	bne.n	800a390 <_printf_common+0x48>
 800a382:	f104 0a19 	add.w	sl, r4, #25
 800a386:	68e3      	ldr	r3, [r4, #12]
 800a388:	6832      	ldr	r2, [r6, #0]
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	42ab      	cmp	r3, r5
 800a38e:	dc2b      	bgt.n	800a3e8 <_printf_common+0xa0>
 800a390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a394:	1e13      	subs	r3, r2, #0
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	bf18      	it	ne
 800a39a:	2301      	movne	r3, #1
 800a39c:	0692      	lsls	r2, r2, #26
 800a39e:	d430      	bmi.n	800a402 <_printf_common+0xba>
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a8:	47c0      	blx	r8
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d023      	beq.n	800a3f6 <_printf_common+0xae>
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	6922      	ldr	r2, [r4, #16]
 800a3b2:	f003 0306 	and.w	r3, r3, #6
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	bf14      	ite	ne
 800a3ba:	2500      	movne	r5, #0
 800a3bc:	6833      	ldreq	r3, [r6, #0]
 800a3be:	f04f 0600 	mov.w	r6, #0
 800a3c2:	bf08      	it	eq
 800a3c4:	68e5      	ldreq	r5, [r4, #12]
 800a3c6:	f104 041a 	add.w	r4, r4, #26
 800a3ca:	bf08      	it	eq
 800a3cc:	1aed      	subeq	r5, r5, r3
 800a3ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a3d2:	bf08      	it	eq
 800a3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	bfc4      	itt	gt
 800a3dc:	1a9b      	subgt	r3, r3, r2
 800a3de:	18ed      	addgt	r5, r5, r3
 800a3e0:	42b5      	cmp	r5, r6
 800a3e2:	d11a      	bne.n	800a41a <_printf_common+0xd2>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e008      	b.n	800a3fa <_printf_common+0xb2>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	47c0      	blx	r8
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d103      	bne.n	800a3fe <_printf_common+0xb6>
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fe:	3501      	adds	r5, #1
 800a400:	e7c1      	b.n	800a386 <_printf_common+0x3e>
 800a402:	2030      	movs	r0, #48	; 0x30
 800a404:	18e1      	adds	r1, r4, r3
 800a406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a410:	4422      	add	r2, r4
 800a412:	3302      	adds	r3, #2
 800a414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a418:	e7c2      	b.n	800a3a0 <_printf_common+0x58>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4622      	mov	r2, r4
 800a41e:	4649      	mov	r1, r9
 800a420:	4638      	mov	r0, r7
 800a422:	47c0      	blx	r8
 800a424:	3001      	adds	r0, #1
 800a426:	d0e6      	beq.n	800a3f6 <_printf_common+0xae>
 800a428:	3601      	adds	r6, #1
 800a42a:	e7d9      	b.n	800a3e0 <_printf_common+0x98>

0800a42c <_printf_i>:
 800a42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	7e0f      	ldrb	r7, [r1, #24]
 800a432:	4691      	mov	r9, r2
 800a434:	2f78      	cmp	r7, #120	; 0x78
 800a436:	4680      	mov	r8, r0
 800a438:	460c      	mov	r4, r1
 800a43a:	469a      	mov	sl, r3
 800a43c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a43e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a442:	d807      	bhi.n	800a454 <_printf_i+0x28>
 800a444:	2f62      	cmp	r7, #98	; 0x62
 800a446:	d80a      	bhi.n	800a45e <_printf_i+0x32>
 800a448:	2f00      	cmp	r7, #0
 800a44a:	f000 80d5 	beq.w	800a5f8 <_printf_i+0x1cc>
 800a44e:	2f58      	cmp	r7, #88	; 0x58
 800a450:	f000 80c1 	beq.w	800a5d6 <_printf_i+0x1aa>
 800a454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a45c:	e03a      	b.n	800a4d4 <_printf_i+0xa8>
 800a45e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a462:	2b15      	cmp	r3, #21
 800a464:	d8f6      	bhi.n	800a454 <_printf_i+0x28>
 800a466:	a101      	add	r1, pc, #4	; (adr r1, 800a46c <_printf_i+0x40>)
 800a468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4d9 	.word	0x0800a4d9
 800a474:	0800a455 	.word	0x0800a455
 800a478:	0800a455 	.word	0x0800a455
 800a47c:	0800a455 	.word	0x0800a455
 800a480:	0800a455 	.word	0x0800a455
 800a484:	0800a4d9 	.word	0x0800a4d9
 800a488:	0800a455 	.word	0x0800a455
 800a48c:	0800a455 	.word	0x0800a455
 800a490:	0800a455 	.word	0x0800a455
 800a494:	0800a455 	.word	0x0800a455
 800a498:	0800a5df 	.word	0x0800a5df
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a599 	.word	0x0800a599
 800a4a4:	0800a455 	.word	0x0800a455
 800a4a8:	0800a455 	.word	0x0800a455
 800a4ac:	0800a601 	.word	0x0800a601
 800a4b0:	0800a455 	.word	0x0800a455
 800a4b4:	0800a505 	.word	0x0800a505
 800a4b8:	0800a455 	.word	0x0800a455
 800a4bc:	0800a455 	.word	0x0800a455
 800a4c0:	0800a5a1 	.word	0x0800a5a1
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	602a      	str	r2, [r5, #0]
 800a4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e0a0      	b.n	800a61a <_printf_i+0x1ee>
 800a4d8:	6820      	ldr	r0, [r4, #0]
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	0607      	lsls	r7, r0, #24
 800a4de:	f103 0104 	add.w	r1, r3, #4
 800a4e2:	6029      	str	r1, [r5, #0]
 800a4e4:	d501      	bpl.n	800a4ea <_printf_i+0xbe>
 800a4e6:	681e      	ldr	r6, [r3, #0]
 800a4e8:	e003      	b.n	800a4f2 <_printf_i+0xc6>
 800a4ea:	0646      	lsls	r6, r0, #25
 800a4ec:	d5fb      	bpl.n	800a4e6 <_printf_i+0xba>
 800a4ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	da03      	bge.n	800a4fe <_printf_i+0xd2>
 800a4f6:	232d      	movs	r3, #45	; 0x2d
 800a4f8:	4276      	negs	r6, r6
 800a4fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4fe:	230a      	movs	r3, #10
 800a500:	4859      	ldr	r0, [pc, #356]	; (800a668 <_printf_i+0x23c>)
 800a502:	e012      	b.n	800a52a <_printf_i+0xfe>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	1d19      	adds	r1, r3, #4
 800a50a:	6029      	str	r1, [r5, #0]
 800a50c:	0605      	lsls	r5, r0, #24
 800a50e:	d501      	bpl.n	800a514 <_printf_i+0xe8>
 800a510:	681e      	ldr	r6, [r3, #0]
 800a512:	e002      	b.n	800a51a <_printf_i+0xee>
 800a514:	0641      	lsls	r1, r0, #25
 800a516:	d5fb      	bpl.n	800a510 <_printf_i+0xe4>
 800a518:	881e      	ldrh	r6, [r3, #0]
 800a51a:	2f6f      	cmp	r7, #111	; 0x6f
 800a51c:	bf0c      	ite	eq
 800a51e:	2308      	moveq	r3, #8
 800a520:	230a      	movne	r3, #10
 800a522:	4851      	ldr	r0, [pc, #324]	; (800a668 <_printf_i+0x23c>)
 800a524:	2100      	movs	r1, #0
 800a526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a52a:	6865      	ldr	r5, [r4, #4]
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	bfa8      	it	ge
 800a530:	6821      	ldrge	r1, [r4, #0]
 800a532:	60a5      	str	r5, [r4, #8]
 800a534:	bfa4      	itt	ge
 800a536:	f021 0104 	bicge.w	r1, r1, #4
 800a53a:	6021      	strge	r1, [r4, #0]
 800a53c:	b90e      	cbnz	r6, 800a542 <_printf_i+0x116>
 800a53e:	2d00      	cmp	r5, #0
 800a540:	d04b      	beq.n	800a5da <_printf_i+0x1ae>
 800a542:	4615      	mov	r5, r2
 800a544:	fbb6 f1f3 	udiv	r1, r6, r3
 800a548:	fb03 6711 	mls	r7, r3, r1, r6
 800a54c:	5dc7      	ldrb	r7, [r0, r7]
 800a54e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a552:	4637      	mov	r7, r6
 800a554:	42bb      	cmp	r3, r7
 800a556:	460e      	mov	r6, r1
 800a558:	d9f4      	bls.n	800a544 <_printf_i+0x118>
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d10b      	bne.n	800a576 <_printf_i+0x14a>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	07de      	lsls	r6, r3, #31
 800a562:	d508      	bpl.n	800a576 <_printf_i+0x14a>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	6861      	ldr	r1, [r4, #4]
 800a568:	4299      	cmp	r1, r3
 800a56a:	bfde      	ittt	le
 800a56c:	2330      	movle	r3, #48	; 0x30
 800a56e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a572:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a576:	1b52      	subs	r2, r2, r5
 800a578:	6122      	str	r2, [r4, #16]
 800a57a:	464b      	mov	r3, r9
 800a57c:	4621      	mov	r1, r4
 800a57e:	4640      	mov	r0, r8
 800a580:	f8cd a000 	str.w	sl, [sp]
 800a584:	aa03      	add	r2, sp, #12
 800a586:	f7ff fedf 	bl	800a348 <_printf_common>
 800a58a:	3001      	adds	r0, #1
 800a58c:	d14a      	bne.n	800a624 <_printf_i+0x1f8>
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a592:	b004      	add	sp, #16
 800a594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	f043 0320 	orr.w	r3, r3, #32
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	2778      	movs	r7, #120	; 0x78
 800a5a2:	4832      	ldr	r0, [pc, #200]	; (800a66c <_printf_i+0x240>)
 800a5a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	6829      	ldr	r1, [r5, #0]
 800a5ac:	061f      	lsls	r7, r3, #24
 800a5ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5b2:	d402      	bmi.n	800a5ba <_printf_i+0x18e>
 800a5b4:	065f      	lsls	r7, r3, #25
 800a5b6:	bf48      	it	mi
 800a5b8:	b2b6      	uxthmi	r6, r6
 800a5ba:	07df      	lsls	r7, r3, #31
 800a5bc:	bf48      	it	mi
 800a5be:	f043 0320 	orrmi.w	r3, r3, #32
 800a5c2:	6029      	str	r1, [r5, #0]
 800a5c4:	bf48      	it	mi
 800a5c6:	6023      	strmi	r3, [r4, #0]
 800a5c8:	b91e      	cbnz	r6, 800a5d2 <_printf_i+0x1a6>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	f023 0320 	bic.w	r3, r3, #32
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	e7a6      	b.n	800a524 <_printf_i+0xf8>
 800a5d6:	4824      	ldr	r0, [pc, #144]	; (800a668 <_printf_i+0x23c>)
 800a5d8:	e7e4      	b.n	800a5a4 <_printf_i+0x178>
 800a5da:	4615      	mov	r5, r2
 800a5dc:	e7bd      	b.n	800a55a <_printf_i+0x12e>
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	6826      	ldr	r6, [r4, #0]
 800a5e2:	1d18      	adds	r0, r3, #4
 800a5e4:	6961      	ldr	r1, [r4, #20]
 800a5e6:	6028      	str	r0, [r5, #0]
 800a5e8:	0635      	lsls	r5, r6, #24
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	d501      	bpl.n	800a5f2 <_printf_i+0x1c6>
 800a5ee:	6019      	str	r1, [r3, #0]
 800a5f0:	e002      	b.n	800a5f8 <_printf_i+0x1cc>
 800a5f2:	0670      	lsls	r0, r6, #25
 800a5f4:	d5fb      	bpl.n	800a5ee <_printf_i+0x1c2>
 800a5f6:	8019      	strh	r1, [r3, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4615      	mov	r5, r2
 800a5fc:	6123      	str	r3, [r4, #16]
 800a5fe:	e7bc      	b.n	800a57a <_printf_i+0x14e>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	2100      	movs	r1, #0
 800a604:	1d1a      	adds	r2, r3, #4
 800a606:	602a      	str	r2, [r5, #0]
 800a608:	681d      	ldr	r5, [r3, #0]
 800a60a:	6862      	ldr	r2, [r4, #4]
 800a60c:	4628      	mov	r0, r5
 800a60e:	f000 fbe2 	bl	800add6 <memchr>
 800a612:	b108      	cbz	r0, 800a618 <_printf_i+0x1ec>
 800a614:	1b40      	subs	r0, r0, r5
 800a616:	6060      	str	r0, [r4, #4]
 800a618:	6863      	ldr	r3, [r4, #4]
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	2300      	movs	r3, #0
 800a61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a622:	e7aa      	b.n	800a57a <_printf_i+0x14e>
 800a624:	462a      	mov	r2, r5
 800a626:	4649      	mov	r1, r9
 800a628:	4640      	mov	r0, r8
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	47d0      	blx	sl
 800a62e:	3001      	adds	r0, #1
 800a630:	d0ad      	beq.n	800a58e <_printf_i+0x162>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	079b      	lsls	r3, r3, #30
 800a636:	d413      	bmi.n	800a660 <_printf_i+0x234>
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	4298      	cmp	r0, r3
 800a63e:	bfb8      	it	lt
 800a640:	4618      	movlt	r0, r3
 800a642:	e7a6      	b.n	800a592 <_printf_i+0x166>
 800a644:	2301      	movs	r3, #1
 800a646:	4632      	mov	r2, r6
 800a648:	4649      	mov	r1, r9
 800a64a:	4640      	mov	r0, r8
 800a64c:	47d0      	blx	sl
 800a64e:	3001      	adds	r0, #1
 800a650:	d09d      	beq.n	800a58e <_printf_i+0x162>
 800a652:	3501      	adds	r5, #1
 800a654:	68e3      	ldr	r3, [r4, #12]
 800a656:	9903      	ldr	r1, [sp, #12]
 800a658:	1a5b      	subs	r3, r3, r1
 800a65a:	42ab      	cmp	r3, r5
 800a65c:	dcf2      	bgt.n	800a644 <_printf_i+0x218>
 800a65e:	e7eb      	b.n	800a638 <_printf_i+0x20c>
 800a660:	2500      	movs	r5, #0
 800a662:	f104 0619 	add.w	r6, r4, #25
 800a666:	e7f5      	b.n	800a654 <_printf_i+0x228>
 800a668:	0800eba6 	.word	0x0800eba6
 800a66c:	0800ebb7 	.word	0x0800ebb7

0800a670 <_scanf_float>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	b087      	sub	sp, #28
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	688b      	ldr	r3, [r1, #8]
 800a67a:	4617      	mov	r7, r2
 800a67c:	1e5a      	subs	r2, r3, #1
 800a67e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a682:	bf85      	ittet	hi
 800a684:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a688:	195b      	addhi	r3, r3, r5
 800a68a:	2300      	movls	r3, #0
 800a68c:	9302      	strhi	r3, [sp, #8]
 800a68e:	bf88      	it	hi
 800a690:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a694:	468b      	mov	fp, r1
 800a696:	f04f 0500 	mov.w	r5, #0
 800a69a:	bf8c      	ite	hi
 800a69c:	608b      	strhi	r3, [r1, #8]
 800a69e:	9302      	strls	r3, [sp, #8]
 800a6a0:	680b      	ldr	r3, [r1, #0]
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a6a8:	f84b 3b1c 	str.w	r3, [fp], #28
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	465e      	mov	r6, fp
 800a6b0:	46aa      	mov	sl, r5
 800a6b2:	46a9      	mov	r9, r5
 800a6b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6b8:	9501      	str	r5, [sp, #4]
 800a6ba:	68a2      	ldr	r2, [r4, #8]
 800a6bc:	b152      	cbz	r2, 800a6d4 <_scanf_float+0x64>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b4e      	cmp	r3, #78	; 0x4e
 800a6c4:	d864      	bhi.n	800a790 <_scanf_float+0x120>
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d83c      	bhi.n	800a744 <_scanf_float+0xd4>
 800a6ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6ce:	b2c8      	uxtb	r0, r1
 800a6d0:	280e      	cmp	r0, #14
 800a6d2:	d93a      	bls.n	800a74a <_scanf_float+0xda>
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	d003      	beq.n	800a6e2 <_scanf_float+0x72>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6e6:	f1ba 0f01 	cmp.w	sl, #1
 800a6ea:	f200 8113 	bhi.w	800a914 <_scanf_float+0x2a4>
 800a6ee:	455e      	cmp	r6, fp
 800a6f0:	f200 8105 	bhi.w	800a8fe <_scanf_float+0x28e>
 800a6f4:	2501      	movs	r5, #1
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	b007      	add	sp, #28
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a702:	2a0d      	cmp	r2, #13
 800a704:	d8e6      	bhi.n	800a6d4 <_scanf_float+0x64>
 800a706:	a101      	add	r1, pc, #4	; (adr r1, 800a70c <_scanf_float+0x9c>)
 800a708:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a70c:	0800a84b 	.word	0x0800a84b
 800a710:	0800a6d5 	.word	0x0800a6d5
 800a714:	0800a6d5 	.word	0x0800a6d5
 800a718:	0800a6d5 	.word	0x0800a6d5
 800a71c:	0800a8ab 	.word	0x0800a8ab
 800a720:	0800a883 	.word	0x0800a883
 800a724:	0800a6d5 	.word	0x0800a6d5
 800a728:	0800a6d5 	.word	0x0800a6d5
 800a72c:	0800a859 	.word	0x0800a859
 800a730:	0800a6d5 	.word	0x0800a6d5
 800a734:	0800a6d5 	.word	0x0800a6d5
 800a738:	0800a6d5 	.word	0x0800a6d5
 800a73c:	0800a6d5 	.word	0x0800a6d5
 800a740:	0800a811 	.word	0x0800a811
 800a744:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a748:	e7db      	b.n	800a702 <_scanf_float+0x92>
 800a74a:	290e      	cmp	r1, #14
 800a74c:	d8c2      	bhi.n	800a6d4 <_scanf_float+0x64>
 800a74e:	a001      	add	r0, pc, #4	; (adr r0, 800a754 <_scanf_float+0xe4>)
 800a750:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a754:	0800a803 	.word	0x0800a803
 800a758:	0800a6d5 	.word	0x0800a6d5
 800a75c:	0800a803 	.word	0x0800a803
 800a760:	0800a897 	.word	0x0800a897
 800a764:	0800a6d5 	.word	0x0800a6d5
 800a768:	0800a7b1 	.word	0x0800a7b1
 800a76c:	0800a7ed 	.word	0x0800a7ed
 800a770:	0800a7ed 	.word	0x0800a7ed
 800a774:	0800a7ed 	.word	0x0800a7ed
 800a778:	0800a7ed 	.word	0x0800a7ed
 800a77c:	0800a7ed 	.word	0x0800a7ed
 800a780:	0800a7ed 	.word	0x0800a7ed
 800a784:	0800a7ed 	.word	0x0800a7ed
 800a788:	0800a7ed 	.word	0x0800a7ed
 800a78c:	0800a7ed 	.word	0x0800a7ed
 800a790:	2b6e      	cmp	r3, #110	; 0x6e
 800a792:	d809      	bhi.n	800a7a8 <_scanf_float+0x138>
 800a794:	2b60      	cmp	r3, #96	; 0x60
 800a796:	d8b2      	bhi.n	800a6fe <_scanf_float+0x8e>
 800a798:	2b54      	cmp	r3, #84	; 0x54
 800a79a:	d077      	beq.n	800a88c <_scanf_float+0x21c>
 800a79c:	2b59      	cmp	r3, #89	; 0x59
 800a79e:	d199      	bne.n	800a6d4 <_scanf_float+0x64>
 800a7a0:	2d07      	cmp	r5, #7
 800a7a2:	d197      	bne.n	800a6d4 <_scanf_float+0x64>
 800a7a4:	2508      	movs	r5, #8
 800a7a6:	e029      	b.n	800a7fc <_scanf_float+0x18c>
 800a7a8:	2b74      	cmp	r3, #116	; 0x74
 800a7aa:	d06f      	beq.n	800a88c <_scanf_float+0x21c>
 800a7ac:	2b79      	cmp	r3, #121	; 0x79
 800a7ae:	e7f6      	b.n	800a79e <_scanf_float+0x12e>
 800a7b0:	6821      	ldr	r1, [r4, #0]
 800a7b2:	05c8      	lsls	r0, r1, #23
 800a7b4:	d51a      	bpl.n	800a7ec <_scanf_float+0x17c>
 800a7b6:	9b02      	ldr	r3, [sp, #8]
 800a7b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7bc:	6021      	str	r1, [r4, #0]
 800a7be:	f109 0901 	add.w	r9, r9, #1
 800a7c2:	b11b      	cbz	r3, 800a7cc <_scanf_float+0x15c>
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	9302      	str	r3, [sp, #8]
 800a7ca:	60a2      	str	r2, [r4, #8]
 800a7cc:	68a3      	ldr	r3, [r4, #8]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	60a3      	str	r3, [r4, #8]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	6123      	str	r3, [r4, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	607b      	str	r3, [r7, #4]
 800a7e0:	f340 8084 	ble.w	800a8ec <_scanf_float+0x27c>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	603b      	str	r3, [r7, #0]
 800a7ea:	e766      	b.n	800a6ba <_scanf_float+0x4a>
 800a7ec:	eb1a 0f05 	cmn.w	sl, r5
 800a7f0:	f47f af70 	bne.w	800a6d4 <_scanf_float+0x64>
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	f806 3b01 	strb.w	r3, [r6], #1
 800a800:	e7e4      	b.n	800a7cc <_scanf_float+0x15c>
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	0610      	lsls	r0, r2, #24
 800a806:	f57f af65 	bpl.w	800a6d4 <_scanf_float+0x64>
 800a80a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a80e:	e7f4      	b.n	800a7fa <_scanf_float+0x18a>
 800a810:	f1ba 0f00 	cmp.w	sl, #0
 800a814:	d10e      	bne.n	800a834 <_scanf_float+0x1c4>
 800a816:	f1b9 0f00 	cmp.w	r9, #0
 800a81a:	d10e      	bne.n	800a83a <_scanf_float+0x1ca>
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a822:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a826:	d108      	bne.n	800a83a <_scanf_float+0x1ca>
 800a828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a82c:	f04f 0a01 	mov.w	sl, #1
 800a830:	6022      	str	r2, [r4, #0]
 800a832:	e7e3      	b.n	800a7fc <_scanf_float+0x18c>
 800a834:	f1ba 0f02 	cmp.w	sl, #2
 800a838:	d055      	beq.n	800a8e6 <_scanf_float+0x276>
 800a83a:	2d01      	cmp	r5, #1
 800a83c:	d002      	beq.n	800a844 <_scanf_float+0x1d4>
 800a83e:	2d04      	cmp	r5, #4
 800a840:	f47f af48 	bne.w	800a6d4 <_scanf_float+0x64>
 800a844:	3501      	adds	r5, #1
 800a846:	b2ed      	uxtb	r5, r5
 800a848:	e7d8      	b.n	800a7fc <_scanf_float+0x18c>
 800a84a:	f1ba 0f01 	cmp.w	sl, #1
 800a84e:	f47f af41 	bne.w	800a6d4 <_scanf_float+0x64>
 800a852:	f04f 0a02 	mov.w	sl, #2
 800a856:	e7d1      	b.n	800a7fc <_scanf_float+0x18c>
 800a858:	b97d      	cbnz	r5, 800a87a <_scanf_float+0x20a>
 800a85a:	f1b9 0f00 	cmp.w	r9, #0
 800a85e:	f47f af3c 	bne.w	800a6da <_scanf_float+0x6a>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a868:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a86c:	f47f af39 	bne.w	800a6e2 <_scanf_float+0x72>
 800a870:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a874:	2501      	movs	r5, #1
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	e7c0      	b.n	800a7fc <_scanf_float+0x18c>
 800a87a:	2d03      	cmp	r5, #3
 800a87c:	d0e2      	beq.n	800a844 <_scanf_float+0x1d4>
 800a87e:	2d05      	cmp	r5, #5
 800a880:	e7de      	b.n	800a840 <_scanf_float+0x1d0>
 800a882:	2d02      	cmp	r5, #2
 800a884:	f47f af26 	bne.w	800a6d4 <_scanf_float+0x64>
 800a888:	2503      	movs	r5, #3
 800a88a:	e7b7      	b.n	800a7fc <_scanf_float+0x18c>
 800a88c:	2d06      	cmp	r5, #6
 800a88e:	f47f af21 	bne.w	800a6d4 <_scanf_float+0x64>
 800a892:	2507      	movs	r5, #7
 800a894:	e7b2      	b.n	800a7fc <_scanf_float+0x18c>
 800a896:	6822      	ldr	r2, [r4, #0]
 800a898:	0591      	lsls	r1, r2, #22
 800a89a:	f57f af1b 	bpl.w	800a6d4 <_scanf_float+0x64>
 800a89e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a8a2:	6022      	str	r2, [r4, #0]
 800a8a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8a8:	e7a8      	b.n	800a7fc <_scanf_float+0x18c>
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8b4:	d006      	beq.n	800a8c4 <_scanf_float+0x254>
 800a8b6:	0550      	lsls	r0, r2, #21
 800a8b8:	f57f af0c 	bpl.w	800a6d4 <_scanf_float+0x64>
 800a8bc:	f1b9 0f00 	cmp.w	r9, #0
 800a8c0:	f43f af0f 	beq.w	800a6e2 <_scanf_float+0x72>
 800a8c4:	0591      	lsls	r1, r2, #22
 800a8c6:	bf58      	it	pl
 800a8c8:	9901      	ldrpl	r1, [sp, #4]
 800a8ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8ce:	bf58      	it	pl
 800a8d0:	eba9 0101 	subpl.w	r1, r9, r1
 800a8d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a8d8:	f04f 0900 	mov.w	r9, #0
 800a8dc:	bf58      	it	pl
 800a8de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8e2:	6022      	str	r2, [r4, #0]
 800a8e4:	e78a      	b.n	800a7fc <_scanf_float+0x18c>
 800a8e6:	f04f 0a03 	mov.w	sl, #3
 800a8ea:	e787      	b.n	800a7fc <_scanf_float+0x18c>
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8f4:	4798      	blx	r3
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f43f aedf 	beq.w	800a6ba <_scanf_float+0x4a>
 800a8fc:	e6ea      	b.n	800a6d4 <_scanf_float+0x64>
 800a8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a902:	463a      	mov	r2, r7
 800a904:	4640      	mov	r0, r8
 800a906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a90a:	4798      	blx	r3
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	3b01      	subs	r3, #1
 800a910:	6123      	str	r3, [r4, #16]
 800a912:	e6ec      	b.n	800a6ee <_scanf_float+0x7e>
 800a914:	1e6b      	subs	r3, r5, #1
 800a916:	2b06      	cmp	r3, #6
 800a918:	d825      	bhi.n	800a966 <_scanf_float+0x2f6>
 800a91a:	2d02      	cmp	r5, #2
 800a91c:	d836      	bhi.n	800a98c <_scanf_float+0x31c>
 800a91e:	455e      	cmp	r6, fp
 800a920:	f67f aee8 	bls.w	800a6f4 <_scanf_float+0x84>
 800a924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a928:	463a      	mov	r2, r7
 800a92a:	4640      	mov	r0, r8
 800a92c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a930:	4798      	blx	r3
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	3b01      	subs	r3, #1
 800a936:	6123      	str	r3, [r4, #16]
 800a938:	e7f1      	b.n	800a91e <_scanf_float+0x2ae>
 800a93a:	9802      	ldr	r0, [sp, #8]
 800a93c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a940:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a944:	463a      	mov	r2, r7
 800a946:	9002      	str	r0, [sp, #8]
 800a948:	4640      	mov	r0, r8
 800a94a:	4798      	blx	r3
 800a94c:	6923      	ldr	r3, [r4, #16]
 800a94e:	3b01      	subs	r3, #1
 800a950:	6123      	str	r3, [r4, #16]
 800a952:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a956:	fa5f fa8a 	uxtb.w	sl, sl
 800a95a:	f1ba 0f02 	cmp.w	sl, #2
 800a95e:	d1ec      	bne.n	800a93a <_scanf_float+0x2ca>
 800a960:	3d03      	subs	r5, #3
 800a962:	b2ed      	uxtb	r5, r5
 800a964:	1b76      	subs	r6, r6, r5
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	05da      	lsls	r2, r3, #23
 800a96a:	d52f      	bpl.n	800a9cc <_scanf_float+0x35c>
 800a96c:	055b      	lsls	r3, r3, #21
 800a96e:	d510      	bpl.n	800a992 <_scanf_float+0x322>
 800a970:	455e      	cmp	r6, fp
 800a972:	f67f aebf 	bls.w	800a6f4 <_scanf_float+0x84>
 800a976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a97a:	463a      	mov	r2, r7
 800a97c:	4640      	mov	r0, r8
 800a97e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a982:	4798      	blx	r3
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	3b01      	subs	r3, #1
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	e7f1      	b.n	800a970 <_scanf_float+0x300>
 800a98c:	46aa      	mov	sl, r5
 800a98e:	9602      	str	r6, [sp, #8]
 800a990:	e7df      	b.n	800a952 <_scanf_float+0x2e2>
 800a992:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	2965      	cmp	r1, #101	; 0x65
 800a99a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a99e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a9a2:	6123      	str	r3, [r4, #16]
 800a9a4:	d00c      	beq.n	800a9c0 <_scanf_float+0x350>
 800a9a6:	2945      	cmp	r1, #69	; 0x45
 800a9a8:	d00a      	beq.n	800a9c0 <_scanf_float+0x350>
 800a9aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9ae:	463a      	mov	r2, r7
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4798      	blx	r3
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	1eb5      	subs	r5, r6, #2
 800a9be:	6123      	str	r3, [r4, #16]
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9c8:	4798      	blx	r3
 800a9ca:	462e      	mov	r6, r5
 800a9cc:	6825      	ldr	r5, [r4, #0]
 800a9ce:	f015 0510 	ands.w	r5, r5, #16
 800a9d2:	d155      	bne.n	800aa80 <_scanf_float+0x410>
 800a9d4:	7035      	strb	r5, [r6, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e0:	d11d      	bne.n	800aa1e <_scanf_float+0x3ae>
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	454b      	cmp	r3, r9
 800a9e6:	eba3 0209 	sub.w	r2, r3, r9
 800a9ea:	d125      	bne.n	800aa38 <_scanf_float+0x3c8>
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4659      	mov	r1, fp
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	f002 fc21 	bl	800d238 <_strtod_r>
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	f8d4 c000 	ldr.w	ip, [r4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f01c 0f02 	tst.w	ip, #2
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	f103 0204 	add.w	r2, r3, #4
 800aa0a:	d020      	beq.n	800aa4e <_scanf_float+0x3de>
 800aa0c:	9903      	ldr	r1, [sp, #12]
 800aa0e:	600a      	str	r2, [r1, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	e9c3 6700 	strd	r6, r7, [r3]
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	60e3      	str	r3, [r4, #12]
 800aa1c:	e66b      	b.n	800a6f6 <_scanf_float+0x86>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0e3      	beq.n	800a9ec <_scanf_float+0x37c>
 800aa24:	9905      	ldr	r1, [sp, #20]
 800aa26:	230a      	movs	r3, #10
 800aa28:	462a      	mov	r2, r5
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	3101      	adds	r1, #1
 800aa2e:	f002 fc87 	bl	800d340 <_strtol_r>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	9e05      	ldr	r6, [sp, #20]
 800aa36:	1ac2      	subs	r2, r0, r3
 800aa38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa3c:	429e      	cmp	r6, r3
 800aa3e:	bf28      	it	cs
 800aa40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa44:	4630      	mov	r0, r6
 800aa46:	490f      	ldr	r1, [pc, #60]	; (800aa84 <_scanf_float+0x414>)
 800aa48:	f000 f8e2 	bl	800ac10 <siprintf>
 800aa4c:	e7ce      	b.n	800a9ec <_scanf_float+0x37c>
 800aa4e:	f01c 0f04 	tst.w	ip, #4
 800aa52:	d1db      	bne.n	800aa0c <_scanf_float+0x39c>
 800aa54:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800aa58:	f8cc 2000 	str.w	r2, [ip]
 800aa5c:	f8d3 8000 	ldr.w	r8, [r3]
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	f7f5 ffd2 	bl	8000a0c <__aeabi_dcmpun>
 800aa68:	b128      	cbz	r0, 800aa76 <_scanf_float+0x406>
 800aa6a:	4807      	ldr	r0, [pc, #28]	; (800aa88 <_scanf_float+0x418>)
 800aa6c:	f000 f9c2 	bl	800adf4 <nanf>
 800aa70:	f8c8 0000 	str.w	r0, [r8]
 800aa74:	e7cf      	b.n	800aa16 <_scanf_float+0x3a6>
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f6 f825 	bl	8000ac8 <__aeabi_d2f>
 800aa7e:	e7f7      	b.n	800aa70 <_scanf_float+0x400>
 800aa80:	2500      	movs	r5, #0
 800aa82:	e638      	b.n	800a6f6 <_scanf_float+0x86>
 800aa84:	0800ebc8 	.word	0x0800ebc8
 800aa88:	0800ef5d 	.word	0x0800ef5d

0800aa8c <std>:
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	4604      	mov	r4, r0
 800aa92:	e9c0 3300 	strd	r3, r3, [r0]
 800aa96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa9a:	6083      	str	r3, [r0, #8]
 800aa9c:	8181      	strh	r1, [r0, #12]
 800aa9e:	6643      	str	r3, [r0, #100]	; 0x64
 800aaa0:	81c2      	strh	r2, [r0, #14]
 800aaa2:	6183      	str	r3, [r0, #24]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	2208      	movs	r2, #8
 800aaa8:	305c      	adds	r0, #92	; 0x5c
 800aaaa:	f000 f914 	bl	800acd6 <memset>
 800aaae:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <std+0x58>)
 800aab0:	6224      	str	r4, [r4, #32]
 800aab2:	6263      	str	r3, [r4, #36]	; 0x24
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <std+0x5c>)
 800aab6:	62a3      	str	r3, [r4, #40]	; 0x28
 800aab8:	4b0c      	ldr	r3, [pc, #48]	; (800aaec <std+0x60>)
 800aaba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aabc:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <std+0x64>)
 800aabe:	6323      	str	r3, [r4, #48]	; 0x30
 800aac0:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <std+0x68>)
 800aac2:	429c      	cmp	r4, r3
 800aac4:	d006      	beq.n	800aad4 <std+0x48>
 800aac6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aaca:	4294      	cmp	r4, r2
 800aacc:	d002      	beq.n	800aad4 <std+0x48>
 800aace:	33d0      	adds	r3, #208	; 0xd0
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d105      	bne.n	800aae0 <std+0x54>
 800aad4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f000 b978 	b.w	800add0 <__retarget_lock_init_recursive>
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	bf00      	nop
 800aae4:	0800ac51 	.word	0x0800ac51
 800aae8:	0800ac73 	.word	0x0800ac73
 800aaec:	0800acab 	.word	0x0800acab
 800aaf0:	0800accf 	.word	0x0800accf
 800aaf4:	20002aa8 	.word	0x20002aa8

0800aaf8 <stdio_exit_handler>:
 800aaf8:	4a02      	ldr	r2, [pc, #8]	; (800ab04 <stdio_exit_handler+0xc>)
 800aafa:	4903      	ldr	r1, [pc, #12]	; (800ab08 <stdio_exit_handler+0x10>)
 800aafc:	4803      	ldr	r0, [pc, #12]	; (800ab0c <stdio_exit_handler+0x14>)
 800aafe:	f000 b869 	b.w	800abd4 <_fwalk_sglue>
 800ab02:	bf00      	nop
 800ab04:	20000024 	.word	0x20000024
 800ab08:	0800d6f9 	.word	0x0800d6f9
 800ab0c:	20000030 	.word	0x20000030

0800ab10 <cleanup_stdio>:
 800ab10:	6841      	ldr	r1, [r0, #4]
 800ab12:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <cleanup_stdio+0x34>)
 800ab14:	b510      	push	{r4, lr}
 800ab16:	4299      	cmp	r1, r3
 800ab18:	4604      	mov	r4, r0
 800ab1a:	d001      	beq.n	800ab20 <cleanup_stdio+0x10>
 800ab1c:	f002 fdec 	bl	800d6f8 <_fflush_r>
 800ab20:	68a1      	ldr	r1, [r4, #8]
 800ab22:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <cleanup_stdio+0x38>)
 800ab24:	4299      	cmp	r1, r3
 800ab26:	d002      	beq.n	800ab2e <cleanup_stdio+0x1e>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f002 fde5 	bl	800d6f8 <_fflush_r>
 800ab2e:	68e1      	ldr	r1, [r4, #12]
 800ab30:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <cleanup_stdio+0x3c>)
 800ab32:	4299      	cmp	r1, r3
 800ab34:	d004      	beq.n	800ab40 <cleanup_stdio+0x30>
 800ab36:	4620      	mov	r0, r4
 800ab38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3c:	f002 bddc 	b.w	800d6f8 <_fflush_r>
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	bf00      	nop
 800ab44:	20002aa8 	.word	0x20002aa8
 800ab48:	20002b10 	.word	0x20002b10
 800ab4c:	20002b78 	.word	0x20002b78

0800ab50 <global_stdio_init.part.0>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	4b0b      	ldr	r3, [pc, #44]	; (800ab80 <global_stdio_init.part.0+0x30>)
 800ab54:	4c0b      	ldr	r4, [pc, #44]	; (800ab84 <global_stdio_init.part.0+0x34>)
 800ab56:	4a0c      	ldr	r2, [pc, #48]	; (800ab88 <global_stdio_init.part.0+0x38>)
 800ab58:	4620      	mov	r0, r4
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	2104      	movs	r1, #4
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f7ff ff94 	bl	800aa8c <std>
 800ab64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab68:	2201      	movs	r2, #1
 800ab6a:	2109      	movs	r1, #9
 800ab6c:	f7ff ff8e 	bl	800aa8c <std>
 800ab70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab74:	2202      	movs	r2, #2
 800ab76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7a:	2112      	movs	r1, #18
 800ab7c:	f7ff bf86 	b.w	800aa8c <std>
 800ab80:	20002be0 	.word	0x20002be0
 800ab84:	20002aa8 	.word	0x20002aa8
 800ab88:	0800aaf9 	.word	0x0800aaf9

0800ab8c <__sfp_lock_acquire>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__sfp_lock_acquire+0x8>)
 800ab8e:	f000 b920 	b.w	800add2 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	20002be9 	.word	0x20002be9

0800ab98 <__sfp_lock_release>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__sfp_lock_release+0x8>)
 800ab9a:	f000 b91b 	b.w	800add4 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	20002be9 	.word	0x20002be9

0800aba4 <__sinit>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4604      	mov	r4, r0
 800aba8:	f7ff fff0 	bl	800ab8c <__sfp_lock_acquire>
 800abac:	6a23      	ldr	r3, [r4, #32]
 800abae:	b11b      	cbz	r3, 800abb8 <__sinit+0x14>
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f7ff bff0 	b.w	800ab98 <__sfp_lock_release>
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <__sinit+0x28>)
 800abba:	6223      	str	r3, [r4, #32]
 800abbc:	4b04      	ldr	r3, [pc, #16]	; (800abd0 <__sinit+0x2c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1f5      	bne.n	800abb0 <__sinit+0xc>
 800abc4:	f7ff ffc4 	bl	800ab50 <global_stdio_init.part.0>
 800abc8:	e7f2      	b.n	800abb0 <__sinit+0xc>
 800abca:	bf00      	nop
 800abcc:	0800ab11 	.word	0x0800ab11
 800abd0:	20002be0 	.word	0x20002be0

0800abd4 <_fwalk_sglue>:
 800abd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd8:	4607      	mov	r7, r0
 800abda:	4688      	mov	r8, r1
 800abdc:	4614      	mov	r4, r2
 800abde:	2600      	movs	r6, #0
 800abe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abe4:	f1b9 0901 	subs.w	r9, r9, #1
 800abe8:	d505      	bpl.n	800abf6 <_fwalk_sglue+0x22>
 800abea:	6824      	ldr	r4, [r4, #0]
 800abec:	2c00      	cmp	r4, #0
 800abee:	d1f7      	bne.n	800abe0 <_fwalk_sglue+0xc>
 800abf0:	4630      	mov	r0, r6
 800abf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d907      	bls.n	800ac0c <_fwalk_sglue+0x38>
 800abfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac00:	3301      	adds	r3, #1
 800ac02:	d003      	beq.n	800ac0c <_fwalk_sglue+0x38>
 800ac04:	4629      	mov	r1, r5
 800ac06:	4638      	mov	r0, r7
 800ac08:	47c0      	blx	r8
 800ac0a:	4306      	orrs	r6, r0
 800ac0c:	3568      	adds	r5, #104	; 0x68
 800ac0e:	e7e9      	b.n	800abe4 <_fwalk_sglue+0x10>

0800ac10 <siprintf>:
 800ac10:	b40e      	push	{r1, r2, r3}
 800ac12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac16:	b500      	push	{lr}
 800ac18:	b09c      	sub	sp, #112	; 0x70
 800ac1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac1c:	9002      	str	r0, [sp, #8]
 800ac1e:	9006      	str	r0, [sp, #24]
 800ac20:	9107      	str	r1, [sp, #28]
 800ac22:	9104      	str	r1, [sp, #16]
 800ac24:	4808      	ldr	r0, [pc, #32]	; (800ac48 <siprintf+0x38>)
 800ac26:	4909      	ldr	r1, [pc, #36]	; (800ac4c <siprintf+0x3c>)
 800ac28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2c:	9105      	str	r1, [sp, #20]
 800ac2e:	6800      	ldr	r0, [r0, #0]
 800ac30:	a902      	add	r1, sp, #8
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	f002 fbe0 	bl	800d3f8 <_svfiprintf_r>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	9b02      	ldr	r3, [sp, #8]
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	b01c      	add	sp, #112	; 0x70
 800ac40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac44:	b003      	add	sp, #12
 800ac46:	4770      	bx	lr
 800ac48:	2000007c 	.word	0x2000007c
 800ac4c:	ffff0208 	.word	0xffff0208

0800ac50 <__sread>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	460c      	mov	r4, r1
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	f000 f86c 	bl	800ad34 <_read_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	bfab      	itete	ge
 800ac60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac62:	89a3      	ldrhlt	r3, [r4, #12]
 800ac64:	181b      	addge	r3, r3, r0
 800ac66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6a:	bfac      	ite	ge
 800ac6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac6e:	81a3      	strhlt	r3, [r4, #12]
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <__swrite>:
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	461f      	mov	r7, r3
 800ac78:	898b      	ldrh	r3, [r1, #12]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	05db      	lsls	r3, r3, #23
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4616      	mov	r6, r2
 800ac82:	d505      	bpl.n	800ac90 <__swrite+0x1e>
 800ac84:	2302      	movs	r3, #2
 800ac86:	2200      	movs	r2, #0
 800ac88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8c:	f000 f840 	bl	800ad10 <_lseek_r>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	4632      	mov	r2, r6
 800ac94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac98:	81a3      	strh	r3, [r4, #12]
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	463b      	mov	r3, r7
 800ac9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f000 b857 	b.w	800ad58 <_write_r>

0800acaa <__sseek>:
 800acaa:	b510      	push	{r4, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb2:	f000 f82d 	bl	800ad10 <_lseek_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	bf15      	itete	ne
 800acbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strheq	r3, [r4, #12]
 800acc8:	bf18      	it	ne
 800acca:	81a3      	strhne	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__sclose>:
 800acce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd2:	f000 b80d 	b.w	800acf0 <_close_r>

0800acd6 <memset>:
 800acd6:	4603      	mov	r3, r0
 800acd8:	4402      	add	r2, r0
 800acda:	4293      	cmp	r3, r2
 800acdc:	d100      	bne.n	800ace0 <memset+0xa>
 800acde:	4770      	bx	lr
 800ace0:	f803 1b01 	strb.w	r1, [r3], #1
 800ace4:	e7f9      	b.n	800acda <memset+0x4>
	...

0800ace8 <_localeconv_r>:
 800ace8:	4800      	ldr	r0, [pc, #0]	; (800acec <_localeconv_r+0x4>)
 800acea:	4770      	bx	lr
 800acec:	20000170 	.word	0x20000170

0800acf0 <_close_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	2300      	movs	r3, #0
 800acf4:	4d05      	ldr	r5, [pc, #20]	; (800ad0c <_close_r+0x1c>)
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f7 ff76 	bl	8002bec <_close>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_close_r+0x1a>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_close_r+0x1a>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	20002be4 	.word	0x20002be4

0800ad10 <_lseek_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	2200      	movs	r2, #0
 800ad1a:	4d05      	ldr	r5, [pc, #20]	; (800ad30 <_lseek_r+0x20>)
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7f7 ff88 	bl	8002c34 <_lseek>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_lseek_r+0x1e>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_lseek_r+0x1e>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20002be4 	.word	0x20002be4

0800ad34 <_read_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4d05      	ldr	r5, [pc, #20]	; (800ad54 <_read_r+0x20>)
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f7 ff35 	bl	8002bb2 <_read>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_read_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_read_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20002be4 	.word	0x20002be4

0800ad58 <_write_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	4611      	mov	r1, r2
 800ad60:	2200      	movs	r2, #0
 800ad62:	4d05      	ldr	r5, [pc, #20]	; (800ad78 <_write_r+0x20>)
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f7 fcde 	bl	8002728 <_write>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_write_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_write_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	20002be4 	.word	0x20002be4

0800ad7c <__errno>:
 800ad7c:	4b01      	ldr	r3, [pc, #4]	; (800ad84 <__errno+0x8>)
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	2000007c 	.word	0x2000007c

0800ad88 <__libc_init_array>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	4d0c      	ldr	r5, [pc, #48]	; (800adc0 <__libc_init_array+0x38>)
 800ad8e:	4c0d      	ldr	r4, [pc, #52]	; (800adc4 <__libc_init_array+0x3c>)
 800ad90:	1b64      	subs	r4, r4, r5
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	42a6      	cmp	r6, r4
 800ad96:	d109      	bne.n	800adac <__libc_init_array+0x24>
 800ad98:	f003 fbc0 	bl	800e51c <_init>
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	4d0a      	ldr	r5, [pc, #40]	; (800adc8 <__libc_init_array+0x40>)
 800ada0:	4c0a      	ldr	r4, [pc, #40]	; (800adcc <__libc_init_array+0x44>)
 800ada2:	1b64      	subs	r4, r4, r5
 800ada4:	10a4      	asrs	r4, r4, #2
 800ada6:	42a6      	cmp	r6, r4
 800ada8:	d105      	bne.n	800adb6 <__libc_init_array+0x2e>
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb0:	4798      	blx	r3
 800adb2:	3601      	adds	r6, #1
 800adb4:	e7ee      	b.n	800ad94 <__libc_init_array+0xc>
 800adb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adba:	4798      	blx	r3
 800adbc:	3601      	adds	r6, #1
 800adbe:	e7f2      	b.n	800ada6 <__libc_init_array+0x1e>
 800adc0:	0800efc0 	.word	0x0800efc0
 800adc4:	0800efc0 	.word	0x0800efc0
 800adc8:	0800efc0 	.word	0x0800efc0
 800adcc:	0800efc4 	.word	0x0800efc4

0800add0 <__retarget_lock_init_recursive>:
 800add0:	4770      	bx	lr

0800add2 <__retarget_lock_acquire_recursive>:
 800add2:	4770      	bx	lr

0800add4 <__retarget_lock_release_recursive>:
 800add4:	4770      	bx	lr

0800add6 <memchr>:
 800add6:	4603      	mov	r3, r0
 800add8:	b510      	push	{r4, lr}
 800adda:	b2c9      	uxtb	r1, r1
 800addc:	4402      	add	r2, r0
 800adde:	4293      	cmp	r3, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	d101      	bne.n	800ade8 <memchr+0x12>
 800ade4:	2000      	movs	r0, #0
 800ade6:	e003      	b.n	800adf0 <memchr+0x1a>
 800ade8:	7804      	ldrb	r4, [r0, #0]
 800adea:	3301      	adds	r3, #1
 800adec:	428c      	cmp	r4, r1
 800adee:	d1f6      	bne.n	800adde <memchr+0x8>
 800adf0:	bd10      	pop	{r4, pc}
	...

0800adf4 <nanf>:
 800adf4:	4800      	ldr	r0, [pc, #0]	; (800adf8 <nanf+0x4>)
 800adf6:	4770      	bx	lr
 800adf8:	7fc00000 	.word	0x7fc00000

0800adfc <quorem>:
 800adfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	6903      	ldr	r3, [r0, #16]
 800ae02:	690c      	ldr	r4, [r1, #16]
 800ae04:	4607      	mov	r7, r0
 800ae06:	42a3      	cmp	r3, r4
 800ae08:	db7f      	blt.n	800af0a <quorem+0x10e>
 800ae0a:	3c01      	subs	r4, #1
 800ae0c:	f100 0514 	add.w	r5, r0, #20
 800ae10:	f101 0814 	add.w	r8, r1, #20
 800ae14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae22:	3301      	adds	r3, #1
 800ae24:	429a      	cmp	r2, r3
 800ae26:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae32:	d331      	bcc.n	800ae98 <quorem+0x9c>
 800ae34:	f04f 0e00 	mov.w	lr, #0
 800ae38:	4640      	mov	r0, r8
 800ae3a:	46ac      	mov	ip, r5
 800ae3c:	46f2      	mov	sl, lr
 800ae3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae42:	b293      	uxth	r3, r2
 800ae44:	fb06 e303 	mla	r3, r6, r3, lr
 800ae48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae4c:	0c1a      	lsrs	r2, r3, #16
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	fb06 220e 	mla	r2, r6, lr, r2
 800ae54:	ebaa 0303 	sub.w	r3, sl, r3
 800ae58:	f8dc a000 	ldr.w	sl, [ip]
 800ae5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae60:	fa1f fa8a 	uxth.w	sl, sl
 800ae64:	4453      	add	r3, sl
 800ae66:	f8dc a000 	ldr.w	sl, [ip]
 800ae6a:	b292      	uxth	r2, r2
 800ae6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae7a:	4581      	cmp	r9, r0
 800ae7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae80:	f84c 3b04 	str.w	r3, [ip], #4
 800ae84:	d2db      	bcs.n	800ae3e <quorem+0x42>
 800ae86:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae8a:	b92b      	cbnz	r3, 800ae98 <quorem+0x9c>
 800ae8c:	9b01      	ldr	r3, [sp, #4]
 800ae8e:	3b04      	subs	r3, #4
 800ae90:	429d      	cmp	r5, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	d32d      	bcc.n	800aef2 <quorem+0xf6>
 800ae96:	613c      	str	r4, [r7, #16]
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f001 f9dd 	bl	800c258 <__mcmp>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	db23      	blt.n	800aeea <quorem+0xee>
 800aea2:	4629      	mov	r1, r5
 800aea4:	2000      	movs	r0, #0
 800aea6:	3601      	adds	r6, #1
 800aea8:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeac:	f8d1 c000 	ldr.w	ip, [r1]
 800aeb0:	b293      	uxth	r3, r2
 800aeb2:	1ac3      	subs	r3, r0, r3
 800aeb4:	0c12      	lsrs	r2, r2, #16
 800aeb6:	fa1f f08c 	uxth.w	r0, ip
 800aeba:	4403      	add	r3, r0
 800aebc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeca:	45c1      	cmp	r9, r8
 800aecc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aed0:	f841 3b04 	str.w	r3, [r1], #4
 800aed4:	d2e8      	bcs.n	800aea8 <quorem+0xac>
 800aed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aede:	b922      	cbnz	r2, 800aeea <quorem+0xee>
 800aee0:	3b04      	subs	r3, #4
 800aee2:	429d      	cmp	r5, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	d30a      	bcc.n	800aefe <quorem+0x102>
 800aee8:	613c      	str	r4, [r7, #16]
 800aeea:	4630      	mov	r0, r6
 800aeec:	b003      	add	sp, #12
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	3b04      	subs	r3, #4
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	d1cd      	bne.n	800ae96 <quorem+0x9a>
 800aefa:	3c01      	subs	r4, #1
 800aefc:	e7c8      	b.n	800ae90 <quorem+0x94>
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	3b04      	subs	r3, #4
 800af02:	2a00      	cmp	r2, #0
 800af04:	d1f0      	bne.n	800aee8 <quorem+0xec>
 800af06:	3c01      	subs	r4, #1
 800af08:	e7eb      	b.n	800aee2 <quorem+0xe6>
 800af0a:	2000      	movs	r0, #0
 800af0c:	e7ee      	b.n	800aeec <quorem+0xf0>
	...

0800af10 <_dtoa_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4616      	mov	r6, r2
 800af16:	461f      	mov	r7, r3
 800af18:	69c4      	ldr	r4, [r0, #28]
 800af1a:	b099      	sub	sp, #100	; 0x64
 800af1c:	4605      	mov	r5, r0
 800af1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800af22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800af26:	b974      	cbnz	r4, 800af46 <_dtoa_r+0x36>
 800af28:	2010      	movs	r0, #16
 800af2a:	f000 fe1d 	bl	800bb68 <malloc>
 800af2e:	4602      	mov	r2, r0
 800af30:	61e8      	str	r0, [r5, #28]
 800af32:	b920      	cbnz	r0, 800af3e <_dtoa_r+0x2e>
 800af34:	21ef      	movs	r1, #239	; 0xef
 800af36:	4bac      	ldr	r3, [pc, #688]	; (800b1e8 <_dtoa_r+0x2d8>)
 800af38:	48ac      	ldr	r0, [pc, #688]	; (800b1ec <_dtoa_r+0x2dc>)
 800af3a:	f002 fc55 	bl	800d7e8 <__assert_func>
 800af3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af42:	6004      	str	r4, [r0, #0]
 800af44:	60c4      	str	r4, [r0, #12]
 800af46:	69eb      	ldr	r3, [r5, #28]
 800af48:	6819      	ldr	r1, [r3, #0]
 800af4a:	b151      	cbz	r1, 800af62 <_dtoa_r+0x52>
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	2301      	movs	r3, #1
 800af50:	4093      	lsls	r3, r2
 800af52:	604a      	str	r2, [r1, #4]
 800af54:	608b      	str	r3, [r1, #8]
 800af56:	4628      	mov	r0, r5
 800af58:	f000 fefa 	bl	800bd50 <_Bfree>
 800af5c:	2200      	movs	r2, #0
 800af5e:	69eb      	ldr	r3, [r5, #28]
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	1e3b      	subs	r3, r7, #0
 800af64:	bfaf      	iteee	ge
 800af66:	2300      	movge	r3, #0
 800af68:	2201      	movlt	r2, #1
 800af6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af6e:	9305      	strlt	r3, [sp, #20]
 800af70:	bfa8      	it	ge
 800af72:	f8c8 3000 	strge.w	r3, [r8]
 800af76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800af7a:	4b9d      	ldr	r3, [pc, #628]	; (800b1f0 <_dtoa_r+0x2e0>)
 800af7c:	bfb8      	it	lt
 800af7e:	f8c8 2000 	strlt.w	r2, [r8]
 800af82:	ea33 0309 	bics.w	r3, r3, r9
 800af86:	d119      	bne.n	800afbc <_dtoa_r+0xac>
 800af88:	f242 730f 	movw	r3, #9999	; 0x270f
 800af8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af94:	4333      	orrs	r3, r6
 800af96:	f000 8589 	beq.w	800baac <_dtoa_r+0xb9c>
 800af9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af9c:	b953      	cbnz	r3, 800afb4 <_dtoa_r+0xa4>
 800af9e:	4b95      	ldr	r3, [pc, #596]	; (800b1f4 <_dtoa_r+0x2e4>)
 800afa0:	e023      	b.n	800afea <_dtoa_r+0xda>
 800afa2:	4b95      	ldr	r3, [pc, #596]	; (800b1f8 <_dtoa_r+0x2e8>)
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	3308      	adds	r3, #8
 800afa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	9803      	ldr	r0, [sp, #12]
 800afae:	b019      	add	sp, #100	; 0x64
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	4b8f      	ldr	r3, [pc, #572]	; (800b1f4 <_dtoa_r+0x2e4>)
 800afb6:	9303      	str	r3, [sp, #12]
 800afb8:	3303      	adds	r3, #3
 800afba:	e7f5      	b.n	800afa8 <_dtoa_r+0x98>
 800afbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800afc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800afc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	f7f5 fcec 	bl	80009a8 <__aeabi_dcmpeq>
 800afd0:	4680      	mov	r8, r0
 800afd2:	b160      	cbz	r0, 800afee <_dtoa_r+0xde>
 800afd4:	2301      	movs	r3, #1
 800afd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 8562 	beq.w	800baa6 <_dtoa_r+0xb96>
 800afe2:	4b86      	ldr	r3, [pc, #536]	; (800b1fc <_dtoa_r+0x2ec>)
 800afe4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	3b01      	subs	r3, #1
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	e7de      	b.n	800afac <_dtoa_r+0x9c>
 800afee:	ab16      	add	r3, sp, #88	; 0x58
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	ab17      	add	r3, sp, #92	; 0x5c
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4628      	mov	r0, r5
 800aff8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800affc:	f001 fa3c 	bl	800c478 <__d2b>
 800b000:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b004:	4682      	mov	sl, r0
 800b006:	2c00      	cmp	r4, #0
 800b008:	d07e      	beq.n	800b108 <_dtoa_r+0x1f8>
 800b00a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b010:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b018:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b01c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b020:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b024:	4619      	mov	r1, r3
 800b026:	2200      	movs	r2, #0
 800b028:	4b75      	ldr	r3, [pc, #468]	; (800b200 <_dtoa_r+0x2f0>)
 800b02a:	f7f5 f89d 	bl	8000168 <__aeabi_dsub>
 800b02e:	a368      	add	r3, pc, #416	; (adr r3, 800b1d0 <_dtoa_r+0x2c0>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	a367      	add	r3, pc, #412	; (adr r3, 800b1d8 <_dtoa_r+0x2c8>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7f5 f895 	bl	800016c <__adddf3>
 800b042:	4606      	mov	r6, r0
 800b044:	4620      	mov	r0, r4
 800b046:	460f      	mov	r7, r1
 800b048:	f7f5 f9dc 	bl	8000404 <__aeabi_i2d>
 800b04c:	a364      	add	r3, pc, #400	; (adr r3, 800b1e0 <_dtoa_r+0x2d0>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 fa41 	bl	80004d8 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f885 	bl	800016c <__adddf3>
 800b062:	4606      	mov	r6, r0
 800b064:	460f      	mov	r7, r1
 800b066:	f7f5 fce7 	bl	8000a38 <__aeabi_d2iz>
 800b06a:	2200      	movs	r2, #0
 800b06c:	4683      	mov	fp, r0
 800b06e:	2300      	movs	r3, #0
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fca2 	bl	80009bc <__aeabi_dcmplt>
 800b078:	b148      	cbz	r0, 800b08e <_dtoa_r+0x17e>
 800b07a:	4658      	mov	r0, fp
 800b07c:	f7f5 f9c2 	bl	8000404 <__aeabi_i2d>
 800b080:	4632      	mov	r2, r6
 800b082:	463b      	mov	r3, r7
 800b084:	f7f5 fc90 	bl	80009a8 <__aeabi_dcmpeq>
 800b088:	b908      	cbnz	r0, 800b08e <_dtoa_r+0x17e>
 800b08a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b08e:	f1bb 0f16 	cmp.w	fp, #22
 800b092:	d857      	bhi.n	800b144 <_dtoa_r+0x234>
 800b094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b098:	4b5a      	ldr	r3, [pc, #360]	; (800b204 <_dtoa_r+0x2f4>)
 800b09a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 fc8b 	bl	80009bc <__aeabi_dcmplt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d04e      	beq.n	800b148 <_dtoa_r+0x238>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b0b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0b4:	1b1b      	subs	r3, r3, r4
 800b0b6:	1e5a      	subs	r2, r3, #1
 800b0b8:	bf46      	itte	mi
 800b0ba:	f1c3 0901 	rsbmi	r9, r3, #1
 800b0be:	2300      	movmi	r3, #0
 800b0c0:	f04f 0900 	movpl.w	r9, #0
 800b0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c6:	bf48      	it	mi
 800b0c8:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b0ca:	f1bb 0f00 	cmp.w	fp, #0
 800b0ce:	db3d      	blt.n	800b14c <_dtoa_r+0x23c>
 800b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b0d6:	445b      	add	r3, fp
 800b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0da:	2300      	movs	r3, #0
 800b0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b0de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d867      	bhi.n	800b1b4 <_dtoa_r+0x2a4>
 800b0e4:	2b05      	cmp	r3, #5
 800b0e6:	bfc4      	itt	gt
 800b0e8:	3b04      	subgt	r3, #4
 800b0ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b0ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ee:	bfc8      	it	gt
 800b0f0:	2400      	movgt	r4, #0
 800b0f2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0f6:	bfd8      	it	le
 800b0f8:	2401      	movle	r4, #1
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	f200 8086 	bhi.w	800b20c <_dtoa_r+0x2fc>
 800b100:	e8df f003 	tbb	[pc, r3]
 800b104:	5637392c 	.word	0x5637392c
 800b108:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b10c:	441c      	add	r4, r3
 800b10e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b112:	2b20      	cmp	r3, #32
 800b114:	bfc1      	itttt	gt
 800b116:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b11a:	fa09 f903 	lslgt.w	r9, r9, r3
 800b11e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b122:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b126:	bfd6      	itet	le
 800b128:	f1c3 0320 	rsble	r3, r3, #32
 800b12c:	ea49 0003 	orrgt.w	r0, r9, r3
 800b130:	fa06 f003 	lslle.w	r0, r6, r3
 800b134:	f7f5 f956 	bl	80003e4 <__aeabi_ui2d>
 800b138:	2201      	movs	r2, #1
 800b13a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b13e:	3c01      	subs	r4, #1
 800b140:	9213      	str	r2, [sp, #76]	; 0x4c
 800b142:	e76f      	b.n	800b024 <_dtoa_r+0x114>
 800b144:	2301      	movs	r3, #1
 800b146:	e7b3      	b.n	800b0b0 <_dtoa_r+0x1a0>
 800b148:	900f      	str	r0, [sp, #60]	; 0x3c
 800b14a:	e7b2      	b.n	800b0b2 <_dtoa_r+0x1a2>
 800b14c:	f1cb 0300 	rsb	r3, fp, #0
 800b150:	930a      	str	r3, [sp, #40]	; 0x28
 800b152:	2300      	movs	r3, #0
 800b154:	eba9 090b 	sub.w	r9, r9, fp
 800b158:	930e      	str	r3, [sp, #56]	; 0x38
 800b15a:	e7c0      	b.n	800b0de <_dtoa_r+0x1ce>
 800b15c:	2300      	movs	r3, #0
 800b15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b162:	2b00      	cmp	r3, #0
 800b164:	dc55      	bgt.n	800b212 <_dtoa_r+0x302>
 800b166:	2301      	movs	r3, #1
 800b168:	461a      	mov	r2, r3
 800b16a:	9306      	str	r3, [sp, #24]
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	9223      	str	r2, [sp, #140]	; 0x8c
 800b170:	e00b      	b.n	800b18a <_dtoa_r+0x27a>
 800b172:	2301      	movs	r3, #1
 800b174:	e7f3      	b.n	800b15e <_dtoa_r+0x24e>
 800b176:	2300      	movs	r3, #0
 800b178:	930b      	str	r3, [sp, #44]	; 0x2c
 800b17a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b17c:	445b      	add	r3, fp
 800b17e:	9306      	str	r3, [sp, #24]
 800b180:	3301      	adds	r3, #1
 800b182:	2b01      	cmp	r3, #1
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	bfb8      	it	lt
 800b188:	2301      	movlt	r3, #1
 800b18a:	2100      	movs	r1, #0
 800b18c:	2204      	movs	r2, #4
 800b18e:	69e8      	ldr	r0, [r5, #28]
 800b190:	f102 0614 	add.w	r6, r2, #20
 800b194:	429e      	cmp	r6, r3
 800b196:	d940      	bls.n	800b21a <_dtoa_r+0x30a>
 800b198:	6041      	str	r1, [r0, #4]
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 fd98 	bl	800bcd0 <_Balloc>
 800b1a0:	9003      	str	r0, [sp, #12]
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d13c      	bne.n	800b220 <_dtoa_r+0x310>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	f240 11af 	movw	r1, #431	; 0x1af
 800b1ac:	4b16      	ldr	r3, [pc, #88]	; (800b208 <_dtoa_r+0x2f8>)
 800b1ae:	e6c3      	b.n	800af38 <_dtoa_r+0x28>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e7e1      	b.n	800b178 <_dtoa_r+0x268>
 800b1b4:	2401      	movs	r4, #1
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b1ba:	9322      	str	r3, [sp, #136]	; 0x88
 800b1bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	9306      	str	r3, [sp, #24]
 800b1c4:	9308      	str	r3, [sp, #32]
 800b1c6:	2312      	movs	r3, #18
 800b1c8:	e7d1      	b.n	800b16e <_dtoa_r+0x25e>
 800b1ca:	bf00      	nop
 800b1cc:	f3af 8000 	nop.w
 800b1d0:	636f4361 	.word	0x636f4361
 800b1d4:	3fd287a7 	.word	0x3fd287a7
 800b1d8:	8b60c8b3 	.word	0x8b60c8b3
 800b1dc:	3fc68a28 	.word	0x3fc68a28
 800b1e0:	509f79fb 	.word	0x509f79fb
 800b1e4:	3fd34413 	.word	0x3fd34413
 800b1e8:	0800ebda 	.word	0x0800ebda
 800b1ec:	0800ebf1 	.word	0x0800ebf1
 800b1f0:	7ff00000 	.word	0x7ff00000
 800b1f4:	0800ebd6 	.word	0x0800ebd6
 800b1f8:	0800ebcd 	.word	0x0800ebcd
 800b1fc:	0800eba5 	.word	0x0800eba5
 800b200:	3ff80000 	.word	0x3ff80000
 800b204:	0800ece0 	.word	0x0800ece0
 800b208:	0800ec49 	.word	0x0800ec49
 800b20c:	2301      	movs	r3, #1
 800b20e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b210:	e7d4      	b.n	800b1bc <_dtoa_r+0x2ac>
 800b212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b214:	9306      	str	r3, [sp, #24]
 800b216:	9308      	str	r3, [sp, #32]
 800b218:	e7b7      	b.n	800b18a <_dtoa_r+0x27a>
 800b21a:	3101      	adds	r1, #1
 800b21c:	0052      	lsls	r2, r2, #1
 800b21e:	e7b7      	b.n	800b190 <_dtoa_r+0x280>
 800b220:	69eb      	ldr	r3, [r5, #28]
 800b222:	9a03      	ldr	r2, [sp, #12]
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	9b08      	ldr	r3, [sp, #32]
 800b228:	2b0e      	cmp	r3, #14
 800b22a:	f200 80a8 	bhi.w	800b37e <_dtoa_r+0x46e>
 800b22e:	2c00      	cmp	r4, #0
 800b230:	f000 80a5 	beq.w	800b37e <_dtoa_r+0x46e>
 800b234:	f1bb 0f00 	cmp.w	fp, #0
 800b238:	dd34      	ble.n	800b2a4 <_dtoa_r+0x394>
 800b23a:	4b9a      	ldr	r3, [pc, #616]	; (800b4a4 <_dtoa_r+0x594>)
 800b23c:	f00b 020f 	and.w	r2, fp, #15
 800b240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b24c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b250:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b254:	d016      	beq.n	800b284 <_dtoa_r+0x374>
 800b256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b25a:	4b93      	ldr	r3, [pc, #588]	; (800b4a8 <_dtoa_r+0x598>)
 800b25c:	2703      	movs	r7, #3
 800b25e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b262:	f7f5 fa63 	bl	800072c <__aeabi_ddiv>
 800b266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b26a:	f004 040f 	and.w	r4, r4, #15
 800b26e:	4e8e      	ldr	r6, [pc, #568]	; (800b4a8 <_dtoa_r+0x598>)
 800b270:	b954      	cbnz	r4, 800b288 <_dtoa_r+0x378>
 800b272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b27a:	f7f5 fa57 	bl	800072c <__aeabi_ddiv>
 800b27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b282:	e029      	b.n	800b2d8 <_dtoa_r+0x3c8>
 800b284:	2702      	movs	r7, #2
 800b286:	e7f2      	b.n	800b26e <_dtoa_r+0x35e>
 800b288:	07e1      	lsls	r1, r4, #31
 800b28a:	d508      	bpl.n	800b29e <_dtoa_r+0x38e>
 800b28c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b290:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b294:	f7f5 f920 	bl	80004d8 <__aeabi_dmul>
 800b298:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b29c:	3701      	adds	r7, #1
 800b29e:	1064      	asrs	r4, r4, #1
 800b2a0:	3608      	adds	r6, #8
 800b2a2:	e7e5      	b.n	800b270 <_dtoa_r+0x360>
 800b2a4:	f000 80a5 	beq.w	800b3f2 <_dtoa_r+0x4e2>
 800b2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2ac:	f1cb 0400 	rsb	r4, fp, #0
 800b2b0:	4b7c      	ldr	r3, [pc, #496]	; (800b4a4 <_dtoa_r+0x594>)
 800b2b2:	f004 020f 	and.w	r2, r4, #15
 800b2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f5 f90b 	bl	80004d8 <__aeabi_dmul>
 800b2c2:	2702      	movs	r7, #2
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2ca:	4e77      	ldr	r6, [pc, #476]	; (800b4a8 <_dtoa_r+0x598>)
 800b2cc:	1124      	asrs	r4, r4, #4
 800b2ce:	2c00      	cmp	r4, #0
 800b2d0:	f040 8084 	bne.w	800b3dc <_dtoa_r+0x4cc>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1d2      	bne.n	800b27e <_dtoa_r+0x36e>
 800b2d8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b2dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b2e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 8087 	beq.w	800b3f6 <_dtoa_r+0x4e6>
 800b2e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4b6f      	ldr	r3, [pc, #444]	; (800b4ac <_dtoa_r+0x59c>)
 800b2f0:	f7f5 fb64 	bl	80009bc <__aeabi_dcmplt>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d07e      	beq.n	800b3f6 <_dtoa_r+0x4e6>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d07b      	beq.n	800b3f6 <_dtoa_r+0x4e6>
 800b2fe:	9b06      	ldr	r3, [sp, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	dd38      	ble.n	800b376 <_dtoa_r+0x466>
 800b304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b308:	2200      	movs	r2, #0
 800b30a:	4b69      	ldr	r3, [pc, #420]	; (800b4b0 <_dtoa_r+0x5a0>)
 800b30c:	f7f5 f8e4 	bl	80004d8 <__aeabi_dmul>
 800b310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b314:	9c06      	ldr	r4, [sp, #24]
 800b316:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800b31a:	3701      	adds	r7, #1
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7f5 f871 	bl	8000404 <__aeabi_i2d>
 800b322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b326:	f7f5 f8d7 	bl	80004d8 <__aeabi_dmul>
 800b32a:	2200      	movs	r2, #0
 800b32c:	4b61      	ldr	r3, [pc, #388]	; (800b4b4 <_dtoa_r+0x5a4>)
 800b32e:	f7f4 ff1d 	bl	800016c <__adddf3>
 800b332:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b33a:	9611      	str	r6, [sp, #68]	; 0x44
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	d15d      	bne.n	800b3fc <_dtoa_r+0x4ec>
 800b340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b344:	2200      	movs	r2, #0
 800b346:	4b5c      	ldr	r3, [pc, #368]	; (800b4b8 <_dtoa_r+0x5a8>)
 800b348:	f7f4 ff0e 	bl	8000168 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b354:	4633      	mov	r3, r6
 800b356:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b358:	f7f5 fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f040 8295 	bne.w	800b88c <_dtoa_r+0x97c>
 800b362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b368:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b36c:	f7f5 fb26 	bl	80009bc <__aeabi_dcmplt>
 800b370:	2800      	cmp	r0, #0
 800b372:	f040 8289 	bne.w	800b888 <_dtoa_r+0x978>
 800b376:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b37a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b37e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b380:	2b00      	cmp	r3, #0
 800b382:	f2c0 8151 	blt.w	800b628 <_dtoa_r+0x718>
 800b386:	f1bb 0f0e 	cmp.w	fp, #14
 800b38a:	f300 814d 	bgt.w	800b628 <_dtoa_r+0x718>
 800b38e:	4b45      	ldr	r3, [pc, #276]	; (800b4a4 <_dtoa_r+0x594>)
 800b390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b394:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b398:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b39c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f280 80da 	bge.w	800b558 <_dtoa_r+0x648>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f300 80d6 	bgt.w	800b558 <_dtoa_r+0x648>
 800b3ac:	f040 826b 	bne.w	800b886 <_dtoa_r+0x976>
 800b3b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4b40      	ldr	r3, [pc, #256]	; (800b4b8 <_dtoa_r+0x5a8>)
 800b3b8:	f7f5 f88e 	bl	80004d8 <__aeabi_dmul>
 800b3bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3c0:	f7f5 fb10 	bl	80009e4 <__aeabi_dcmpge>
 800b3c4:	9c08      	ldr	r4, [sp, #32]
 800b3c6:	4626      	mov	r6, r4
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f040 8241 	bne.w	800b850 <_dtoa_r+0x940>
 800b3ce:	2331      	movs	r3, #49	; 0x31
 800b3d0:	9f03      	ldr	r7, [sp, #12]
 800b3d2:	f10b 0b01 	add.w	fp, fp, #1
 800b3d6:	f807 3b01 	strb.w	r3, [r7], #1
 800b3da:	e23d      	b.n	800b858 <_dtoa_r+0x948>
 800b3dc:	07e2      	lsls	r2, r4, #31
 800b3de:	d505      	bpl.n	800b3ec <_dtoa_r+0x4dc>
 800b3e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3e4:	f7f5 f878 	bl	80004d8 <__aeabi_dmul>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	3701      	adds	r7, #1
 800b3ec:	1064      	asrs	r4, r4, #1
 800b3ee:	3608      	adds	r6, #8
 800b3f0:	e76d      	b.n	800b2ce <_dtoa_r+0x3be>
 800b3f2:	2702      	movs	r7, #2
 800b3f4:	e770      	b.n	800b2d8 <_dtoa_r+0x3c8>
 800b3f6:	46d8      	mov	r8, fp
 800b3f8:	9c08      	ldr	r4, [sp, #32]
 800b3fa:	e78f      	b.n	800b31c <_dtoa_r+0x40c>
 800b3fc:	9903      	ldr	r1, [sp, #12]
 800b3fe:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <_dtoa_r+0x594>)
 800b400:	4421      	add	r1, r4
 800b402:	9112      	str	r1, [sp, #72]	; 0x48
 800b404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b406:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b40a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b40e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b412:	2900      	cmp	r1, #0
 800b414:	d054      	beq.n	800b4c0 <_dtoa_r+0x5b0>
 800b416:	2000      	movs	r0, #0
 800b418:	4928      	ldr	r1, [pc, #160]	; (800b4bc <_dtoa_r+0x5ac>)
 800b41a:	f7f5 f987 	bl	800072c <__aeabi_ddiv>
 800b41e:	463b      	mov	r3, r7
 800b420:	4632      	mov	r2, r6
 800b422:	f7f4 fea1 	bl	8000168 <__aeabi_dsub>
 800b426:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b42a:	9f03      	ldr	r7, [sp, #12]
 800b42c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b430:	f7f5 fb02 	bl	8000a38 <__aeabi_d2iz>
 800b434:	4604      	mov	r4, r0
 800b436:	f7f4 ffe5 	bl	8000404 <__aeabi_i2d>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b442:	f7f4 fe91 	bl	8000168 <__aeabi_dsub>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	3430      	adds	r4, #48	; 0x30
 800b44c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b454:	f807 4b01 	strb.w	r4, [r7], #1
 800b458:	f7f5 fab0 	bl	80009bc <__aeabi_dcmplt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d173      	bne.n	800b548 <_dtoa_r+0x638>
 800b460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b464:	2000      	movs	r0, #0
 800b466:	4911      	ldr	r1, [pc, #68]	; (800b4ac <_dtoa_r+0x59c>)
 800b468:	f7f4 fe7e 	bl	8000168 <__aeabi_dsub>
 800b46c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b470:	f7f5 faa4 	bl	80009bc <__aeabi_dcmplt>
 800b474:	2800      	cmp	r0, #0
 800b476:	f040 80b6 	bne.w	800b5e6 <_dtoa_r+0x6d6>
 800b47a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b47c:	429f      	cmp	r7, r3
 800b47e:	f43f af7a 	beq.w	800b376 <_dtoa_r+0x466>
 800b482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b486:	2200      	movs	r2, #0
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <_dtoa_r+0x5a0>)
 800b48a:	f7f5 f825 	bl	80004d8 <__aeabi_dmul>
 800b48e:	2200      	movs	r2, #0
 800b490:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b498:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <_dtoa_r+0x5a0>)
 800b49a:	f7f5 f81d 	bl	80004d8 <__aeabi_dmul>
 800b49e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4a2:	e7c3      	b.n	800b42c <_dtoa_r+0x51c>
 800b4a4:	0800ece0 	.word	0x0800ece0
 800b4a8:	0800ecb8 	.word	0x0800ecb8
 800b4ac:	3ff00000 	.word	0x3ff00000
 800b4b0:	40240000 	.word	0x40240000
 800b4b4:	401c0000 	.word	0x401c0000
 800b4b8:	40140000 	.word	0x40140000
 800b4bc:	3fe00000 	.word	0x3fe00000
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f5 f808 	bl	80004d8 <__aeabi_dmul>
 800b4c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4ce:	9c03      	ldr	r4, [sp, #12]
 800b4d0:	9314      	str	r3, [sp, #80]	; 0x50
 800b4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d6:	f7f5 faaf 	bl	8000a38 <__aeabi_d2iz>
 800b4da:	9015      	str	r0, [sp, #84]	; 0x54
 800b4dc:	f7f4 ff92 	bl	8000404 <__aeabi_i2d>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e8:	f7f4 fe3e 	bl	8000168 <__aeabi_dsub>
 800b4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	3330      	adds	r3, #48	; 0x30
 800b4f2:	f804 3b01 	strb.w	r3, [r4], #1
 800b4f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	429c      	cmp	r4, r3
 800b4fc:	f04f 0200 	mov.w	r2, #0
 800b500:	d124      	bne.n	800b54c <_dtoa_r+0x63c>
 800b502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b506:	4baf      	ldr	r3, [pc, #700]	; (800b7c4 <_dtoa_r+0x8b4>)
 800b508:	f7f4 fe30 	bl	800016c <__adddf3>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fa70 	bl	80009f8 <__aeabi_dcmpgt>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d163      	bne.n	800b5e4 <_dtoa_r+0x6d4>
 800b51c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b520:	2000      	movs	r0, #0
 800b522:	49a8      	ldr	r1, [pc, #672]	; (800b7c4 <_dtoa_r+0x8b4>)
 800b524:	f7f4 fe20 	bl	8000168 <__aeabi_dsub>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4630      	mov	r0, r6
 800b52e:	4639      	mov	r1, r7
 800b530:	f7f5 fa44 	bl	80009bc <__aeabi_dcmplt>
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f af1e 	beq.w	800b376 <_dtoa_r+0x466>
 800b53a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b53c:	1e7b      	subs	r3, r7, #1
 800b53e:	9314      	str	r3, [sp, #80]	; 0x50
 800b540:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b544:	2b30      	cmp	r3, #48	; 0x30
 800b546:	d0f8      	beq.n	800b53a <_dtoa_r+0x62a>
 800b548:	46c3      	mov	fp, r8
 800b54a:	e03b      	b.n	800b5c4 <_dtoa_r+0x6b4>
 800b54c:	4b9e      	ldr	r3, [pc, #632]	; (800b7c8 <_dtoa_r+0x8b8>)
 800b54e:	f7f4 ffc3 	bl	80004d8 <__aeabi_dmul>
 800b552:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b556:	e7bc      	b.n	800b4d2 <_dtoa_r+0x5c2>
 800b558:	9f03      	ldr	r7, [sp, #12]
 800b55a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b55e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	f7f5 f8e1 	bl	800072c <__aeabi_ddiv>
 800b56a:	f7f5 fa65 	bl	8000a38 <__aeabi_d2iz>
 800b56e:	4604      	mov	r4, r0
 800b570:	f7f4 ff48 	bl	8000404 <__aeabi_i2d>
 800b574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b578:	f7f4 ffae 	bl	80004d8 <__aeabi_dmul>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4640      	mov	r0, r8
 800b582:	4649      	mov	r1, r9
 800b584:	f7f4 fdf0 	bl	8000168 <__aeabi_dsub>
 800b588:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b58c:	f807 6b01 	strb.w	r6, [r7], #1
 800b590:	9e03      	ldr	r6, [sp, #12]
 800b592:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b596:	1bbe      	subs	r6, r7, r6
 800b598:	45b4      	cmp	ip, r6
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	d136      	bne.n	800b60e <_dtoa_r+0x6fe>
 800b5a0:	f7f4 fde4 	bl	800016c <__adddf3>
 800b5a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5a8:	4680      	mov	r8, r0
 800b5aa:	4689      	mov	r9, r1
 800b5ac:	f7f5 fa24 	bl	80009f8 <__aeabi_dcmpgt>
 800b5b0:	bb58      	cbnz	r0, 800b60a <_dtoa_r+0x6fa>
 800b5b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	f7f5 f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 800b5be:	b108      	cbz	r0, 800b5c4 <_dtoa_r+0x6b4>
 800b5c0:	07e3      	lsls	r3, r4, #31
 800b5c2:	d422      	bmi.n	800b60a <_dtoa_r+0x6fa>
 800b5c4:	4651      	mov	r1, sl
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 fbc2 	bl	800bd50 <_Bfree>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b5d0:	703b      	strb	r3, [r7, #0]
 800b5d2:	f10b 0301 	add.w	r3, fp, #1
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f43f ace6 	beq.w	800afac <_dtoa_r+0x9c>
 800b5e0:	601f      	str	r7, [r3, #0]
 800b5e2:	e4e3      	b.n	800afac <_dtoa_r+0x9c>
 800b5e4:	4627      	mov	r7, r4
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	461f      	mov	r7, r3
 800b5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5ee:	2a39      	cmp	r2, #57	; 0x39
 800b5f0:	d107      	bne.n	800b602 <_dtoa_r+0x6f2>
 800b5f2:	9a03      	ldr	r2, [sp, #12]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d1f7      	bne.n	800b5e8 <_dtoa_r+0x6d8>
 800b5f8:	2230      	movs	r2, #48	; 0x30
 800b5fa:	9903      	ldr	r1, [sp, #12]
 800b5fc:	f108 0801 	add.w	r8, r8, #1
 800b600:	700a      	strb	r2, [r1, #0]
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	3201      	adds	r2, #1
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	e79e      	b.n	800b548 <_dtoa_r+0x638>
 800b60a:	46d8      	mov	r8, fp
 800b60c:	e7eb      	b.n	800b5e6 <_dtoa_r+0x6d6>
 800b60e:	2200      	movs	r2, #0
 800b610:	4b6d      	ldr	r3, [pc, #436]	; (800b7c8 <_dtoa_r+0x8b8>)
 800b612:	f7f4 ff61 	bl	80004d8 <__aeabi_dmul>
 800b616:	2200      	movs	r2, #0
 800b618:	2300      	movs	r3, #0
 800b61a:	4680      	mov	r8, r0
 800b61c:	4689      	mov	r9, r1
 800b61e:	f7f5 f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 800b622:	2800      	cmp	r0, #0
 800b624:	d09b      	beq.n	800b55e <_dtoa_r+0x64e>
 800b626:	e7cd      	b.n	800b5c4 <_dtoa_r+0x6b4>
 800b628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	f000 80c4 	beq.w	800b7b8 <_dtoa_r+0x8a8>
 800b630:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b632:	2a01      	cmp	r2, #1
 800b634:	f300 80a8 	bgt.w	800b788 <_dtoa_r+0x878>
 800b638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	f000 80a0 	beq.w	800b780 <_dtoa_r+0x870>
 800b640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b644:	464f      	mov	r7, r9
 800b646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b64a:	2101      	movs	r1, #1
 800b64c:	441a      	add	r2, r3
 800b64e:	4628      	mov	r0, r5
 800b650:	4499      	add	r9, r3
 800b652:	9209      	str	r2, [sp, #36]	; 0x24
 800b654:	f000 fc7c 	bl	800bf50 <__i2b>
 800b658:	4606      	mov	r6, r0
 800b65a:	b15f      	cbz	r7, 800b674 <_dtoa_r+0x764>
 800b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dd08      	ble.n	800b674 <_dtoa_r+0x764>
 800b662:	42bb      	cmp	r3, r7
 800b664:	bfa8      	it	ge
 800b666:	463b      	movge	r3, r7
 800b668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66a:	eba9 0903 	sub.w	r9, r9, r3
 800b66e:	1aff      	subs	r7, r7, r3
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	9309      	str	r3, [sp, #36]	; 0x24
 800b674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b676:	b1f3      	cbz	r3, 800b6b6 <_dtoa_r+0x7a6>
 800b678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 80a0 	beq.w	800b7c0 <_dtoa_r+0x8b0>
 800b680:	2c00      	cmp	r4, #0
 800b682:	dd10      	ble.n	800b6a6 <_dtoa_r+0x796>
 800b684:	4631      	mov	r1, r6
 800b686:	4622      	mov	r2, r4
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 fd1f 	bl	800c0cc <__pow5mult>
 800b68e:	4652      	mov	r2, sl
 800b690:	4601      	mov	r1, r0
 800b692:	4606      	mov	r6, r0
 800b694:	4628      	mov	r0, r5
 800b696:	f000 fc71 	bl	800bf7c <__multiply>
 800b69a:	4680      	mov	r8, r0
 800b69c:	4651      	mov	r1, sl
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f000 fb56 	bl	800bd50 <_Bfree>
 800b6a4:	46c2      	mov	sl, r8
 800b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a8:	1b1a      	subs	r2, r3, r4
 800b6aa:	d004      	beq.n	800b6b6 <_dtoa_r+0x7a6>
 800b6ac:	4651      	mov	r1, sl
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 fd0c 	bl	800c0cc <__pow5mult>
 800b6b4:	4682      	mov	sl, r0
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 fc49 	bl	800bf50 <__i2b>
 800b6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f340 8082 	ble.w	800b7cc <_dtoa_r+0x8bc>
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f000 fcfd 	bl	800c0cc <__pow5mult>
 800b6d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	dd7b      	ble.n	800b7d2 <_dtoa_r+0x8c2>
 800b6da:	f04f 0800 	mov.w	r8, #0
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6e4:	6918      	ldr	r0, [r3, #16]
 800b6e6:	f000 fbe5 	bl	800beb4 <__hi0bits>
 800b6ea:	f1c0 0020 	rsb	r0, r0, #32
 800b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f0:	4418      	add	r0, r3
 800b6f2:	f010 001f 	ands.w	r0, r0, #31
 800b6f6:	f000 8092 	beq.w	800b81e <_dtoa_r+0x90e>
 800b6fa:	f1c0 0320 	rsb	r3, r0, #32
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	f340 8085 	ble.w	800b80e <_dtoa_r+0x8fe>
 800b704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b706:	f1c0 001c 	rsb	r0, r0, #28
 800b70a:	4403      	add	r3, r0
 800b70c:	4481      	add	r9, r0
 800b70e:	4407      	add	r7, r0
 800b710:	9309      	str	r3, [sp, #36]	; 0x24
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	dd05      	ble.n	800b724 <_dtoa_r+0x814>
 800b718:	4651      	mov	r1, sl
 800b71a:	464a      	mov	r2, r9
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 fd2f 	bl	800c180 <__lshift>
 800b722:	4682      	mov	sl, r0
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	dd05      	ble.n	800b736 <_dtoa_r+0x826>
 800b72a:	4621      	mov	r1, r4
 800b72c:	461a      	mov	r2, r3
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 fd26 	bl	800c180 <__lshift>
 800b734:	4604      	mov	r4, r0
 800b736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d072      	beq.n	800b822 <_dtoa_r+0x912>
 800b73c:	4621      	mov	r1, r4
 800b73e:	4650      	mov	r0, sl
 800b740:	f000 fd8a 	bl	800c258 <__mcmp>
 800b744:	2800      	cmp	r0, #0
 800b746:	da6c      	bge.n	800b822 <_dtoa_r+0x912>
 800b748:	2300      	movs	r3, #0
 800b74a:	4651      	mov	r1, sl
 800b74c:	220a      	movs	r2, #10
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 fb20 	bl	800bd94 <__multadd>
 800b754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b756:	4682      	mov	sl, r0
 800b758:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 81ac 	beq.w	800baba <_dtoa_r+0xbaa>
 800b762:	2300      	movs	r3, #0
 800b764:	4631      	mov	r1, r6
 800b766:	220a      	movs	r2, #10
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 fb13 	bl	800bd94 <__multadd>
 800b76e:	9b06      	ldr	r3, [sp, #24]
 800b770:	4606      	mov	r6, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	f300 8093 	bgt.w	800b89e <_dtoa_r+0x98e>
 800b778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	dc59      	bgt.n	800b832 <_dtoa_r+0x922>
 800b77e:	e08e      	b.n	800b89e <_dtoa_r+0x98e>
 800b780:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b782:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b786:	e75d      	b.n	800b644 <_dtoa_r+0x734>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	1e5c      	subs	r4, r3, #1
 800b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78e:	42a3      	cmp	r3, r4
 800b790:	bfbf      	itttt	lt
 800b792:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b794:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b796:	1ae3      	sublt	r3, r4, r3
 800b798:	18d2      	addlt	r2, r2, r3
 800b79a:	bfa8      	it	ge
 800b79c:	1b1c      	subge	r4, r3, r4
 800b79e:	9b08      	ldr	r3, [sp, #32]
 800b7a0:	bfbe      	ittt	lt
 800b7a2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b7a4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b7a6:	2400      	movlt	r4, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bfb5      	itete	lt
 800b7ac:	eba9 0703 	sublt.w	r7, r9, r3
 800b7b0:	464f      	movge	r7, r9
 800b7b2:	2300      	movlt	r3, #0
 800b7b4:	9b08      	ldrge	r3, [sp, #32]
 800b7b6:	e747      	b.n	800b648 <_dtoa_r+0x738>
 800b7b8:	464f      	mov	r7, r9
 800b7ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b7be:	e74c      	b.n	800b65a <_dtoa_r+0x74a>
 800b7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c2:	e773      	b.n	800b6ac <_dtoa_r+0x79c>
 800b7c4:	3fe00000 	.word	0x3fe00000
 800b7c8:	40240000 	.word	0x40240000
 800b7cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	dc18      	bgt.n	800b804 <_dtoa_r+0x8f4>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	b9b3      	cbnz	r3, 800b804 <_dtoa_r+0x8f4>
 800b7d6:	9b05      	ldr	r3, [sp, #20]
 800b7d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7dc:	b993      	cbnz	r3, 800b804 <_dtoa_r+0x8f4>
 800b7de:	9b05      	ldr	r3, [sp, #20]
 800b7e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7e4:	0d1b      	lsrs	r3, r3, #20
 800b7e6:	051b      	lsls	r3, r3, #20
 800b7e8:	b17b      	cbz	r3, 800b80a <_dtoa_r+0x8fa>
 800b7ea:	f04f 0801 	mov.w	r8, #1
 800b7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f0:	f109 0901 	add.w	r9, r9, #1
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f47f af6f 	bne.w	800b6de <_dtoa_r+0x7ce>
 800b800:	2001      	movs	r0, #1
 800b802:	e774      	b.n	800b6ee <_dtoa_r+0x7de>
 800b804:	f04f 0800 	mov.w	r8, #0
 800b808:	e7f6      	b.n	800b7f8 <_dtoa_r+0x8e8>
 800b80a:	4698      	mov	r8, r3
 800b80c:	e7f4      	b.n	800b7f8 <_dtoa_r+0x8e8>
 800b80e:	d080      	beq.n	800b712 <_dtoa_r+0x802>
 800b810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b812:	331c      	adds	r3, #28
 800b814:	441a      	add	r2, r3
 800b816:	4499      	add	r9, r3
 800b818:	441f      	add	r7, r3
 800b81a:	9209      	str	r2, [sp, #36]	; 0x24
 800b81c:	e779      	b.n	800b712 <_dtoa_r+0x802>
 800b81e:	4603      	mov	r3, r0
 800b820:	e7f6      	b.n	800b810 <_dtoa_r+0x900>
 800b822:	9b08      	ldr	r3, [sp, #32]
 800b824:	2b00      	cmp	r3, #0
 800b826:	dc34      	bgt.n	800b892 <_dtoa_r+0x982>
 800b828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	dd31      	ble.n	800b892 <_dtoa_r+0x982>
 800b82e:	9b08      	ldr	r3, [sp, #32]
 800b830:	9306      	str	r3, [sp, #24]
 800b832:	9b06      	ldr	r3, [sp, #24]
 800b834:	b963      	cbnz	r3, 800b850 <_dtoa_r+0x940>
 800b836:	4621      	mov	r1, r4
 800b838:	2205      	movs	r2, #5
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 faaa 	bl	800bd94 <__multadd>
 800b840:	4601      	mov	r1, r0
 800b842:	4604      	mov	r4, r0
 800b844:	4650      	mov	r0, sl
 800b846:	f000 fd07 	bl	800c258 <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f73f adbf 	bgt.w	800b3ce <_dtoa_r+0x4be>
 800b850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b852:	9f03      	ldr	r7, [sp, #12]
 800b854:	ea6f 0b03 	mvn.w	fp, r3
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	4621      	mov	r1, r4
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 fa76 	bl	800bd50 <_Bfree>
 800b864:	2e00      	cmp	r6, #0
 800b866:	f43f aead 	beq.w	800b5c4 <_dtoa_r+0x6b4>
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	d005      	beq.n	800b87c <_dtoa_r+0x96c>
 800b870:	45b0      	cmp	r8, r6
 800b872:	d003      	beq.n	800b87c <_dtoa_r+0x96c>
 800b874:	4641      	mov	r1, r8
 800b876:	4628      	mov	r0, r5
 800b878:	f000 fa6a 	bl	800bd50 <_Bfree>
 800b87c:	4631      	mov	r1, r6
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 fa66 	bl	800bd50 <_Bfree>
 800b884:	e69e      	b.n	800b5c4 <_dtoa_r+0x6b4>
 800b886:	2400      	movs	r4, #0
 800b888:	4626      	mov	r6, r4
 800b88a:	e7e1      	b.n	800b850 <_dtoa_r+0x940>
 800b88c:	46c3      	mov	fp, r8
 800b88e:	4626      	mov	r6, r4
 800b890:	e59d      	b.n	800b3ce <_dtoa_r+0x4be>
 800b892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 80c8 	beq.w	800ba2a <_dtoa_r+0xb1a>
 800b89a:	9b08      	ldr	r3, [sp, #32]
 800b89c:	9306      	str	r3, [sp, #24]
 800b89e:	2f00      	cmp	r7, #0
 800b8a0:	dd05      	ble.n	800b8ae <_dtoa_r+0x99e>
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	463a      	mov	r2, r7
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f000 fc6a 	bl	800c180 <__lshift>
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	d05b      	beq.n	800b96c <_dtoa_r+0xa5c>
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	6871      	ldr	r1, [r6, #4]
 800b8b8:	f000 fa0a 	bl	800bcd0 <_Balloc>
 800b8bc:	4607      	mov	r7, r0
 800b8be:	b928      	cbnz	r0, 800b8cc <_dtoa_r+0x9bc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b8c6:	4b81      	ldr	r3, [pc, #516]	; (800bacc <_dtoa_r+0xbbc>)
 800b8c8:	f7ff bb36 	b.w	800af38 <_dtoa_r+0x28>
 800b8cc:	6932      	ldr	r2, [r6, #16]
 800b8ce:	f106 010c 	add.w	r1, r6, #12
 800b8d2:	3202      	adds	r2, #2
 800b8d4:	0092      	lsls	r2, r2, #2
 800b8d6:	300c      	adds	r0, #12
 800b8d8:	f001 ff72 	bl	800d7c0 <memcpy>
 800b8dc:	2201      	movs	r2, #1
 800b8de:	4639      	mov	r1, r7
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f000 fc4d 	bl	800c180 <__lshift>
 800b8e6:	46b0      	mov	r8, r6
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	9a03      	ldr	r2, [sp, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	9308      	str	r3, [sp, #32]
 800b8f2:	9b06      	ldr	r3, [sp, #24]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8f8:	9b04      	ldr	r3, [sp, #16]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b900:	9b08      	ldr	r3, [sp, #32]
 800b902:	4621      	mov	r1, r4
 800b904:	3b01      	subs	r3, #1
 800b906:	4650      	mov	r0, sl
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	f7ff fa77 	bl	800adfc <quorem>
 800b90e:	4641      	mov	r1, r8
 800b910:	9006      	str	r0, [sp, #24]
 800b912:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b916:	4650      	mov	r0, sl
 800b918:	f000 fc9e 	bl	800c258 <__mcmp>
 800b91c:	4632      	mov	r2, r6
 800b91e:	9009      	str	r0, [sp, #36]	; 0x24
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	f000 fcb4 	bl	800c290 <__mdiff>
 800b928:	68c2      	ldr	r2, [r0, #12]
 800b92a:	4607      	mov	r7, r0
 800b92c:	bb02      	cbnz	r2, 800b970 <_dtoa_r+0xa60>
 800b92e:	4601      	mov	r1, r0
 800b930:	4650      	mov	r0, sl
 800b932:	f000 fc91 	bl	800c258 <__mcmp>
 800b936:	4602      	mov	r2, r0
 800b938:	4639      	mov	r1, r7
 800b93a:	4628      	mov	r0, r5
 800b93c:	920c      	str	r2, [sp, #48]	; 0x30
 800b93e:	f000 fa07 	bl	800bd50 <_Bfree>
 800b942:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b946:	9f08      	ldr	r7, [sp, #32]
 800b948:	ea43 0102 	orr.w	r1, r3, r2
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	4319      	orrs	r1, r3
 800b950:	d110      	bne.n	800b974 <_dtoa_r+0xa64>
 800b952:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b956:	d029      	beq.n	800b9ac <_dtoa_r+0xa9c>
 800b958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd02      	ble.n	800b964 <_dtoa_r+0xa54>
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b964:	9b04      	ldr	r3, [sp, #16]
 800b966:	f883 9000 	strb.w	r9, [r3]
 800b96a:	e777      	b.n	800b85c <_dtoa_r+0x94c>
 800b96c:	4630      	mov	r0, r6
 800b96e:	e7ba      	b.n	800b8e6 <_dtoa_r+0x9d6>
 800b970:	2201      	movs	r2, #1
 800b972:	e7e1      	b.n	800b938 <_dtoa_r+0xa28>
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	db04      	blt.n	800b984 <_dtoa_r+0xa74>
 800b97a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b97c:	430b      	orrs	r3, r1
 800b97e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b980:	430b      	orrs	r3, r1
 800b982:	d120      	bne.n	800b9c6 <_dtoa_r+0xab6>
 800b984:	2a00      	cmp	r2, #0
 800b986:	dded      	ble.n	800b964 <_dtoa_r+0xa54>
 800b988:	4651      	mov	r1, sl
 800b98a:	2201      	movs	r2, #1
 800b98c:	4628      	mov	r0, r5
 800b98e:	f000 fbf7 	bl	800c180 <__lshift>
 800b992:	4621      	mov	r1, r4
 800b994:	4682      	mov	sl, r0
 800b996:	f000 fc5f 	bl	800c258 <__mcmp>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	dc03      	bgt.n	800b9a6 <_dtoa_r+0xa96>
 800b99e:	d1e1      	bne.n	800b964 <_dtoa_r+0xa54>
 800b9a0:	f019 0f01 	tst.w	r9, #1
 800b9a4:	d0de      	beq.n	800b964 <_dtoa_r+0xa54>
 800b9a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9aa:	d1d8      	bne.n	800b95e <_dtoa_r+0xa4e>
 800b9ac:	2339      	movs	r3, #57	; 0x39
 800b9ae:	9a04      	ldr	r2, [sp, #16]
 800b9b0:	7013      	strb	r3, [r2, #0]
 800b9b2:	463b      	mov	r3, r7
 800b9b4:	461f      	mov	r7, r3
 800b9b6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	2a39      	cmp	r2, #57	; 0x39
 800b9be:	d06b      	beq.n	800ba98 <_dtoa_r+0xb88>
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	e74a      	b.n	800b85c <_dtoa_r+0x94c>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	dd07      	ble.n	800b9da <_dtoa_r+0xaca>
 800b9ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9ce:	d0ed      	beq.n	800b9ac <_dtoa_r+0xa9c>
 800b9d0:	9a04      	ldr	r2, [sp, #16]
 800b9d2:	f109 0301 	add.w	r3, r9, #1
 800b9d6:	7013      	strb	r3, [r2, #0]
 800b9d8:	e740      	b.n	800b85c <_dtoa_r+0x94c>
 800b9da:	9b08      	ldr	r3, [sp, #32]
 800b9dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9de:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d042      	beq.n	800ba6c <_dtoa_r+0xb5c>
 800b9e6:	4651      	mov	r1, sl
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 f9d1 	bl	800bd94 <__multadd>
 800b9f2:	45b0      	cmp	r8, r6
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	f04f 020a 	mov.w	r2, #10
 800b9fe:	4641      	mov	r1, r8
 800ba00:	4628      	mov	r0, r5
 800ba02:	d107      	bne.n	800ba14 <_dtoa_r+0xb04>
 800ba04:	f000 f9c6 	bl	800bd94 <__multadd>
 800ba08:	4680      	mov	r8, r0
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	9308      	str	r3, [sp, #32]
 800ba12:	e775      	b.n	800b900 <_dtoa_r+0x9f0>
 800ba14:	f000 f9be 	bl	800bd94 <__multadd>
 800ba18:	4631      	mov	r1, r6
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	220a      	movs	r2, #10
 800ba20:	4628      	mov	r0, r5
 800ba22:	f000 f9b7 	bl	800bd94 <__multadd>
 800ba26:	4606      	mov	r6, r0
 800ba28:	e7f0      	b.n	800ba0c <_dtoa_r+0xafc>
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	9f03      	ldr	r7, [sp, #12]
 800ba30:	4621      	mov	r1, r4
 800ba32:	4650      	mov	r0, sl
 800ba34:	f7ff f9e2 	bl	800adfc <quorem>
 800ba38:	9b03      	ldr	r3, [sp, #12]
 800ba3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba3e:	f807 9b01 	strb.w	r9, [r7], #1
 800ba42:	1afa      	subs	r2, r7, r3
 800ba44:	9b06      	ldr	r3, [sp, #24]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	dd07      	ble.n	800ba5a <_dtoa_r+0xb4a>
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	220a      	movs	r2, #10
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 f99f 	bl	800bd94 <__multadd>
 800ba56:	4682      	mov	sl, r0
 800ba58:	e7ea      	b.n	800ba30 <_dtoa_r+0xb20>
 800ba5a:	9b06      	ldr	r3, [sp, #24]
 800ba5c:	f04f 0800 	mov.w	r8, #0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfcc      	ite	gt
 800ba64:	461f      	movgt	r7, r3
 800ba66:	2701      	movle	r7, #1
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	441f      	add	r7, r3
 800ba6c:	4651      	mov	r1, sl
 800ba6e:	2201      	movs	r2, #1
 800ba70:	4628      	mov	r0, r5
 800ba72:	f000 fb85 	bl	800c180 <__lshift>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4682      	mov	sl, r0
 800ba7a:	f000 fbed 	bl	800c258 <__mcmp>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	dc97      	bgt.n	800b9b2 <_dtoa_r+0xaa2>
 800ba82:	d102      	bne.n	800ba8a <_dtoa_r+0xb7a>
 800ba84:	f019 0f01 	tst.w	r9, #1
 800ba88:	d193      	bne.n	800b9b2 <_dtoa_r+0xaa2>
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba92:	2a30      	cmp	r2, #48	; 0x30
 800ba94:	d0fa      	beq.n	800ba8c <_dtoa_r+0xb7c>
 800ba96:	e6e1      	b.n	800b85c <_dtoa_r+0x94c>
 800ba98:	9a03      	ldr	r2, [sp, #12]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d18a      	bne.n	800b9b4 <_dtoa_r+0xaa4>
 800ba9e:	2331      	movs	r3, #49	; 0x31
 800baa0:	f10b 0b01 	add.w	fp, fp, #1
 800baa4:	e797      	b.n	800b9d6 <_dtoa_r+0xac6>
 800baa6:	4b0a      	ldr	r3, [pc, #40]	; (800bad0 <_dtoa_r+0xbc0>)
 800baa8:	f7ff ba9f 	b.w	800afea <_dtoa_r+0xda>
 800baac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f47f aa77 	bne.w	800afa2 <_dtoa_r+0x92>
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <_dtoa_r+0xbc4>)
 800bab6:	f7ff ba98 	b.w	800afea <_dtoa_r+0xda>
 800baba:	9b06      	ldr	r3, [sp, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	dcb6      	bgt.n	800ba2e <_dtoa_r+0xb1e>
 800bac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	f73f aeb5 	bgt.w	800b832 <_dtoa_r+0x922>
 800bac8:	e7b1      	b.n	800ba2e <_dtoa_r+0xb1e>
 800baca:	bf00      	nop
 800bacc:	0800ec49 	.word	0x0800ec49
 800bad0:	0800eba4 	.word	0x0800eba4
 800bad4:	0800ebcd 	.word	0x0800ebcd

0800bad8 <_free_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4605      	mov	r5, r0
 800badc:	2900      	cmp	r1, #0
 800bade:	d040      	beq.n	800bb62 <_free_r+0x8a>
 800bae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae4:	1f0c      	subs	r4, r1, #4
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bfb8      	it	lt
 800baea:	18e4      	addlt	r4, r4, r3
 800baec:	f000 f8e4 	bl	800bcb8 <__malloc_lock>
 800baf0:	4a1c      	ldr	r2, [pc, #112]	; (800bb64 <_free_r+0x8c>)
 800baf2:	6813      	ldr	r3, [r2, #0]
 800baf4:	b933      	cbnz	r3, 800bb04 <_free_r+0x2c>
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	6014      	str	r4, [r2, #0]
 800bafa:	4628      	mov	r0, r5
 800bafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb00:	f000 b8e0 	b.w	800bcc4 <__malloc_unlock>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d908      	bls.n	800bb1a <_free_r+0x42>
 800bb08:	6820      	ldr	r0, [r4, #0]
 800bb0a:	1821      	adds	r1, r4, r0
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	bf01      	itttt	eq
 800bb10:	6819      	ldreq	r1, [r3, #0]
 800bb12:	685b      	ldreq	r3, [r3, #4]
 800bb14:	1809      	addeq	r1, r1, r0
 800bb16:	6021      	streq	r1, [r4, #0]
 800bb18:	e7ed      	b.n	800baf6 <_free_r+0x1e>
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b10b      	cbz	r3, 800bb24 <_free_r+0x4c>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d9fa      	bls.n	800bb1a <_free_r+0x42>
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	1850      	adds	r0, r2, r1
 800bb28:	42a0      	cmp	r0, r4
 800bb2a:	d10b      	bne.n	800bb44 <_free_r+0x6c>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	4401      	add	r1, r0
 800bb30:	1850      	adds	r0, r2, r1
 800bb32:	4283      	cmp	r3, r0
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	d1e0      	bne.n	800bafa <_free_r+0x22>
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	4408      	add	r0, r1
 800bb3e:	6010      	str	r0, [r2, #0]
 800bb40:	6053      	str	r3, [r2, #4]
 800bb42:	e7da      	b.n	800bafa <_free_r+0x22>
 800bb44:	d902      	bls.n	800bb4c <_free_r+0x74>
 800bb46:	230c      	movs	r3, #12
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	e7d6      	b.n	800bafa <_free_r+0x22>
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	1821      	adds	r1, r4, r0
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf01      	itttt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	1809      	addeq	r1, r1, r0
 800bb5a:	6021      	streq	r1, [r4, #0]
 800bb5c:	6063      	str	r3, [r4, #4]
 800bb5e:	6054      	str	r4, [r2, #4]
 800bb60:	e7cb      	b.n	800bafa <_free_r+0x22>
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20002bec 	.word	0x20002bec

0800bb68 <malloc>:
 800bb68:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <malloc+0xc>)
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f000 b823 	b.w	800bbb8 <_malloc_r>
 800bb72:	bf00      	nop
 800bb74:	2000007c 	.word	0x2000007c

0800bb78 <sbrk_aligned>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	4e0e      	ldr	r6, [pc, #56]	; (800bbb4 <sbrk_aligned+0x3c>)
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	6831      	ldr	r1, [r6, #0]
 800bb80:	4605      	mov	r5, r0
 800bb82:	b911      	cbnz	r1, 800bb8a <sbrk_aligned+0x12>
 800bb84:	f001 fe0c 	bl	800d7a0 <_sbrk_r>
 800bb88:	6030      	str	r0, [r6, #0]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f001 fe07 	bl	800d7a0 <_sbrk_r>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d00a      	beq.n	800bbac <sbrk_aligned+0x34>
 800bb96:	1cc4      	adds	r4, r0, #3
 800bb98:	f024 0403 	bic.w	r4, r4, #3
 800bb9c:	42a0      	cmp	r0, r4
 800bb9e:	d007      	beq.n	800bbb0 <sbrk_aligned+0x38>
 800bba0:	1a21      	subs	r1, r4, r0
 800bba2:	4628      	mov	r0, r5
 800bba4:	f001 fdfc 	bl	800d7a0 <_sbrk_r>
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d101      	bne.n	800bbb0 <sbrk_aligned+0x38>
 800bbac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	20002bf0 	.word	0x20002bf0

0800bbb8 <_malloc_r>:
 800bbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbbc:	1ccd      	adds	r5, r1, #3
 800bbbe:	f025 0503 	bic.w	r5, r5, #3
 800bbc2:	3508      	adds	r5, #8
 800bbc4:	2d0c      	cmp	r5, #12
 800bbc6:	bf38      	it	cc
 800bbc8:	250c      	movcc	r5, #12
 800bbca:	2d00      	cmp	r5, #0
 800bbcc:	4607      	mov	r7, r0
 800bbce:	db01      	blt.n	800bbd4 <_malloc_r+0x1c>
 800bbd0:	42a9      	cmp	r1, r5
 800bbd2:	d905      	bls.n	800bbe0 <_malloc_r+0x28>
 800bbd4:	230c      	movs	r3, #12
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4630      	mov	r0, r6
 800bbdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bcb4 <_malloc_r+0xfc>
 800bbe4:	f000 f868 	bl	800bcb8 <__malloc_lock>
 800bbe8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbec:	461c      	mov	r4, r3
 800bbee:	bb5c      	cbnz	r4, 800bc48 <_malloc_r+0x90>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	f7ff ffc0 	bl	800bb78 <sbrk_aligned>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	d155      	bne.n	800bcaa <_malloc_r+0xf2>
 800bbfe:	f8d8 4000 	ldr.w	r4, [r8]
 800bc02:	4626      	mov	r6, r4
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	d145      	bne.n	800bc94 <_malloc_r+0xdc>
 800bc08:	2c00      	cmp	r4, #0
 800bc0a:	d048      	beq.n	800bc9e <_malloc_r+0xe6>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4638      	mov	r0, r7
 800bc12:	eb04 0903 	add.w	r9, r4, r3
 800bc16:	f001 fdc3 	bl	800d7a0 <_sbrk_r>
 800bc1a:	4581      	cmp	r9, r0
 800bc1c:	d13f      	bne.n	800bc9e <_malloc_r+0xe6>
 800bc1e:	6821      	ldr	r1, [r4, #0]
 800bc20:	4638      	mov	r0, r7
 800bc22:	1a6d      	subs	r5, r5, r1
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7ff ffa7 	bl	800bb78 <sbrk_aligned>
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	d037      	beq.n	800bc9e <_malloc_r+0xe6>
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	442b      	add	r3, r5
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	f8d8 3000 	ldr.w	r3, [r8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d038      	beq.n	800bcae <_malloc_r+0xf6>
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	42a2      	cmp	r2, r4
 800bc40:	d12b      	bne.n	800bc9a <_malloc_r+0xe2>
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
 800bc46:	e00f      	b.n	800bc68 <_malloc_r+0xb0>
 800bc48:	6822      	ldr	r2, [r4, #0]
 800bc4a:	1b52      	subs	r2, r2, r5
 800bc4c:	d41f      	bmi.n	800bc8e <_malloc_r+0xd6>
 800bc4e:	2a0b      	cmp	r2, #11
 800bc50:	d917      	bls.n	800bc82 <_malloc_r+0xca>
 800bc52:	1961      	adds	r1, r4, r5
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	6025      	str	r5, [r4, #0]
 800bc58:	bf18      	it	ne
 800bc5a:	6059      	strne	r1, [r3, #4]
 800bc5c:	6863      	ldr	r3, [r4, #4]
 800bc5e:	bf08      	it	eq
 800bc60:	f8c8 1000 	streq.w	r1, [r8]
 800bc64:	5162      	str	r2, [r4, r5]
 800bc66:	604b      	str	r3, [r1, #4]
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f104 060b 	add.w	r6, r4, #11
 800bc6e:	f000 f829 	bl	800bcc4 <__malloc_unlock>
 800bc72:	f026 0607 	bic.w	r6, r6, #7
 800bc76:	1d23      	adds	r3, r4, #4
 800bc78:	1af2      	subs	r2, r6, r3
 800bc7a:	d0ae      	beq.n	800bbda <_malloc_r+0x22>
 800bc7c:	1b9b      	subs	r3, r3, r6
 800bc7e:	50a3      	str	r3, [r4, r2]
 800bc80:	e7ab      	b.n	800bbda <_malloc_r+0x22>
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	6862      	ldr	r2, [r4, #4]
 800bc86:	d1dd      	bne.n	800bc44 <_malloc_r+0x8c>
 800bc88:	f8c8 2000 	str.w	r2, [r8]
 800bc8c:	e7ec      	b.n	800bc68 <_malloc_r+0xb0>
 800bc8e:	4623      	mov	r3, r4
 800bc90:	6864      	ldr	r4, [r4, #4]
 800bc92:	e7ac      	b.n	800bbee <_malloc_r+0x36>
 800bc94:	4634      	mov	r4, r6
 800bc96:	6876      	ldr	r6, [r6, #4]
 800bc98:	e7b4      	b.n	800bc04 <_malloc_r+0x4c>
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	e7cc      	b.n	800bc38 <_malloc_r+0x80>
 800bc9e:	230c      	movs	r3, #12
 800bca0:	4638      	mov	r0, r7
 800bca2:	603b      	str	r3, [r7, #0]
 800bca4:	f000 f80e 	bl	800bcc4 <__malloc_unlock>
 800bca8:	e797      	b.n	800bbda <_malloc_r+0x22>
 800bcaa:	6025      	str	r5, [r4, #0]
 800bcac:	e7dc      	b.n	800bc68 <_malloc_r+0xb0>
 800bcae:	605b      	str	r3, [r3, #4]
 800bcb0:	deff      	udf	#255	; 0xff
 800bcb2:	bf00      	nop
 800bcb4:	20002bec 	.word	0x20002bec

0800bcb8 <__malloc_lock>:
 800bcb8:	4801      	ldr	r0, [pc, #4]	; (800bcc0 <__malloc_lock+0x8>)
 800bcba:	f7ff b88a 	b.w	800add2 <__retarget_lock_acquire_recursive>
 800bcbe:	bf00      	nop
 800bcc0:	20002be8 	.word	0x20002be8

0800bcc4 <__malloc_unlock>:
 800bcc4:	4801      	ldr	r0, [pc, #4]	; (800bccc <__malloc_unlock+0x8>)
 800bcc6:	f7ff b885 	b.w	800add4 <__retarget_lock_release_recursive>
 800bcca:	bf00      	nop
 800bccc:	20002be8 	.word	0x20002be8

0800bcd0 <_Balloc>:
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	69c6      	ldr	r6, [r0, #28]
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	b976      	cbnz	r6, 800bcf8 <_Balloc+0x28>
 800bcda:	2010      	movs	r0, #16
 800bcdc:	f7ff ff44 	bl	800bb68 <malloc>
 800bce0:	4602      	mov	r2, r0
 800bce2:	61e0      	str	r0, [r4, #28]
 800bce4:	b920      	cbnz	r0, 800bcf0 <_Balloc+0x20>
 800bce6:	216b      	movs	r1, #107	; 0x6b
 800bce8:	4b17      	ldr	r3, [pc, #92]	; (800bd48 <_Balloc+0x78>)
 800bcea:	4818      	ldr	r0, [pc, #96]	; (800bd4c <_Balloc+0x7c>)
 800bcec:	f001 fd7c 	bl	800d7e8 <__assert_func>
 800bcf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf4:	6006      	str	r6, [r0, #0]
 800bcf6:	60c6      	str	r6, [r0, #12]
 800bcf8:	69e6      	ldr	r6, [r4, #28]
 800bcfa:	68f3      	ldr	r3, [r6, #12]
 800bcfc:	b183      	cbz	r3, 800bd20 <_Balloc+0x50>
 800bcfe:	69e3      	ldr	r3, [r4, #28]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd06:	b9b8      	cbnz	r0, 800bd38 <_Balloc+0x68>
 800bd08:	2101      	movs	r1, #1
 800bd0a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd0e:	1d72      	adds	r2, r6, #5
 800bd10:	4620      	mov	r0, r4
 800bd12:	0092      	lsls	r2, r2, #2
 800bd14:	f001 fd86 	bl	800d824 <_calloc_r>
 800bd18:	b160      	cbz	r0, 800bd34 <_Balloc+0x64>
 800bd1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd1e:	e00e      	b.n	800bd3e <_Balloc+0x6e>
 800bd20:	2221      	movs	r2, #33	; 0x21
 800bd22:	2104      	movs	r1, #4
 800bd24:	4620      	mov	r0, r4
 800bd26:	f001 fd7d 	bl	800d824 <_calloc_r>
 800bd2a:	69e3      	ldr	r3, [r4, #28]
 800bd2c:	60f0      	str	r0, [r6, #12]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e4      	bne.n	800bcfe <_Balloc+0x2e>
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	6802      	ldr	r2, [r0, #0]
 800bd3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd44:	e7f7      	b.n	800bd36 <_Balloc+0x66>
 800bd46:	bf00      	nop
 800bd48:	0800ebda 	.word	0x0800ebda
 800bd4c:	0800ec5a 	.word	0x0800ec5a

0800bd50 <_Bfree>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	69c6      	ldr	r6, [r0, #28]
 800bd54:	4605      	mov	r5, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	b976      	cbnz	r6, 800bd78 <_Bfree+0x28>
 800bd5a:	2010      	movs	r0, #16
 800bd5c:	f7ff ff04 	bl	800bb68 <malloc>
 800bd60:	4602      	mov	r2, r0
 800bd62:	61e8      	str	r0, [r5, #28]
 800bd64:	b920      	cbnz	r0, 800bd70 <_Bfree+0x20>
 800bd66:	218f      	movs	r1, #143	; 0x8f
 800bd68:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <_Bfree+0x3c>)
 800bd6a:	4809      	ldr	r0, [pc, #36]	; (800bd90 <_Bfree+0x40>)
 800bd6c:	f001 fd3c 	bl	800d7e8 <__assert_func>
 800bd70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd74:	6006      	str	r6, [r0, #0]
 800bd76:	60c6      	str	r6, [r0, #12]
 800bd78:	b13c      	cbz	r4, 800bd8a <_Bfree+0x3a>
 800bd7a:	69eb      	ldr	r3, [r5, #28]
 800bd7c:	6862      	ldr	r2, [r4, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd84:	6021      	str	r1, [r4, #0]
 800bd86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	0800ebda 	.word	0x0800ebda
 800bd90:	0800ec5a 	.word	0x0800ec5a

0800bd94 <__multadd>:
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	4607      	mov	r7, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	461e      	mov	r6, r3
 800bd9e:	2000      	movs	r0, #0
 800bda0:	690d      	ldr	r5, [r1, #16]
 800bda2:	f101 0c14 	add.w	ip, r1, #20
 800bda6:	f8dc 3000 	ldr.w	r3, [ip]
 800bdaa:	3001      	adds	r0, #1
 800bdac:	b299      	uxth	r1, r3
 800bdae:	fb02 6101 	mla	r1, r2, r1, r6
 800bdb2:	0c1e      	lsrs	r6, r3, #16
 800bdb4:	0c0b      	lsrs	r3, r1, #16
 800bdb6:	fb02 3306 	mla	r3, r2, r6, r3
 800bdba:	b289      	uxth	r1, r1
 800bdbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdc0:	4285      	cmp	r5, r0
 800bdc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdc6:	f84c 1b04 	str.w	r1, [ip], #4
 800bdca:	dcec      	bgt.n	800bda6 <__multadd+0x12>
 800bdcc:	b30e      	cbz	r6, 800be12 <__multadd+0x7e>
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	42ab      	cmp	r3, r5
 800bdd2:	dc19      	bgt.n	800be08 <__multadd+0x74>
 800bdd4:	6861      	ldr	r1, [r4, #4]
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	3101      	adds	r1, #1
 800bdda:	f7ff ff79 	bl	800bcd0 <_Balloc>
 800bdde:	4680      	mov	r8, r0
 800bde0:	b928      	cbnz	r0, 800bdee <__multadd+0x5a>
 800bde2:	4602      	mov	r2, r0
 800bde4:	21ba      	movs	r1, #186	; 0xba
 800bde6:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <__multadd+0x84>)
 800bde8:	480c      	ldr	r0, [pc, #48]	; (800be1c <__multadd+0x88>)
 800bdea:	f001 fcfd 	bl	800d7e8 <__assert_func>
 800bdee:	6922      	ldr	r2, [r4, #16]
 800bdf0:	f104 010c 	add.w	r1, r4, #12
 800bdf4:	3202      	adds	r2, #2
 800bdf6:	0092      	lsls	r2, r2, #2
 800bdf8:	300c      	adds	r0, #12
 800bdfa:	f001 fce1 	bl	800d7c0 <memcpy>
 800bdfe:	4621      	mov	r1, r4
 800be00:	4638      	mov	r0, r7
 800be02:	f7ff ffa5 	bl	800bd50 <_Bfree>
 800be06:	4644      	mov	r4, r8
 800be08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be0c:	3501      	adds	r5, #1
 800be0e:	615e      	str	r6, [r3, #20]
 800be10:	6125      	str	r5, [r4, #16]
 800be12:	4620      	mov	r0, r4
 800be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be18:	0800ec49 	.word	0x0800ec49
 800be1c:	0800ec5a 	.word	0x0800ec5a

0800be20 <__s2b>:
 800be20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be24:	4615      	mov	r5, r2
 800be26:	2209      	movs	r2, #9
 800be28:	461f      	mov	r7, r3
 800be2a:	3308      	adds	r3, #8
 800be2c:	460c      	mov	r4, r1
 800be2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be32:	4606      	mov	r6, r0
 800be34:	2201      	movs	r2, #1
 800be36:	2100      	movs	r1, #0
 800be38:	429a      	cmp	r2, r3
 800be3a:	db09      	blt.n	800be50 <__s2b+0x30>
 800be3c:	4630      	mov	r0, r6
 800be3e:	f7ff ff47 	bl	800bcd0 <_Balloc>
 800be42:	b940      	cbnz	r0, 800be56 <__s2b+0x36>
 800be44:	4602      	mov	r2, r0
 800be46:	21d3      	movs	r1, #211	; 0xd3
 800be48:	4b18      	ldr	r3, [pc, #96]	; (800beac <__s2b+0x8c>)
 800be4a:	4819      	ldr	r0, [pc, #100]	; (800beb0 <__s2b+0x90>)
 800be4c:	f001 fccc 	bl	800d7e8 <__assert_func>
 800be50:	0052      	lsls	r2, r2, #1
 800be52:	3101      	adds	r1, #1
 800be54:	e7f0      	b.n	800be38 <__s2b+0x18>
 800be56:	9b08      	ldr	r3, [sp, #32]
 800be58:	2d09      	cmp	r5, #9
 800be5a:	6143      	str	r3, [r0, #20]
 800be5c:	f04f 0301 	mov.w	r3, #1
 800be60:	6103      	str	r3, [r0, #16]
 800be62:	dd16      	ble.n	800be92 <__s2b+0x72>
 800be64:	f104 0909 	add.w	r9, r4, #9
 800be68:	46c8      	mov	r8, r9
 800be6a:	442c      	add	r4, r5
 800be6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be70:	4601      	mov	r1, r0
 800be72:	220a      	movs	r2, #10
 800be74:	4630      	mov	r0, r6
 800be76:	3b30      	subs	r3, #48	; 0x30
 800be78:	f7ff ff8c 	bl	800bd94 <__multadd>
 800be7c:	45a0      	cmp	r8, r4
 800be7e:	d1f5      	bne.n	800be6c <__s2b+0x4c>
 800be80:	f1a5 0408 	sub.w	r4, r5, #8
 800be84:	444c      	add	r4, r9
 800be86:	1b2d      	subs	r5, r5, r4
 800be88:	1963      	adds	r3, r4, r5
 800be8a:	42bb      	cmp	r3, r7
 800be8c:	db04      	blt.n	800be98 <__s2b+0x78>
 800be8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be92:	2509      	movs	r5, #9
 800be94:	340a      	adds	r4, #10
 800be96:	e7f6      	b.n	800be86 <__s2b+0x66>
 800be98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be9c:	4601      	mov	r1, r0
 800be9e:	220a      	movs	r2, #10
 800bea0:	4630      	mov	r0, r6
 800bea2:	3b30      	subs	r3, #48	; 0x30
 800bea4:	f7ff ff76 	bl	800bd94 <__multadd>
 800bea8:	e7ee      	b.n	800be88 <__s2b+0x68>
 800beaa:	bf00      	nop
 800beac:	0800ec49 	.word	0x0800ec49
 800beb0:	0800ec5a 	.word	0x0800ec5a

0800beb4 <__hi0bits>:
 800beb4:	0c02      	lsrs	r2, r0, #16
 800beb6:	0412      	lsls	r2, r2, #16
 800beb8:	4603      	mov	r3, r0
 800beba:	b9ca      	cbnz	r2, 800bef0 <__hi0bits+0x3c>
 800bebc:	0403      	lsls	r3, r0, #16
 800bebe:	2010      	movs	r0, #16
 800bec0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bec4:	bf04      	itt	eq
 800bec6:	021b      	lsleq	r3, r3, #8
 800bec8:	3008      	addeq	r0, #8
 800beca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bece:	bf04      	itt	eq
 800bed0:	011b      	lsleq	r3, r3, #4
 800bed2:	3004      	addeq	r0, #4
 800bed4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bed8:	bf04      	itt	eq
 800beda:	009b      	lsleq	r3, r3, #2
 800bedc:	3002      	addeq	r0, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	db05      	blt.n	800beee <__hi0bits+0x3a>
 800bee2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bee6:	f100 0001 	add.w	r0, r0, #1
 800beea:	bf08      	it	eq
 800beec:	2020      	moveq	r0, #32
 800beee:	4770      	bx	lr
 800bef0:	2000      	movs	r0, #0
 800bef2:	e7e5      	b.n	800bec0 <__hi0bits+0xc>

0800bef4 <__lo0bits>:
 800bef4:	6803      	ldr	r3, [r0, #0]
 800bef6:	4602      	mov	r2, r0
 800bef8:	f013 0007 	ands.w	r0, r3, #7
 800befc:	d00b      	beq.n	800bf16 <__lo0bits+0x22>
 800befe:	07d9      	lsls	r1, r3, #31
 800bf00:	d421      	bmi.n	800bf46 <__lo0bits+0x52>
 800bf02:	0798      	lsls	r0, r3, #30
 800bf04:	bf49      	itett	mi
 800bf06:	085b      	lsrmi	r3, r3, #1
 800bf08:	089b      	lsrpl	r3, r3, #2
 800bf0a:	2001      	movmi	r0, #1
 800bf0c:	6013      	strmi	r3, [r2, #0]
 800bf0e:	bf5c      	itt	pl
 800bf10:	2002      	movpl	r0, #2
 800bf12:	6013      	strpl	r3, [r2, #0]
 800bf14:	4770      	bx	lr
 800bf16:	b299      	uxth	r1, r3
 800bf18:	b909      	cbnz	r1, 800bf1e <__lo0bits+0x2a>
 800bf1a:	2010      	movs	r0, #16
 800bf1c:	0c1b      	lsrs	r3, r3, #16
 800bf1e:	b2d9      	uxtb	r1, r3
 800bf20:	b909      	cbnz	r1, 800bf26 <__lo0bits+0x32>
 800bf22:	3008      	adds	r0, #8
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	0719      	lsls	r1, r3, #28
 800bf28:	bf04      	itt	eq
 800bf2a:	091b      	lsreq	r3, r3, #4
 800bf2c:	3004      	addeq	r0, #4
 800bf2e:	0799      	lsls	r1, r3, #30
 800bf30:	bf04      	itt	eq
 800bf32:	089b      	lsreq	r3, r3, #2
 800bf34:	3002      	addeq	r0, #2
 800bf36:	07d9      	lsls	r1, r3, #31
 800bf38:	d403      	bmi.n	800bf42 <__lo0bits+0x4e>
 800bf3a:	085b      	lsrs	r3, r3, #1
 800bf3c:	f100 0001 	add.w	r0, r0, #1
 800bf40:	d003      	beq.n	800bf4a <__lo0bits+0x56>
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	4770      	bx	lr
 800bf46:	2000      	movs	r0, #0
 800bf48:	4770      	bx	lr
 800bf4a:	2020      	movs	r0, #32
 800bf4c:	4770      	bx	lr
	...

0800bf50 <__i2b>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	460c      	mov	r4, r1
 800bf54:	2101      	movs	r1, #1
 800bf56:	f7ff febb 	bl	800bcd0 <_Balloc>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	b928      	cbnz	r0, 800bf6a <__i2b+0x1a>
 800bf5e:	f240 1145 	movw	r1, #325	; 0x145
 800bf62:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <__i2b+0x24>)
 800bf64:	4804      	ldr	r0, [pc, #16]	; (800bf78 <__i2b+0x28>)
 800bf66:	f001 fc3f 	bl	800d7e8 <__assert_func>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	6144      	str	r4, [r0, #20]
 800bf6e:	6103      	str	r3, [r0, #16]
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	bf00      	nop
 800bf74:	0800ec49 	.word	0x0800ec49
 800bf78:	0800ec5a 	.word	0x0800ec5a

0800bf7c <__multiply>:
 800bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	4691      	mov	r9, r2
 800bf82:	690a      	ldr	r2, [r1, #16]
 800bf84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf88:	460c      	mov	r4, r1
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	bfbe      	ittt	lt
 800bf8e:	460b      	movlt	r3, r1
 800bf90:	464c      	movlt	r4, r9
 800bf92:	4699      	movlt	r9, r3
 800bf94:	6927      	ldr	r7, [r4, #16]
 800bf96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf9a:	68a3      	ldr	r3, [r4, #8]
 800bf9c:	6861      	ldr	r1, [r4, #4]
 800bf9e:	eb07 060a 	add.w	r6, r7, sl
 800bfa2:	42b3      	cmp	r3, r6
 800bfa4:	b085      	sub	sp, #20
 800bfa6:	bfb8      	it	lt
 800bfa8:	3101      	addlt	r1, #1
 800bfaa:	f7ff fe91 	bl	800bcd0 <_Balloc>
 800bfae:	b930      	cbnz	r0, 800bfbe <__multiply+0x42>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bfb6:	4b43      	ldr	r3, [pc, #268]	; (800c0c4 <__multiply+0x148>)
 800bfb8:	4843      	ldr	r0, [pc, #268]	; (800c0c8 <__multiply+0x14c>)
 800bfba:	f001 fc15 	bl	800d7e8 <__assert_func>
 800bfbe:	f100 0514 	add.w	r5, r0, #20
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfca:	4543      	cmp	r3, r8
 800bfcc:	d321      	bcc.n	800c012 <__multiply+0x96>
 800bfce:	f104 0314 	add.w	r3, r4, #20
 800bfd2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bfd6:	f109 0314 	add.w	r3, r9, #20
 800bfda:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bfde:	9202      	str	r2, [sp, #8]
 800bfe0:	1b3a      	subs	r2, r7, r4
 800bfe2:	3a15      	subs	r2, #21
 800bfe4:	f022 0203 	bic.w	r2, r2, #3
 800bfe8:	3204      	adds	r2, #4
 800bfea:	f104 0115 	add.w	r1, r4, #21
 800bfee:	428f      	cmp	r7, r1
 800bff0:	bf38      	it	cc
 800bff2:	2204      	movcc	r2, #4
 800bff4:	9201      	str	r2, [sp, #4]
 800bff6:	9a02      	ldr	r2, [sp, #8]
 800bff8:	9303      	str	r3, [sp, #12]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d80c      	bhi.n	800c018 <__multiply+0x9c>
 800bffe:	2e00      	cmp	r6, #0
 800c000:	dd03      	ble.n	800c00a <__multiply+0x8e>
 800c002:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c006:	2b00      	cmp	r3, #0
 800c008:	d05a      	beq.n	800c0c0 <__multiply+0x144>
 800c00a:	6106      	str	r6, [r0, #16]
 800c00c:	b005      	add	sp, #20
 800c00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c012:	f843 2b04 	str.w	r2, [r3], #4
 800c016:	e7d8      	b.n	800bfca <__multiply+0x4e>
 800c018:	f8b3 a000 	ldrh.w	sl, [r3]
 800c01c:	f1ba 0f00 	cmp.w	sl, #0
 800c020:	d023      	beq.n	800c06a <__multiply+0xee>
 800c022:	46a9      	mov	r9, r5
 800c024:	f04f 0c00 	mov.w	ip, #0
 800c028:	f104 0e14 	add.w	lr, r4, #20
 800c02c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c030:	f8d9 1000 	ldr.w	r1, [r9]
 800c034:	fa1f fb82 	uxth.w	fp, r2
 800c038:	b289      	uxth	r1, r1
 800c03a:	fb0a 110b 	mla	r1, sl, fp, r1
 800c03e:	4461      	add	r1, ip
 800c040:	f8d9 c000 	ldr.w	ip, [r9]
 800c044:	0c12      	lsrs	r2, r2, #16
 800c046:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c04a:	fb0a c202 	mla	r2, sl, r2, ip
 800c04e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c052:	b289      	uxth	r1, r1
 800c054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c058:	4577      	cmp	r7, lr
 800c05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c05e:	f849 1b04 	str.w	r1, [r9], #4
 800c062:	d8e3      	bhi.n	800c02c <__multiply+0xb0>
 800c064:	9a01      	ldr	r2, [sp, #4]
 800c066:	f845 c002 	str.w	ip, [r5, r2]
 800c06a:	9a03      	ldr	r2, [sp, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c072:	f1b9 0f00 	cmp.w	r9, #0
 800c076:	d021      	beq.n	800c0bc <__multiply+0x140>
 800c078:	46ae      	mov	lr, r5
 800c07a:	f04f 0a00 	mov.w	sl, #0
 800c07e:	6829      	ldr	r1, [r5, #0]
 800c080:	f104 0c14 	add.w	ip, r4, #20
 800c084:	f8bc b000 	ldrh.w	fp, [ip]
 800c088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c08c:	b289      	uxth	r1, r1
 800c08e:	fb09 220b 	mla	r2, r9, fp, r2
 800c092:	4452      	add	r2, sl
 800c094:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c098:	f84e 1b04 	str.w	r1, [lr], #4
 800c09c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c0a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c0a8:	4567      	cmp	r7, ip
 800c0aa:	fb09 110a 	mla	r1, r9, sl, r1
 800c0ae:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c0b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0b6:	d8e5      	bhi.n	800c084 <__multiply+0x108>
 800c0b8:	9a01      	ldr	r2, [sp, #4]
 800c0ba:	50a9      	str	r1, [r5, r2]
 800c0bc:	3504      	adds	r5, #4
 800c0be:	e79a      	b.n	800bff6 <__multiply+0x7a>
 800c0c0:	3e01      	subs	r6, #1
 800c0c2:	e79c      	b.n	800bffe <__multiply+0x82>
 800c0c4:	0800ec49 	.word	0x0800ec49
 800c0c8:	0800ec5a 	.word	0x0800ec5a

0800c0cc <__pow5mult>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	4615      	mov	r5, r2
 800c0d2:	f012 0203 	ands.w	r2, r2, #3
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	460f      	mov	r7, r1
 800c0da:	d007      	beq.n	800c0ec <__pow5mult+0x20>
 800c0dc:	4c25      	ldr	r4, [pc, #148]	; (800c174 <__pow5mult+0xa8>)
 800c0de:	3a01      	subs	r2, #1
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0e6:	f7ff fe55 	bl	800bd94 <__multadd>
 800c0ea:	4607      	mov	r7, r0
 800c0ec:	10ad      	asrs	r5, r5, #2
 800c0ee:	d03d      	beq.n	800c16c <__pow5mult+0xa0>
 800c0f0:	69f4      	ldr	r4, [r6, #28]
 800c0f2:	b97c      	cbnz	r4, 800c114 <__pow5mult+0x48>
 800c0f4:	2010      	movs	r0, #16
 800c0f6:	f7ff fd37 	bl	800bb68 <malloc>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	61f0      	str	r0, [r6, #28]
 800c0fe:	b928      	cbnz	r0, 800c10c <__pow5mult+0x40>
 800c100:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c104:	4b1c      	ldr	r3, [pc, #112]	; (800c178 <__pow5mult+0xac>)
 800c106:	481d      	ldr	r0, [pc, #116]	; (800c17c <__pow5mult+0xb0>)
 800c108:	f001 fb6e 	bl	800d7e8 <__assert_func>
 800c10c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c110:	6004      	str	r4, [r0, #0]
 800c112:	60c4      	str	r4, [r0, #12]
 800c114:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c11c:	b94c      	cbnz	r4, 800c132 <__pow5mult+0x66>
 800c11e:	f240 2171 	movw	r1, #625	; 0x271
 800c122:	4630      	mov	r0, r6
 800c124:	f7ff ff14 	bl	800bf50 <__i2b>
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c130:	6003      	str	r3, [r0, #0]
 800c132:	f04f 0900 	mov.w	r9, #0
 800c136:	07eb      	lsls	r3, r5, #31
 800c138:	d50a      	bpl.n	800c150 <__pow5mult+0x84>
 800c13a:	4639      	mov	r1, r7
 800c13c:	4622      	mov	r2, r4
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff ff1c 	bl	800bf7c <__multiply>
 800c144:	4680      	mov	r8, r0
 800c146:	4639      	mov	r1, r7
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff fe01 	bl	800bd50 <_Bfree>
 800c14e:	4647      	mov	r7, r8
 800c150:	106d      	asrs	r5, r5, #1
 800c152:	d00b      	beq.n	800c16c <__pow5mult+0xa0>
 800c154:	6820      	ldr	r0, [r4, #0]
 800c156:	b938      	cbnz	r0, 800c168 <__pow5mult+0x9c>
 800c158:	4622      	mov	r2, r4
 800c15a:	4621      	mov	r1, r4
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff ff0d 	bl	800bf7c <__multiply>
 800c162:	6020      	str	r0, [r4, #0]
 800c164:	f8c0 9000 	str.w	r9, [r0]
 800c168:	4604      	mov	r4, r0
 800c16a:	e7e4      	b.n	800c136 <__pow5mult+0x6a>
 800c16c:	4638      	mov	r0, r7
 800c16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c172:	bf00      	nop
 800c174:	0800eda8 	.word	0x0800eda8
 800c178:	0800ebda 	.word	0x0800ebda
 800c17c:	0800ec5a 	.word	0x0800ec5a

0800c180 <__lshift>:
 800c180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	460c      	mov	r4, r1
 800c186:	4607      	mov	r7, r0
 800c188:	4691      	mov	r9, r2
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	6849      	ldr	r1, [r1, #4]
 800c18e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c198:	f108 0601 	add.w	r6, r8, #1
 800c19c:	42b3      	cmp	r3, r6
 800c19e:	db0b      	blt.n	800c1b8 <__lshift+0x38>
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	f7ff fd95 	bl	800bcd0 <_Balloc>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	b948      	cbnz	r0, 800c1be <__lshift+0x3e>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <__lshift+0xd0>)
 800c1b2:	4828      	ldr	r0, [pc, #160]	; (800c254 <__lshift+0xd4>)
 800c1b4:	f001 fb18 	bl	800d7e8 <__assert_func>
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	e7ee      	b.n	800c19c <__lshift+0x1c>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f100 0114 	add.w	r1, r0, #20
 800c1c4:	f100 0210 	add.w	r2, r0, #16
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	4553      	cmp	r3, sl
 800c1cc:	db33      	blt.n	800c236 <__lshift+0xb6>
 800c1ce:	6920      	ldr	r0, [r4, #16]
 800c1d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1d4:	f104 0314 	add.w	r3, r4, #20
 800c1d8:	f019 091f 	ands.w	r9, r9, #31
 800c1dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1e4:	d02b      	beq.n	800c23e <__lshift+0xbe>
 800c1e6:	468a      	mov	sl, r1
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	fa00 f009 	lsl.w	r0, r0, r9
 800c1f4:	4310      	orrs	r0, r2
 800c1f6:	f84a 0b04 	str.w	r0, [sl], #4
 800c1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fe:	459c      	cmp	ip, r3
 800c200:	fa22 f20e 	lsr.w	r2, r2, lr
 800c204:	d8f3      	bhi.n	800c1ee <__lshift+0x6e>
 800c206:	ebac 0304 	sub.w	r3, ip, r4
 800c20a:	3b15      	subs	r3, #21
 800c20c:	f023 0303 	bic.w	r3, r3, #3
 800c210:	3304      	adds	r3, #4
 800c212:	f104 0015 	add.w	r0, r4, #21
 800c216:	4584      	cmp	ip, r0
 800c218:	bf38      	it	cc
 800c21a:	2304      	movcc	r3, #4
 800c21c:	50ca      	str	r2, [r1, r3]
 800c21e:	b10a      	cbz	r2, 800c224 <__lshift+0xa4>
 800c220:	f108 0602 	add.w	r6, r8, #2
 800c224:	3e01      	subs	r6, #1
 800c226:	4638      	mov	r0, r7
 800c228:	4621      	mov	r1, r4
 800c22a:	612e      	str	r6, [r5, #16]
 800c22c:	f7ff fd90 	bl	800bd50 <_Bfree>
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c236:	f842 0f04 	str.w	r0, [r2, #4]!
 800c23a:	3301      	adds	r3, #1
 800c23c:	e7c5      	b.n	800c1ca <__lshift+0x4a>
 800c23e:	3904      	subs	r1, #4
 800c240:	f853 2b04 	ldr.w	r2, [r3], #4
 800c244:	459c      	cmp	ip, r3
 800c246:	f841 2f04 	str.w	r2, [r1, #4]!
 800c24a:	d8f9      	bhi.n	800c240 <__lshift+0xc0>
 800c24c:	e7ea      	b.n	800c224 <__lshift+0xa4>
 800c24e:	bf00      	nop
 800c250:	0800ec49 	.word	0x0800ec49
 800c254:	0800ec5a 	.word	0x0800ec5a

0800c258 <__mcmp>:
 800c258:	4603      	mov	r3, r0
 800c25a:	690a      	ldr	r2, [r1, #16]
 800c25c:	6900      	ldr	r0, [r0, #16]
 800c25e:	b530      	push	{r4, r5, lr}
 800c260:	1a80      	subs	r0, r0, r2
 800c262:	d10d      	bne.n	800c280 <__mcmp+0x28>
 800c264:	3314      	adds	r3, #20
 800c266:	3114      	adds	r1, #20
 800c268:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c26c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c270:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c274:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c278:	4295      	cmp	r5, r2
 800c27a:	d002      	beq.n	800c282 <__mcmp+0x2a>
 800c27c:	d304      	bcc.n	800c288 <__mcmp+0x30>
 800c27e:	2001      	movs	r0, #1
 800c280:	bd30      	pop	{r4, r5, pc}
 800c282:	42a3      	cmp	r3, r4
 800c284:	d3f4      	bcc.n	800c270 <__mcmp+0x18>
 800c286:	e7fb      	b.n	800c280 <__mcmp+0x28>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c28c:	e7f8      	b.n	800c280 <__mcmp+0x28>
	...

0800c290 <__mdiff>:
 800c290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	460d      	mov	r5, r1
 800c296:	4607      	mov	r7, r0
 800c298:	4611      	mov	r1, r2
 800c29a:	4628      	mov	r0, r5
 800c29c:	4614      	mov	r4, r2
 800c29e:	f7ff ffdb 	bl	800c258 <__mcmp>
 800c2a2:	1e06      	subs	r6, r0, #0
 800c2a4:	d111      	bne.n	800c2ca <__mdiff+0x3a>
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff fd11 	bl	800bcd0 <_Balloc>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	b928      	cbnz	r0, 800c2be <__mdiff+0x2e>
 800c2b2:	f240 2137 	movw	r1, #567	; 0x237
 800c2b6:	4b3a      	ldr	r3, [pc, #232]	; (800c3a0 <__mdiff+0x110>)
 800c2b8:	483a      	ldr	r0, [pc, #232]	; (800c3a4 <__mdiff+0x114>)
 800c2ba:	f001 fa95 	bl	800d7e8 <__assert_func>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	bfa4      	itt	ge
 800c2cc:	4623      	movge	r3, r4
 800c2ce:	462c      	movge	r4, r5
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	6861      	ldr	r1, [r4, #4]
 800c2d4:	bfa6      	itte	ge
 800c2d6:	461d      	movge	r5, r3
 800c2d8:	2600      	movge	r6, #0
 800c2da:	2601      	movlt	r6, #1
 800c2dc:	f7ff fcf8 	bl	800bcd0 <_Balloc>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	b918      	cbnz	r0, 800c2ec <__mdiff+0x5c>
 800c2e4:	f240 2145 	movw	r1, #581	; 0x245
 800c2e8:	4b2d      	ldr	r3, [pc, #180]	; (800c3a0 <__mdiff+0x110>)
 800c2ea:	e7e5      	b.n	800c2b8 <__mdiff+0x28>
 800c2ec:	f102 0814 	add.w	r8, r2, #20
 800c2f0:	46c2      	mov	sl, r8
 800c2f2:	f04f 0c00 	mov.w	ip, #0
 800c2f6:	6927      	ldr	r7, [r4, #16]
 800c2f8:	60c6      	str	r6, [r0, #12]
 800c2fa:	692e      	ldr	r6, [r5, #16]
 800c2fc:	f104 0014 	add.w	r0, r4, #20
 800c300:	f105 0914 	add.w	r9, r5, #20
 800c304:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c308:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c30c:	3410      	adds	r4, #16
 800c30e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c312:	f859 3b04 	ldr.w	r3, [r9], #4
 800c316:	fa1f f18b 	uxth.w	r1, fp
 800c31a:	4461      	add	r1, ip
 800c31c:	fa1f fc83 	uxth.w	ip, r3
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	eba1 010c 	sub.w	r1, r1, ip
 800c326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c32a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c32e:	b289      	uxth	r1, r1
 800c330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c334:	454e      	cmp	r6, r9
 800c336:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c33a:	f84a 1b04 	str.w	r1, [sl], #4
 800c33e:	d8e6      	bhi.n	800c30e <__mdiff+0x7e>
 800c340:	1b73      	subs	r3, r6, r5
 800c342:	3b15      	subs	r3, #21
 800c344:	f023 0303 	bic.w	r3, r3, #3
 800c348:	3515      	adds	r5, #21
 800c34a:	3304      	adds	r3, #4
 800c34c:	42ae      	cmp	r6, r5
 800c34e:	bf38      	it	cc
 800c350:	2304      	movcc	r3, #4
 800c352:	4418      	add	r0, r3
 800c354:	4443      	add	r3, r8
 800c356:	461e      	mov	r6, r3
 800c358:	4605      	mov	r5, r0
 800c35a:	4575      	cmp	r5, lr
 800c35c:	d30e      	bcc.n	800c37c <__mdiff+0xec>
 800c35e:	f10e 0103 	add.w	r1, lr, #3
 800c362:	1a09      	subs	r1, r1, r0
 800c364:	f021 0103 	bic.w	r1, r1, #3
 800c368:	3803      	subs	r0, #3
 800c36a:	4586      	cmp	lr, r0
 800c36c:	bf38      	it	cc
 800c36e:	2100      	movcc	r1, #0
 800c370:	440b      	add	r3, r1
 800c372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c376:	b189      	cbz	r1, 800c39c <__mdiff+0x10c>
 800c378:	6117      	str	r7, [r2, #16]
 800c37a:	e7a3      	b.n	800c2c4 <__mdiff+0x34>
 800c37c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c380:	fa1f f188 	uxth.w	r1, r8
 800c384:	4461      	add	r1, ip
 800c386:	140c      	asrs	r4, r1, #16
 800c388:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c38c:	b289      	uxth	r1, r1
 800c38e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c392:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c396:	f846 1b04 	str.w	r1, [r6], #4
 800c39a:	e7de      	b.n	800c35a <__mdiff+0xca>
 800c39c:	3f01      	subs	r7, #1
 800c39e:	e7e8      	b.n	800c372 <__mdiff+0xe2>
 800c3a0:	0800ec49 	.word	0x0800ec49
 800c3a4:	0800ec5a 	.word	0x0800ec5a

0800c3a8 <__ulp>:
 800c3a8:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <__ulp+0x3c>)
 800c3aa:	400b      	ands	r3, r1
 800c3ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dc08      	bgt.n	800c3c6 <__ulp+0x1e>
 800c3b4:	425b      	negs	r3, r3
 800c3b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c3ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3be:	da04      	bge.n	800c3ca <__ulp+0x22>
 800c3c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3c4:	4113      	asrs	r3, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	e008      	b.n	800c3dc <__ulp+0x34>
 800c3ca:	f1a2 0314 	sub.w	r3, r2, #20
 800c3ce:	2b1e      	cmp	r3, #30
 800c3d0:	bfd6      	itet	le
 800c3d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c3d6:	2201      	movgt	r2, #1
 800c3d8:	40da      	lsrle	r2, r3
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4610      	mov	r0, r2
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	7ff00000 	.word	0x7ff00000

0800c3e8 <__b2d>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	6905      	ldr	r5, [r0, #16]
 800c3ec:	f100 0714 	add.w	r7, r0, #20
 800c3f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c3f4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c3f8:	1f2e      	subs	r6, r5, #4
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f7ff fd5a 	bl	800beb4 <__hi0bits>
 800c400:	f1c0 0220 	rsb	r2, r0, #32
 800c404:	280a      	cmp	r0, #10
 800c406:	4603      	mov	r3, r0
 800c408:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c474 <__b2d+0x8c>
 800c40c:	600a      	str	r2, [r1, #0]
 800c40e:	dc12      	bgt.n	800c436 <__b2d+0x4e>
 800c410:	f1c0 0e0b 	rsb	lr, r0, #11
 800c414:	fa24 f20e 	lsr.w	r2, r4, lr
 800c418:	42b7      	cmp	r7, r6
 800c41a:	ea42 010c 	orr.w	r1, r2, ip
 800c41e:	bf2c      	ite	cs
 800c420:	2200      	movcs	r2, #0
 800c422:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c426:	3315      	adds	r3, #21
 800c428:	fa04 f303 	lsl.w	r3, r4, r3
 800c42c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c430:	431a      	orrs	r2, r3
 800c432:	4610      	mov	r0, r2
 800c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c436:	42b7      	cmp	r7, r6
 800c438:	bf2e      	itee	cs
 800c43a:	2200      	movcs	r2, #0
 800c43c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c440:	f1a5 0608 	subcc.w	r6, r5, #8
 800c444:	3b0b      	subs	r3, #11
 800c446:	d012      	beq.n	800c46e <__b2d+0x86>
 800c448:	f1c3 0520 	rsb	r5, r3, #32
 800c44c:	fa22 f105 	lsr.w	r1, r2, r5
 800c450:	409c      	lsls	r4, r3
 800c452:	430c      	orrs	r4, r1
 800c454:	42be      	cmp	r6, r7
 800c456:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800c45a:	bf94      	ite	ls
 800c45c:	2400      	movls	r4, #0
 800c45e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c462:	409a      	lsls	r2, r3
 800c464:	40ec      	lsrs	r4, r5
 800c466:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c46a:	4322      	orrs	r2, r4
 800c46c:	e7e1      	b.n	800c432 <__b2d+0x4a>
 800c46e:	ea44 010c 	orr.w	r1, r4, ip
 800c472:	e7de      	b.n	800c432 <__b2d+0x4a>
 800c474:	3ff00000 	.word	0x3ff00000

0800c478 <__d2b>:
 800c478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c47a:	2101      	movs	r1, #1
 800c47c:	4617      	mov	r7, r2
 800c47e:	461c      	mov	r4, r3
 800c480:	9e08      	ldr	r6, [sp, #32]
 800c482:	f7ff fc25 	bl	800bcd0 <_Balloc>
 800c486:	4605      	mov	r5, r0
 800c488:	b930      	cbnz	r0, 800c498 <__d2b+0x20>
 800c48a:	4602      	mov	r2, r0
 800c48c:	f240 310f 	movw	r1, #783	; 0x30f
 800c490:	4b22      	ldr	r3, [pc, #136]	; (800c51c <__d2b+0xa4>)
 800c492:	4823      	ldr	r0, [pc, #140]	; (800c520 <__d2b+0xa8>)
 800c494:	f001 f9a8 	bl	800d7e8 <__assert_func>
 800c498:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c49c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c4a0:	bb24      	cbnz	r4, 800c4ec <__d2b+0x74>
 800c4a2:	2f00      	cmp	r7, #0
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	d026      	beq.n	800c4f6 <__d2b+0x7e>
 800c4a8:	4668      	mov	r0, sp
 800c4aa:	9700      	str	r7, [sp, #0]
 800c4ac:	f7ff fd22 	bl	800bef4 <__lo0bits>
 800c4b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4b4:	b1e8      	cbz	r0, 800c4f2 <__d2b+0x7a>
 800c4b6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	40c2      	lsrs	r2, r0
 800c4c2:	616b      	str	r3, [r5, #20]
 800c4c4:	9201      	str	r2, [sp, #4]
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	bf14      	ite	ne
 800c4cc:	2102      	movne	r1, #2
 800c4ce:	2101      	moveq	r1, #1
 800c4d0:	61ab      	str	r3, [r5, #24]
 800c4d2:	6129      	str	r1, [r5, #16]
 800c4d4:	b1bc      	cbz	r4, 800c506 <__d2b+0x8e>
 800c4d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c4da:	4404      	add	r4, r0
 800c4dc:	6034      	str	r4, [r6, #0]
 800c4de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e4:	6018      	str	r0, [r3, #0]
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	b003      	add	sp, #12
 800c4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	e7d7      	b.n	800c4a2 <__d2b+0x2a>
 800c4f2:	6169      	str	r1, [r5, #20]
 800c4f4:	e7e7      	b.n	800c4c6 <__d2b+0x4e>
 800c4f6:	a801      	add	r0, sp, #4
 800c4f8:	f7ff fcfc 	bl	800bef4 <__lo0bits>
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	2101      	movs	r1, #1
 800c500:	616b      	str	r3, [r5, #20]
 800c502:	3020      	adds	r0, #32
 800c504:	e7e5      	b.n	800c4d2 <__d2b+0x5a>
 800c506:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c50a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c50e:	6030      	str	r0, [r6, #0]
 800c510:	6918      	ldr	r0, [r3, #16]
 800c512:	f7ff fccf 	bl	800beb4 <__hi0bits>
 800c516:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c51a:	e7e2      	b.n	800c4e2 <__d2b+0x6a>
 800c51c:	0800ec49 	.word	0x0800ec49
 800c520:	0800ec5a 	.word	0x0800ec5a

0800c524 <__ratio>:
 800c524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	4688      	mov	r8, r1
 800c52a:	4669      	mov	r1, sp
 800c52c:	4681      	mov	r9, r0
 800c52e:	f7ff ff5b 	bl	800c3e8 <__b2d>
 800c532:	460f      	mov	r7, r1
 800c534:	4604      	mov	r4, r0
 800c536:	460d      	mov	r5, r1
 800c538:	4640      	mov	r0, r8
 800c53a:	a901      	add	r1, sp, #4
 800c53c:	f7ff ff54 	bl	800c3e8 <__b2d>
 800c540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c544:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c548:	468b      	mov	fp, r1
 800c54a:	eba3 0c02 	sub.w	ip, r3, r2
 800c54e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bfd5      	itete	le
 800c55c:	460a      	movle	r2, r1
 800c55e:	462a      	movgt	r2, r5
 800c560:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c564:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c568:	bfd8      	it	le
 800c56a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c56e:	465b      	mov	r3, fp
 800c570:	4602      	mov	r2, r0
 800c572:	4639      	mov	r1, r7
 800c574:	4620      	mov	r0, r4
 800c576:	f7f4 f8d9 	bl	800072c <__aeabi_ddiv>
 800c57a:	b003      	add	sp, #12
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c580 <__copybits>:
 800c580:	3901      	subs	r1, #1
 800c582:	b570      	push	{r4, r5, r6, lr}
 800c584:	1149      	asrs	r1, r1, #5
 800c586:	6914      	ldr	r4, [r2, #16]
 800c588:	3101      	adds	r1, #1
 800c58a:	f102 0314 	add.w	r3, r2, #20
 800c58e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c592:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c596:	1f05      	subs	r5, r0, #4
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d30c      	bcc.n	800c5b6 <__copybits+0x36>
 800c59c:	1aa3      	subs	r3, r4, r2
 800c59e:	3b11      	subs	r3, #17
 800c5a0:	f023 0303 	bic.w	r3, r3, #3
 800c5a4:	3211      	adds	r2, #17
 800c5a6:	42a2      	cmp	r2, r4
 800c5a8:	bf88      	it	hi
 800c5aa:	2300      	movhi	r3, #0
 800c5ac:	4418      	add	r0, r3
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	4288      	cmp	r0, r1
 800c5b2:	d305      	bcc.n	800c5c0 <__copybits+0x40>
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800c5be:	e7eb      	b.n	800c598 <__copybits+0x18>
 800c5c0:	f840 3b04 	str.w	r3, [r0], #4
 800c5c4:	e7f4      	b.n	800c5b0 <__copybits+0x30>

0800c5c6 <__any_on>:
 800c5c6:	f100 0214 	add.w	r2, r0, #20
 800c5ca:	6900      	ldr	r0, [r0, #16]
 800c5cc:	114b      	asrs	r3, r1, #5
 800c5ce:	4298      	cmp	r0, r3
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	db11      	blt.n	800c5f8 <__any_on+0x32>
 800c5d4:	dd0a      	ble.n	800c5ec <__any_on+0x26>
 800c5d6:	f011 011f 	ands.w	r1, r1, #31
 800c5da:	d007      	beq.n	800c5ec <__any_on+0x26>
 800c5dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5e0:	fa24 f001 	lsr.w	r0, r4, r1
 800c5e4:	fa00 f101 	lsl.w	r1, r0, r1
 800c5e8:	428c      	cmp	r4, r1
 800c5ea:	d10b      	bne.n	800c604 <__any_on+0x3e>
 800c5ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d803      	bhi.n	800c5fc <__any_on+0x36>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	bd10      	pop	{r4, pc}
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	e7f7      	b.n	800c5ec <__any_on+0x26>
 800c5fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c600:	2900      	cmp	r1, #0
 800c602:	d0f5      	beq.n	800c5f0 <__any_on+0x2a>
 800c604:	2001      	movs	r0, #1
 800c606:	e7f6      	b.n	800c5f6 <__any_on+0x30>

0800c608 <sulp>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	460f      	mov	r7, r1
 800c60e:	4690      	mov	r8, r2
 800c610:	f7ff feca 	bl	800c3a8 <__ulp>
 800c614:	4604      	mov	r4, r0
 800c616:	460d      	mov	r5, r1
 800c618:	f1b8 0f00 	cmp.w	r8, #0
 800c61c:	d011      	beq.n	800c642 <sulp+0x3a>
 800c61e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c626:	2b00      	cmp	r3, #0
 800c628:	dd0b      	ble.n	800c642 <sulp+0x3a>
 800c62a:	2400      	movs	r4, #0
 800c62c:	051b      	lsls	r3, r3, #20
 800c62e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c636:	4622      	mov	r2, r4
 800c638:	462b      	mov	r3, r5
 800c63a:	f7f3 ff4d 	bl	80004d8 <__aeabi_dmul>
 800c63e:	4604      	mov	r4, r0
 800c640:	460d      	mov	r5, r1
 800c642:	4620      	mov	r0, r4
 800c644:	4629      	mov	r1, r5
 800c646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64a:	0000      	movs	r0, r0
 800c64c:	0000      	movs	r0, r0
	...

0800c650 <_strtod_l>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	b09f      	sub	sp, #124	; 0x7c
 800c656:	9217      	str	r2, [sp, #92]	; 0x5c
 800c658:	2200      	movs	r2, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	921a      	str	r2, [sp, #104]	; 0x68
 800c65e:	460d      	mov	r5, r1
 800c660:	f04f 0800 	mov.w	r8, #0
 800c664:	f04f 0900 	mov.w	r9, #0
 800c668:	460a      	mov	r2, r1
 800c66a:	9219      	str	r2, [sp, #100]	; 0x64
 800c66c:	7811      	ldrb	r1, [r2, #0]
 800c66e:	292b      	cmp	r1, #43	; 0x2b
 800c670:	d04a      	beq.n	800c708 <_strtod_l+0xb8>
 800c672:	d838      	bhi.n	800c6e6 <_strtod_l+0x96>
 800c674:	290d      	cmp	r1, #13
 800c676:	d832      	bhi.n	800c6de <_strtod_l+0x8e>
 800c678:	2908      	cmp	r1, #8
 800c67a:	d832      	bhi.n	800c6e2 <_strtod_l+0x92>
 800c67c:	2900      	cmp	r1, #0
 800c67e:	d03b      	beq.n	800c6f8 <_strtod_l+0xa8>
 800c680:	2200      	movs	r2, #0
 800c682:	920e      	str	r2, [sp, #56]	; 0x38
 800c684:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c686:	7832      	ldrb	r2, [r6, #0]
 800c688:	2a30      	cmp	r2, #48	; 0x30
 800c68a:	f040 80b2 	bne.w	800c7f2 <_strtod_l+0x1a2>
 800c68e:	7872      	ldrb	r2, [r6, #1]
 800c690:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c694:	2a58      	cmp	r2, #88	; 0x58
 800c696:	d16e      	bne.n	800c776 <_strtod_l+0x126>
 800c698:	9302      	str	r3, [sp, #8]
 800c69a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c69c:	4620      	mov	r0, r4
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	ab1a      	add	r3, sp, #104	; 0x68
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	4a8c      	ldr	r2, [pc, #560]	; (800c8d8 <_strtod_l+0x288>)
 800c6a6:	ab1b      	add	r3, sp, #108	; 0x6c
 800c6a8:	a919      	add	r1, sp, #100	; 0x64
 800c6aa:	f001 f937 	bl	800d91c <__gethex>
 800c6ae:	f010 070f 	ands.w	r7, r0, #15
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	d005      	beq.n	800c6c2 <_strtod_l+0x72>
 800c6b6:	2f06      	cmp	r7, #6
 800c6b8:	d128      	bne.n	800c70c <_strtod_l+0xbc>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	3601      	adds	r6, #1
 800c6be:	9619      	str	r6, [sp, #100]	; 0x64
 800c6c0:	930e      	str	r3, [sp, #56]	; 0x38
 800c6c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f040 85a0 	bne.w	800d20a <_strtod_l+0xbba>
 800c6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6cc:	b1cb      	cbz	r3, 800c702 <_strtod_l+0xb2>
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	b01f      	add	sp, #124	; 0x7c
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	2920      	cmp	r1, #32
 800c6e0:	d1ce      	bne.n	800c680 <_strtod_l+0x30>
 800c6e2:	3201      	adds	r2, #1
 800c6e4:	e7c1      	b.n	800c66a <_strtod_l+0x1a>
 800c6e6:	292d      	cmp	r1, #45	; 0x2d
 800c6e8:	d1ca      	bne.n	800c680 <_strtod_l+0x30>
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	910e      	str	r1, [sp, #56]	; 0x38
 800c6ee:	1c51      	adds	r1, r2, #1
 800c6f0:	9119      	str	r1, [sp, #100]	; 0x64
 800c6f2:	7852      	ldrb	r2, [r2, #1]
 800c6f4:	2a00      	cmp	r2, #0
 800c6f6:	d1c5      	bne.n	800c684 <_strtod_l+0x34>
 800c6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6fa:	9519      	str	r5, [sp, #100]	; 0x64
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f040 8582 	bne.w	800d206 <_strtod_l+0xbb6>
 800c702:	4642      	mov	r2, r8
 800c704:	464b      	mov	r3, r9
 800c706:	e7e5      	b.n	800c6d4 <_strtod_l+0x84>
 800c708:	2100      	movs	r1, #0
 800c70a:	e7ef      	b.n	800c6ec <_strtod_l+0x9c>
 800c70c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c70e:	b13a      	cbz	r2, 800c720 <_strtod_l+0xd0>
 800c710:	2135      	movs	r1, #53	; 0x35
 800c712:	a81c      	add	r0, sp, #112	; 0x70
 800c714:	f7ff ff34 	bl	800c580 <__copybits>
 800c718:	4620      	mov	r0, r4
 800c71a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c71c:	f7ff fb18 	bl	800bd50 <_Bfree>
 800c720:	3f01      	subs	r7, #1
 800c722:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c724:	2f04      	cmp	r7, #4
 800c726:	d806      	bhi.n	800c736 <_strtod_l+0xe6>
 800c728:	e8df f007 	tbb	[pc, r7]
 800c72c:	201d0314 	.word	0x201d0314
 800c730:	14          	.byte	0x14
 800c731:	00          	.byte	0x00
 800c732:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c736:	05e9      	lsls	r1, r5, #23
 800c738:	bf48      	it	mi
 800c73a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c73e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c742:	0d1b      	lsrs	r3, r3, #20
 800c744:	051b      	lsls	r3, r3, #20
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1bb      	bne.n	800c6c2 <_strtod_l+0x72>
 800c74a:	f7fe fb17 	bl	800ad7c <__errno>
 800c74e:	2322      	movs	r3, #34	; 0x22
 800c750:	6003      	str	r3, [r0, #0]
 800c752:	e7b6      	b.n	800c6c2 <_strtod_l+0x72>
 800c754:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c758:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c75c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c760:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c764:	e7e7      	b.n	800c736 <_strtod_l+0xe6>
 800c766:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c8dc <_strtod_l+0x28c>
 800c76a:	e7e4      	b.n	800c736 <_strtod_l+0xe6>
 800c76c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c770:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c774:	e7df      	b.n	800c736 <_strtod_l+0xe6>
 800c776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	9219      	str	r2, [sp, #100]	; 0x64
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	2b30      	cmp	r3, #48	; 0x30
 800c780:	d0f9      	beq.n	800c776 <_strtod_l+0x126>
 800c782:	2b00      	cmp	r3, #0
 800c784:	d09d      	beq.n	800c6c2 <_strtod_l+0x72>
 800c786:	2301      	movs	r3, #1
 800c788:	f04f 0a00 	mov.w	sl, #0
 800c78c:	220a      	movs	r2, #10
 800c78e:	46d3      	mov	fp, sl
 800c790:	9305      	str	r3, [sp, #20]
 800c792:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c794:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c798:	930b      	str	r3, [sp, #44]	; 0x2c
 800c79a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c79c:	7806      	ldrb	r6, [r0, #0]
 800c79e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c7a2:	b2d9      	uxtb	r1, r3
 800c7a4:	2909      	cmp	r1, #9
 800c7a6:	d926      	bls.n	800c7f6 <_strtod_l+0x1a6>
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	494d      	ldr	r1, [pc, #308]	; (800c8e0 <_strtod_l+0x290>)
 800c7ac:	f000 ffe6 	bl	800d77c <strncmp>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d030      	beq.n	800c816 <_strtod_l+0x1c6>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	465e      	mov	r6, fp
 800c7bc:	9008      	str	r0, [sp, #32]
 800c7be:	2a65      	cmp	r2, #101	; 0x65
 800c7c0:	d001      	beq.n	800c7c6 <_strtod_l+0x176>
 800c7c2:	2a45      	cmp	r2, #69	; 0x45
 800c7c4:	d113      	bne.n	800c7ee <_strtod_l+0x19e>
 800c7c6:	b91e      	cbnz	r6, 800c7d0 <_strtod_l+0x180>
 800c7c8:	9a05      	ldr	r2, [sp, #20]
 800c7ca:	4302      	orrs	r2, r0
 800c7cc:	d094      	beq.n	800c6f8 <_strtod_l+0xa8>
 800c7ce:	2600      	movs	r6, #0
 800c7d0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c7d2:	1c6a      	adds	r2, r5, #1
 800c7d4:	9219      	str	r2, [sp, #100]	; 0x64
 800c7d6:	786a      	ldrb	r2, [r5, #1]
 800c7d8:	2a2b      	cmp	r2, #43	; 0x2b
 800c7da:	d074      	beq.n	800c8c6 <_strtod_l+0x276>
 800c7dc:	2a2d      	cmp	r2, #45	; 0x2d
 800c7de:	d078      	beq.n	800c8d2 <_strtod_l+0x282>
 800c7e0:	f04f 0c00 	mov.w	ip, #0
 800c7e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7e8:	2909      	cmp	r1, #9
 800c7ea:	d97f      	bls.n	800c8ec <_strtod_l+0x29c>
 800c7ec:	9519      	str	r5, [sp, #100]	; 0x64
 800c7ee:	2700      	movs	r7, #0
 800c7f0:	e09e      	b.n	800c930 <_strtod_l+0x2e0>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e7c8      	b.n	800c788 <_strtod_l+0x138>
 800c7f6:	f1bb 0f08 	cmp.w	fp, #8
 800c7fa:	bfd8      	it	le
 800c7fc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c7fe:	f100 0001 	add.w	r0, r0, #1
 800c802:	bfd6      	itet	le
 800c804:	fb02 3301 	mlale	r3, r2, r1, r3
 800c808:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c80c:	930a      	strle	r3, [sp, #40]	; 0x28
 800c80e:	f10b 0b01 	add.w	fp, fp, #1
 800c812:	9019      	str	r0, [sp, #100]	; 0x64
 800c814:	e7c1      	b.n	800c79a <_strtod_l+0x14a>
 800c816:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	9219      	str	r2, [sp, #100]	; 0x64
 800c81c:	785a      	ldrb	r2, [r3, #1]
 800c81e:	f1bb 0f00 	cmp.w	fp, #0
 800c822:	d037      	beq.n	800c894 <_strtod_l+0x244>
 800c824:	465e      	mov	r6, fp
 800c826:	9008      	str	r0, [sp, #32]
 800c828:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c82c:	2b09      	cmp	r3, #9
 800c82e:	d912      	bls.n	800c856 <_strtod_l+0x206>
 800c830:	2301      	movs	r3, #1
 800c832:	e7c4      	b.n	800c7be <_strtod_l+0x16e>
 800c834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c836:	3001      	adds	r0, #1
 800c838:	1c5a      	adds	r2, r3, #1
 800c83a:	9219      	str	r2, [sp, #100]	; 0x64
 800c83c:	785a      	ldrb	r2, [r3, #1]
 800c83e:	2a30      	cmp	r2, #48	; 0x30
 800c840:	d0f8      	beq.n	800c834 <_strtod_l+0x1e4>
 800c842:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c846:	2b08      	cmp	r3, #8
 800c848:	f200 84e4 	bhi.w	800d214 <_strtod_l+0xbc4>
 800c84c:	9008      	str	r0, [sp, #32]
 800c84e:	2000      	movs	r0, #0
 800c850:	4606      	mov	r6, r0
 800c852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c854:	930b      	str	r3, [sp, #44]	; 0x2c
 800c856:	3a30      	subs	r2, #48	; 0x30
 800c858:	f100 0301 	add.w	r3, r0, #1
 800c85c:	d014      	beq.n	800c888 <_strtod_l+0x238>
 800c85e:	9908      	ldr	r1, [sp, #32]
 800c860:	eb00 0c06 	add.w	ip, r0, r6
 800c864:	4419      	add	r1, r3
 800c866:	9108      	str	r1, [sp, #32]
 800c868:	4633      	mov	r3, r6
 800c86a:	210a      	movs	r1, #10
 800c86c:	4563      	cmp	r3, ip
 800c86e:	d113      	bne.n	800c898 <_strtod_l+0x248>
 800c870:	1833      	adds	r3, r6, r0
 800c872:	2b08      	cmp	r3, #8
 800c874:	f106 0601 	add.w	r6, r6, #1
 800c878:	4406      	add	r6, r0
 800c87a:	dc1a      	bgt.n	800c8b2 <_strtod_l+0x262>
 800c87c:	230a      	movs	r3, #10
 800c87e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c880:	fb03 2301 	mla	r3, r3, r1, r2
 800c884:	930a      	str	r3, [sp, #40]	; 0x28
 800c886:	2300      	movs	r3, #0
 800c888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c88a:	4618      	mov	r0, r3
 800c88c:	1c51      	adds	r1, r2, #1
 800c88e:	9119      	str	r1, [sp, #100]	; 0x64
 800c890:	7852      	ldrb	r2, [r2, #1]
 800c892:	e7c9      	b.n	800c828 <_strtod_l+0x1d8>
 800c894:	4658      	mov	r0, fp
 800c896:	e7d2      	b.n	800c83e <_strtod_l+0x1ee>
 800c898:	2b08      	cmp	r3, #8
 800c89a:	f103 0301 	add.w	r3, r3, #1
 800c89e:	dc03      	bgt.n	800c8a8 <_strtod_l+0x258>
 800c8a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c8a2:	434f      	muls	r7, r1
 800c8a4:	970a      	str	r7, [sp, #40]	; 0x28
 800c8a6:	e7e1      	b.n	800c86c <_strtod_l+0x21c>
 800c8a8:	2b10      	cmp	r3, #16
 800c8aa:	bfd8      	it	le
 800c8ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c8b0:	e7dc      	b.n	800c86c <_strtod_l+0x21c>
 800c8b2:	2e10      	cmp	r6, #16
 800c8b4:	bfdc      	itt	le
 800c8b6:	230a      	movle	r3, #10
 800c8b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c8bc:	e7e3      	b.n	800c886 <_strtod_l+0x236>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9308      	str	r3, [sp, #32]
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e780      	b.n	800c7c8 <_strtod_l+0x178>
 800c8c6:	f04f 0c00 	mov.w	ip, #0
 800c8ca:	1caa      	adds	r2, r5, #2
 800c8cc:	9219      	str	r2, [sp, #100]	; 0x64
 800c8ce:	78aa      	ldrb	r2, [r5, #2]
 800c8d0:	e788      	b.n	800c7e4 <_strtod_l+0x194>
 800c8d2:	f04f 0c01 	mov.w	ip, #1
 800c8d6:	e7f8      	b.n	800c8ca <_strtod_l+0x27a>
 800c8d8:	0800edb8 	.word	0x0800edb8
 800c8dc:	7ff00000 	.word	0x7ff00000
 800c8e0:	0800edb4 	.word	0x0800edb4
 800c8e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8e6:	1c51      	adds	r1, r2, #1
 800c8e8:	9119      	str	r1, [sp, #100]	; 0x64
 800c8ea:	7852      	ldrb	r2, [r2, #1]
 800c8ec:	2a30      	cmp	r2, #48	; 0x30
 800c8ee:	d0f9      	beq.n	800c8e4 <_strtod_l+0x294>
 800c8f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8f4:	2908      	cmp	r1, #8
 800c8f6:	f63f af7a 	bhi.w	800c7ee <_strtod_l+0x19e>
 800c8fa:	3a30      	subs	r2, #48	; 0x30
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c900:	920c      	str	r2, [sp, #48]	; 0x30
 800c902:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c904:	1c57      	adds	r7, r2, #1
 800c906:	9719      	str	r7, [sp, #100]	; 0x64
 800c908:	7852      	ldrb	r2, [r2, #1]
 800c90a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c90e:	f1be 0f09 	cmp.w	lr, #9
 800c912:	d938      	bls.n	800c986 <_strtod_l+0x336>
 800c914:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c916:	1a7f      	subs	r7, r7, r1
 800c918:	2f08      	cmp	r7, #8
 800c91a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c91e:	dc03      	bgt.n	800c928 <_strtod_l+0x2d8>
 800c920:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c922:	428f      	cmp	r7, r1
 800c924:	bfa8      	it	ge
 800c926:	460f      	movge	r7, r1
 800c928:	f1bc 0f00 	cmp.w	ip, #0
 800c92c:	d000      	beq.n	800c930 <_strtod_l+0x2e0>
 800c92e:	427f      	negs	r7, r7
 800c930:	2e00      	cmp	r6, #0
 800c932:	d14f      	bne.n	800c9d4 <_strtod_l+0x384>
 800c934:	9905      	ldr	r1, [sp, #20]
 800c936:	4301      	orrs	r1, r0
 800c938:	f47f aec3 	bne.w	800c6c2 <_strtod_l+0x72>
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f47f aedb 	bne.w	800c6f8 <_strtod_l+0xa8>
 800c942:	2a69      	cmp	r2, #105	; 0x69
 800c944:	d029      	beq.n	800c99a <_strtod_l+0x34a>
 800c946:	dc26      	bgt.n	800c996 <_strtod_l+0x346>
 800c948:	2a49      	cmp	r2, #73	; 0x49
 800c94a:	d026      	beq.n	800c99a <_strtod_l+0x34a>
 800c94c:	2a4e      	cmp	r2, #78	; 0x4e
 800c94e:	f47f aed3 	bne.w	800c6f8 <_strtod_l+0xa8>
 800c952:	499a      	ldr	r1, [pc, #616]	; (800cbbc <_strtod_l+0x56c>)
 800c954:	a819      	add	r0, sp, #100	; 0x64
 800c956:	f001 fa23 	bl	800dda0 <__match>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f43f aecc 	beq.w	800c6f8 <_strtod_l+0xa8>
 800c960:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b28      	cmp	r3, #40	; 0x28
 800c966:	d12f      	bne.n	800c9c8 <_strtod_l+0x378>
 800c968:	4995      	ldr	r1, [pc, #596]	; (800cbc0 <_strtod_l+0x570>)
 800c96a:	aa1c      	add	r2, sp, #112	; 0x70
 800c96c:	a819      	add	r0, sp, #100	; 0x64
 800c96e:	f001 fa2b 	bl	800ddc8 <__hexnan>
 800c972:	2805      	cmp	r0, #5
 800c974:	d128      	bne.n	800c9c8 <_strtod_l+0x378>
 800c976:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c978:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c97c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c980:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c984:	e69d      	b.n	800c6c2 <_strtod_l+0x72>
 800c986:	210a      	movs	r1, #10
 800c988:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c98a:	fb01 2107 	mla	r1, r1, r7, r2
 800c98e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c992:	9209      	str	r2, [sp, #36]	; 0x24
 800c994:	e7b5      	b.n	800c902 <_strtod_l+0x2b2>
 800c996:	2a6e      	cmp	r2, #110	; 0x6e
 800c998:	e7d9      	b.n	800c94e <_strtod_l+0x2fe>
 800c99a:	498a      	ldr	r1, [pc, #552]	; (800cbc4 <_strtod_l+0x574>)
 800c99c:	a819      	add	r0, sp, #100	; 0x64
 800c99e:	f001 f9ff 	bl	800dda0 <__match>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f43f aea8 	beq.w	800c6f8 <_strtod_l+0xa8>
 800c9a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9aa:	4987      	ldr	r1, [pc, #540]	; (800cbc8 <_strtod_l+0x578>)
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	a819      	add	r0, sp, #100	; 0x64
 800c9b0:	9319      	str	r3, [sp, #100]	; 0x64
 800c9b2:	f001 f9f5 	bl	800dda0 <__match>
 800c9b6:	b910      	cbnz	r0, 800c9be <_strtod_l+0x36e>
 800c9b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	9319      	str	r3, [sp, #100]	; 0x64
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800cbcc <_strtod_l+0x57c>
 800c9c6:	e67c      	b.n	800c6c2 <_strtod_l+0x72>
 800c9c8:	4881      	ldr	r0, [pc, #516]	; (800cbd0 <_strtod_l+0x580>)
 800c9ca:	f000 ff07 	bl	800d7dc <nan>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	4689      	mov	r9, r1
 800c9d2:	e676      	b.n	800c6c2 <_strtod_l+0x72>
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	f1bb 0f00 	cmp.w	fp, #0
 800c9da:	bf08      	it	eq
 800c9dc:	46b3      	moveq	fp, r6
 800c9de:	1afb      	subs	r3, r7, r3
 800c9e0:	2e10      	cmp	r6, #16
 800c9e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9e4:	4635      	mov	r5, r6
 800c9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e8:	bfa8      	it	ge
 800c9ea:	2510      	movge	r5, #16
 800c9ec:	f7f3 fcfa 	bl	80003e4 <__aeabi_ui2d>
 800c9f0:	2e09      	cmp	r6, #9
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	dd13      	ble.n	800ca20 <_strtod_l+0x3d0>
 800c9f8:	4b76      	ldr	r3, [pc, #472]	; (800cbd4 <_strtod_l+0x584>)
 800c9fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c9fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ca02:	f7f3 fd69 	bl	80004d8 <__aeabi_dmul>
 800ca06:	4680      	mov	r8, r0
 800ca08:	4650      	mov	r0, sl
 800ca0a:	4689      	mov	r9, r1
 800ca0c:	f7f3 fcea 	bl	80003e4 <__aeabi_ui2d>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	4640      	mov	r0, r8
 800ca16:	4649      	mov	r1, r9
 800ca18:	f7f3 fba8 	bl	800016c <__adddf3>
 800ca1c:	4680      	mov	r8, r0
 800ca1e:	4689      	mov	r9, r1
 800ca20:	2e0f      	cmp	r6, #15
 800ca22:	dc36      	bgt.n	800ca92 <_strtod_l+0x442>
 800ca24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f43f ae4b 	beq.w	800c6c2 <_strtod_l+0x72>
 800ca2c:	dd22      	ble.n	800ca74 <_strtod_l+0x424>
 800ca2e:	2b16      	cmp	r3, #22
 800ca30:	dc09      	bgt.n	800ca46 <_strtod_l+0x3f6>
 800ca32:	4968      	ldr	r1, [pc, #416]	; (800cbd4 <_strtod_l+0x584>)
 800ca34:	4642      	mov	r2, r8
 800ca36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca40:	f7f3 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ca44:	e7c3      	b.n	800c9ce <_strtod_l+0x37e>
 800ca46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca48:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	db20      	blt.n	800ca92 <_strtod_l+0x442>
 800ca50:	4c60      	ldr	r4, [pc, #384]	; (800cbd4 <_strtod_l+0x584>)
 800ca52:	f1c6 060f 	rsb	r6, r6, #15
 800ca56:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca60:	464b      	mov	r3, r9
 800ca62:	f7f3 fd39 	bl	80004d8 <__aeabi_dmul>
 800ca66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca68:	1b9e      	subs	r6, r3, r6
 800ca6a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ca6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca72:	e7e5      	b.n	800ca40 <_strtod_l+0x3f0>
 800ca74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca76:	3316      	adds	r3, #22
 800ca78:	db0b      	blt.n	800ca92 <_strtod_l+0x442>
 800ca7a:	9b08      	ldr	r3, [sp, #32]
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	1bdf      	subs	r7, r3, r7
 800ca80:	4b54      	ldr	r3, [pc, #336]	; (800cbd4 <_strtod_l+0x584>)
 800ca82:	4649      	mov	r1, r9
 800ca84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	f7f3 fe4e 	bl	800072c <__aeabi_ddiv>
 800ca90:	e79d      	b.n	800c9ce <_strtod_l+0x37e>
 800ca92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca94:	1b75      	subs	r5, r6, r5
 800ca96:	441d      	add	r5, r3
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	dd70      	ble.n	800cb7e <_strtod_l+0x52e>
 800ca9c:	f015 030f 	ands.w	r3, r5, #15
 800caa0:	d00a      	beq.n	800cab8 <_strtod_l+0x468>
 800caa2:	494c      	ldr	r1, [pc, #304]	; (800cbd4 <_strtod_l+0x584>)
 800caa4:	4642      	mov	r2, r8
 800caa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800caaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caae:	464b      	mov	r3, r9
 800cab0:	f7f3 fd12 	bl	80004d8 <__aeabi_dmul>
 800cab4:	4680      	mov	r8, r0
 800cab6:	4689      	mov	r9, r1
 800cab8:	f035 050f 	bics.w	r5, r5, #15
 800cabc:	d04d      	beq.n	800cb5a <_strtod_l+0x50a>
 800cabe:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cac2:	dd22      	ble.n	800cb0a <_strtod_l+0x4ba>
 800cac4:	2600      	movs	r6, #0
 800cac6:	46b3      	mov	fp, r6
 800cac8:	960b      	str	r6, [sp, #44]	; 0x2c
 800caca:	9608      	str	r6, [sp, #32]
 800cacc:	2322      	movs	r3, #34	; 0x22
 800cace:	f04f 0800 	mov.w	r8, #0
 800cad2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800cbcc <_strtod_l+0x57c>
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f43f adf1 	beq.w	800c6c2 <_strtod_l+0x72>
 800cae0:	4620      	mov	r0, r4
 800cae2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cae4:	f7ff f934 	bl	800bd50 <_Bfree>
 800cae8:	4620      	mov	r0, r4
 800caea:	9908      	ldr	r1, [sp, #32]
 800caec:	f7ff f930 	bl	800bd50 <_Bfree>
 800caf0:	4659      	mov	r1, fp
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff f92c 	bl	800bd50 <_Bfree>
 800caf8:	4620      	mov	r0, r4
 800cafa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cafc:	f7ff f928 	bl	800bd50 <_Bfree>
 800cb00:	4631      	mov	r1, r6
 800cb02:	4620      	mov	r0, r4
 800cb04:	f7ff f924 	bl	800bd50 <_Bfree>
 800cb08:	e5db      	b.n	800c6c2 <_strtod_l+0x72>
 800cb0a:	4b33      	ldr	r3, [pc, #204]	; (800cbd8 <_strtod_l+0x588>)
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	9305      	str	r3, [sp, #20]
 800cb10:	2300      	movs	r3, #0
 800cb12:	4649      	mov	r1, r9
 800cb14:	469a      	mov	sl, r3
 800cb16:	112d      	asrs	r5, r5, #4
 800cb18:	2d01      	cmp	r5, #1
 800cb1a:	dc21      	bgt.n	800cb60 <_strtod_l+0x510>
 800cb1c:	b10b      	cbz	r3, 800cb22 <_strtod_l+0x4d2>
 800cb1e:	4680      	mov	r8, r0
 800cb20:	4689      	mov	r9, r1
 800cb22:	492d      	ldr	r1, [pc, #180]	; (800cbd8 <_strtod_l+0x588>)
 800cb24:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cb28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cb2c:	4642      	mov	r2, r8
 800cb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb32:	464b      	mov	r3, r9
 800cb34:	f7f3 fcd0 	bl	80004d8 <__aeabi_dmul>
 800cb38:	4b24      	ldr	r3, [pc, #144]	; (800cbcc <_strtod_l+0x57c>)
 800cb3a:	460a      	mov	r2, r1
 800cb3c:	400b      	ands	r3, r1
 800cb3e:	4927      	ldr	r1, [pc, #156]	; (800cbdc <_strtod_l+0x58c>)
 800cb40:	4680      	mov	r8, r0
 800cb42:	428b      	cmp	r3, r1
 800cb44:	d8be      	bhi.n	800cac4 <_strtod_l+0x474>
 800cb46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb4a:	428b      	cmp	r3, r1
 800cb4c:	bf86      	itte	hi
 800cb4e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800cb52:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800cbe0 <_strtod_l+0x590>
 800cb56:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	e07b      	b.n	800cc58 <_strtod_l+0x608>
 800cb60:	07ea      	lsls	r2, r5, #31
 800cb62:	d505      	bpl.n	800cb70 <_strtod_l+0x520>
 800cb64:	9b05      	ldr	r3, [sp, #20]
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7f3 fcb5 	bl	80004d8 <__aeabi_dmul>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9a05      	ldr	r2, [sp, #20]
 800cb72:	f10a 0a01 	add.w	sl, sl, #1
 800cb76:	3208      	adds	r2, #8
 800cb78:	106d      	asrs	r5, r5, #1
 800cb7a:	9205      	str	r2, [sp, #20]
 800cb7c:	e7cc      	b.n	800cb18 <_strtod_l+0x4c8>
 800cb7e:	d0ec      	beq.n	800cb5a <_strtod_l+0x50a>
 800cb80:	426d      	negs	r5, r5
 800cb82:	f015 020f 	ands.w	r2, r5, #15
 800cb86:	d00a      	beq.n	800cb9e <_strtod_l+0x54e>
 800cb88:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <_strtod_l+0x584>)
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb90:	4649      	mov	r1, r9
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	f7f3 fdc9 	bl	800072c <__aeabi_ddiv>
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	112d      	asrs	r5, r5, #4
 800cba0:	d0db      	beq.n	800cb5a <_strtod_l+0x50a>
 800cba2:	2d1f      	cmp	r5, #31
 800cba4:	dd1e      	ble.n	800cbe4 <_strtod_l+0x594>
 800cba6:	2600      	movs	r6, #0
 800cba8:	46b3      	mov	fp, r6
 800cbaa:	960b      	str	r6, [sp, #44]	; 0x2c
 800cbac:	9608      	str	r6, [sp, #32]
 800cbae:	2322      	movs	r3, #34	; 0x22
 800cbb0:	f04f 0800 	mov.w	r8, #0
 800cbb4:	f04f 0900 	mov.w	r9, #0
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	e78d      	b.n	800cad8 <_strtod_l+0x488>
 800cbbc:	0800eba1 	.word	0x0800eba1
 800cbc0:	0800edcc 	.word	0x0800edcc
 800cbc4:	0800eb99 	.word	0x0800eb99
 800cbc8:	0800ebd0 	.word	0x0800ebd0
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	0800ef5d 	.word	0x0800ef5d
 800cbd4:	0800ece0 	.word	0x0800ece0
 800cbd8:	0800ecb8 	.word	0x0800ecb8
 800cbdc:	7ca00000 	.word	0x7ca00000
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	f015 0310 	ands.w	r3, r5, #16
 800cbe8:	bf18      	it	ne
 800cbea:	236a      	movne	r3, #106	; 0x6a
 800cbec:	4640      	mov	r0, r8
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	4649      	mov	r1, r9
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800cec0 <_strtod_l+0x870>
 800cbf8:	07ea      	lsls	r2, r5, #31
 800cbfa:	d504      	bpl.n	800cc06 <_strtod_l+0x5b6>
 800cbfc:	e9da 2300 	ldrd	r2, r3, [sl]
 800cc00:	f7f3 fc6a 	bl	80004d8 <__aeabi_dmul>
 800cc04:	2301      	movs	r3, #1
 800cc06:	106d      	asrs	r5, r5, #1
 800cc08:	f10a 0a08 	add.w	sl, sl, #8
 800cc0c:	d1f4      	bne.n	800cbf8 <_strtod_l+0x5a8>
 800cc0e:	b10b      	cbz	r3, 800cc14 <_strtod_l+0x5c4>
 800cc10:	4680      	mov	r8, r0
 800cc12:	4689      	mov	r9, r1
 800cc14:	9b05      	ldr	r3, [sp, #20]
 800cc16:	b1bb      	cbz	r3, 800cc48 <_strtod_l+0x5f8>
 800cc18:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cc1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	4649      	mov	r1, r9
 800cc24:	dd10      	ble.n	800cc48 <_strtod_l+0x5f8>
 800cc26:	2b1f      	cmp	r3, #31
 800cc28:	f340 8128 	ble.w	800ce7c <_strtod_l+0x82c>
 800cc2c:	2b34      	cmp	r3, #52	; 0x34
 800cc2e:	bfd8      	it	le
 800cc30:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800cc34:	f04f 0800 	mov.w	r8, #0
 800cc38:	bfcf      	iteee	gt
 800cc3a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cc3e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc42:	4093      	lslle	r3, r2
 800cc44:	ea03 0901 	andle.w	r9, r3, r1
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	4649      	mov	r1, r9
 800cc50:	f7f3 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1a6      	bne.n	800cba6 <_strtod_l+0x556>
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	465a      	mov	r2, fp
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4633      	mov	r3, r6
 800cc62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc64:	f7ff f8dc 	bl	800be20 <__s2b>
 800cc68:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f43f af2a 	beq.w	800cac4 <_strtod_l+0x474>
 800cc70:	2600      	movs	r6, #0
 800cc72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	2a00      	cmp	r2, #0
 800cc78:	eba3 0307 	sub.w	r3, r3, r7
 800cc7c:	bfa8      	it	ge
 800cc7e:	2300      	movge	r3, #0
 800cc80:	46b3      	mov	fp, r6
 800cc82:	9312      	str	r3, [sp, #72]	; 0x48
 800cc84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cc88:	9316      	str	r3, [sp, #88]	; 0x58
 800cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	6859      	ldr	r1, [r3, #4]
 800cc90:	f7ff f81e 	bl	800bcd0 <_Balloc>
 800cc94:	9008      	str	r0, [sp, #32]
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f43f af18 	beq.w	800cacc <_strtod_l+0x47c>
 800cc9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9e:	300c      	adds	r0, #12
 800cca0:	691a      	ldr	r2, [r3, #16]
 800cca2:	f103 010c 	add.w	r1, r3, #12
 800cca6:	3202      	adds	r2, #2
 800cca8:	0092      	lsls	r2, r2, #2
 800ccaa:	f000 fd89 	bl	800d7c0 <memcpy>
 800ccae:	ab1c      	add	r3, sp, #112	; 0x70
 800ccb0:	9301      	str	r3, [sp, #4]
 800ccb2:	ab1b      	add	r3, sp, #108	; 0x6c
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	464b      	mov	r3, r9
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ccc0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800ccc4:	f7ff fbd8 	bl	800c478 <__d2b>
 800ccc8:	901a      	str	r0, [sp, #104]	; 0x68
 800ccca:	2800      	cmp	r0, #0
 800cccc:	f43f aefe 	beq.w	800cacc <_strtod_l+0x47c>
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f7ff f93c 	bl	800bf50 <__i2b>
 800ccd8:	4683      	mov	fp, r0
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f43f aef6 	beq.w	800cacc <_strtod_l+0x47c>
 800cce0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cce2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cce4:	2f00      	cmp	r7, #0
 800cce6:	bfab      	itete	ge
 800cce8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800ccea:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ccec:	eb07 0a03 	addge.w	sl, r7, r3
 800ccf0:	1bdd      	sublt	r5, r3, r7
 800ccf2:	9b05      	ldr	r3, [sp, #20]
 800ccf4:	bfa8      	it	ge
 800ccf6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ccf8:	eba7 0703 	sub.w	r7, r7, r3
 800ccfc:	4417      	add	r7, r2
 800ccfe:	4b71      	ldr	r3, [pc, #452]	; (800cec4 <_strtod_l+0x874>)
 800cd00:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800cd04:	bfb8      	it	lt
 800cd06:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800cd0a:	429f      	cmp	r7, r3
 800cd0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd10:	f280 80c7 	bge.w	800cea2 <_strtod_l+0x852>
 800cd14:	1bdb      	subs	r3, r3, r7
 800cd16:	2b1f      	cmp	r3, #31
 800cd18:	f04f 0101 	mov.w	r1, #1
 800cd1c:	eba2 0203 	sub.w	r2, r2, r3
 800cd20:	f300 80b3 	bgt.w	800ce8a <_strtod_l+0x83a>
 800cd24:	fa01 f303 	lsl.w	r3, r1, r3
 800cd28:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9310      	str	r3, [sp, #64]	; 0x40
 800cd2e:	eb0a 0702 	add.w	r7, sl, r2
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	45ba      	cmp	sl, r7
 800cd36:	4415      	add	r5, r2
 800cd38:	441d      	add	r5, r3
 800cd3a:	4653      	mov	r3, sl
 800cd3c:	bfa8      	it	ge
 800cd3e:	463b      	movge	r3, r7
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	bfa8      	it	ge
 800cd44:	462b      	movge	r3, r5
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	bfc2      	ittt	gt
 800cd4a:	1aff      	subgt	r7, r7, r3
 800cd4c:	1aed      	subgt	r5, r5, r3
 800cd4e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800cd52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dd17      	ble.n	800cd88 <_strtod_l+0x738>
 800cd58:	4659      	mov	r1, fp
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f7ff f9b5 	bl	800c0cc <__pow5mult>
 800cd62:	4683      	mov	fp, r0
 800cd64:	2800      	cmp	r0, #0
 800cd66:	f43f aeb1 	beq.w	800cacc <_strtod_l+0x47c>
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7ff f904 	bl	800bf7c <__multiply>
 800cd74:	900a      	str	r0, [sp, #40]	; 0x28
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f43f aea8 	beq.w	800cacc <_strtod_l+0x47c>
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cd80:	f7fe ffe6 	bl	800bd50 <_Bfree>
 800cd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd86:	931a      	str	r3, [sp, #104]	; 0x68
 800cd88:	2f00      	cmp	r7, #0
 800cd8a:	f300 808f 	bgt.w	800ceac <_strtod_l+0x85c>
 800cd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	dd08      	ble.n	800cda6 <_strtod_l+0x756>
 800cd94:	4620      	mov	r0, r4
 800cd96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cd98:	9908      	ldr	r1, [sp, #32]
 800cd9a:	f7ff f997 	bl	800c0cc <__pow5mult>
 800cd9e:	9008      	str	r0, [sp, #32]
 800cda0:	2800      	cmp	r0, #0
 800cda2:	f43f ae93 	beq.w	800cacc <_strtod_l+0x47c>
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	dd08      	ble.n	800cdbc <_strtod_l+0x76c>
 800cdaa:	462a      	mov	r2, r5
 800cdac:	4620      	mov	r0, r4
 800cdae:	9908      	ldr	r1, [sp, #32]
 800cdb0:	f7ff f9e6 	bl	800c180 <__lshift>
 800cdb4:	9008      	str	r0, [sp, #32]
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f ae88 	beq.w	800cacc <_strtod_l+0x47c>
 800cdbc:	f1ba 0f00 	cmp.w	sl, #0
 800cdc0:	dd08      	ble.n	800cdd4 <_strtod_l+0x784>
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff f9da 	bl	800c180 <__lshift>
 800cdcc:	4683      	mov	fp, r0
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f ae7c 	beq.w	800cacc <_strtod_l+0x47c>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	9a08      	ldr	r2, [sp, #32]
 800cdd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cdda:	f7ff fa59 	bl	800c290 <__mdiff>
 800cdde:	4606      	mov	r6, r0
 800cde0:	2800      	cmp	r0, #0
 800cde2:	f43f ae73 	beq.w	800cacc <_strtod_l+0x47c>
 800cde6:	2500      	movs	r5, #0
 800cde8:	68c3      	ldr	r3, [r0, #12]
 800cdea:	4659      	mov	r1, fp
 800cdec:	60c5      	str	r5, [r0, #12]
 800cdee:	930a      	str	r3, [sp, #40]	; 0x28
 800cdf0:	f7ff fa32 	bl	800c258 <__mcmp>
 800cdf4:	42a8      	cmp	r0, r5
 800cdf6:	da6b      	bge.n	800ced0 <_strtod_l+0x880>
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdfa:	ea53 0308 	orrs.w	r3, r3, r8
 800cdfe:	f040 808f 	bne.w	800cf20 <_strtod_l+0x8d0>
 800ce02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f040 808a 	bne.w	800cf20 <_strtod_l+0x8d0>
 800ce0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce10:	0d1b      	lsrs	r3, r3, #20
 800ce12:	051b      	lsls	r3, r3, #20
 800ce14:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce18:	f240 8082 	bls.w	800cf20 <_strtod_l+0x8d0>
 800ce1c:	6973      	ldr	r3, [r6, #20]
 800ce1e:	b913      	cbnz	r3, 800ce26 <_strtod_l+0x7d6>
 800ce20:	6933      	ldr	r3, [r6, #16]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	dd7c      	ble.n	800cf20 <_strtod_l+0x8d0>
 800ce26:	4631      	mov	r1, r6
 800ce28:	2201      	movs	r2, #1
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7ff f9a8 	bl	800c180 <__lshift>
 800ce30:	4659      	mov	r1, fp
 800ce32:	4606      	mov	r6, r0
 800ce34:	f7ff fa10 	bl	800c258 <__mcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	dd71      	ble.n	800cf20 <_strtod_l+0x8d0>
 800ce3c:	9905      	ldr	r1, [sp, #20]
 800ce3e:	464b      	mov	r3, r9
 800ce40:	4a21      	ldr	r2, [pc, #132]	; (800cec8 <_strtod_l+0x878>)
 800ce42:	2900      	cmp	r1, #0
 800ce44:	f000 808d 	beq.w	800cf62 <_strtod_l+0x912>
 800ce48:	ea02 0109 	and.w	r1, r2, r9
 800ce4c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce50:	f300 8087 	bgt.w	800cf62 <_strtod_l+0x912>
 800ce54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce58:	f77f aea9 	ble.w	800cbae <_strtod_l+0x55e>
 800ce5c:	4640      	mov	r0, r8
 800ce5e:	4649      	mov	r1, r9
 800ce60:	4b1a      	ldr	r3, [pc, #104]	; (800cecc <_strtod_l+0x87c>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	f7f3 fb38 	bl	80004d8 <__aeabi_dmul>
 800ce68:	4b17      	ldr	r3, [pc, #92]	; (800cec8 <_strtod_l+0x878>)
 800ce6a:	4680      	mov	r8, r0
 800ce6c:	400b      	ands	r3, r1
 800ce6e:	4689      	mov	r9, r1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f47f ae35 	bne.w	800cae0 <_strtod_l+0x490>
 800ce76:	2322      	movs	r3, #34	; 0x22
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	e631      	b.n	800cae0 <_strtod_l+0x490>
 800ce7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	ea03 0808 	and.w	r8, r3, r8
 800ce88:	e6de      	b.n	800cc48 <_strtod_l+0x5f8>
 800ce8a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800ce8e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800ce92:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800ce96:	37e2      	adds	r7, #226	; 0xe2
 800ce98:	fa01 f307 	lsl.w	r3, r1, r7
 800ce9c:	9310      	str	r3, [sp, #64]	; 0x40
 800ce9e:	9113      	str	r1, [sp, #76]	; 0x4c
 800cea0:	e745      	b.n	800cd2e <_strtod_l+0x6de>
 800cea2:	2300      	movs	r3, #0
 800cea4:	9310      	str	r3, [sp, #64]	; 0x40
 800cea6:	2301      	movs	r3, #1
 800cea8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceaa:	e740      	b.n	800cd2e <_strtod_l+0x6de>
 800ceac:	463a      	mov	r2, r7
 800ceae:	4620      	mov	r0, r4
 800ceb0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ceb2:	f7ff f965 	bl	800c180 <__lshift>
 800ceb6:	901a      	str	r0, [sp, #104]	; 0x68
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f47f af68 	bne.w	800cd8e <_strtod_l+0x73e>
 800cebe:	e605      	b.n	800cacc <_strtod_l+0x47c>
 800cec0:	0800ede0 	.word	0x0800ede0
 800cec4:	fffffc02 	.word	0xfffffc02
 800cec8:	7ff00000 	.word	0x7ff00000
 800cecc:	39500000 	.word	0x39500000
 800ced0:	46ca      	mov	sl, r9
 800ced2:	d165      	bne.n	800cfa0 <_strtod_l+0x950>
 800ced4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ced6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceda:	b352      	cbz	r2, 800cf32 <_strtod_l+0x8e2>
 800cedc:	4a9e      	ldr	r2, [pc, #632]	; (800d158 <_strtod_l+0xb08>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d12a      	bne.n	800cf38 <_strtod_l+0x8e8>
 800cee2:	9b05      	ldr	r3, [sp, #20]
 800cee4:	4641      	mov	r1, r8
 800cee6:	b1fb      	cbz	r3, 800cf28 <_strtod_l+0x8d8>
 800cee8:	4b9c      	ldr	r3, [pc, #624]	; (800d15c <_strtod_l+0xb0c>)
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceee:	ea09 0303 	and.w	r3, r9, r3
 800cef2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cef6:	d81a      	bhi.n	800cf2e <_strtod_l+0x8de>
 800cef8:	0d1b      	lsrs	r3, r3, #20
 800cefa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	4299      	cmp	r1, r3
 800cf04:	d118      	bne.n	800cf38 <_strtod_l+0x8e8>
 800cf06:	4b96      	ldr	r3, [pc, #600]	; (800d160 <_strtod_l+0xb10>)
 800cf08:	459a      	cmp	sl, r3
 800cf0a:	d102      	bne.n	800cf12 <_strtod_l+0x8c2>
 800cf0c:	3101      	adds	r1, #1
 800cf0e:	f43f addd 	beq.w	800cacc <_strtod_l+0x47c>
 800cf12:	f04f 0800 	mov.w	r8, #0
 800cf16:	4b91      	ldr	r3, [pc, #580]	; (800d15c <_strtod_l+0xb0c>)
 800cf18:	ea0a 0303 	and.w	r3, sl, r3
 800cf1c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cf20:	9b05      	ldr	r3, [sp, #20]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d19a      	bne.n	800ce5c <_strtod_l+0x80c>
 800cf26:	e5db      	b.n	800cae0 <_strtod_l+0x490>
 800cf28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf2c:	e7e9      	b.n	800cf02 <_strtod_l+0x8b2>
 800cf2e:	4613      	mov	r3, r2
 800cf30:	e7e7      	b.n	800cf02 <_strtod_l+0x8b2>
 800cf32:	ea53 0308 	orrs.w	r3, r3, r8
 800cf36:	d081      	beq.n	800ce3c <_strtod_l+0x7ec>
 800cf38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf3a:	b1e3      	cbz	r3, 800cf76 <_strtod_l+0x926>
 800cf3c:	ea13 0f0a 	tst.w	r3, sl
 800cf40:	d0ee      	beq.n	800cf20 <_strtod_l+0x8d0>
 800cf42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf44:	4640      	mov	r0, r8
 800cf46:	4649      	mov	r1, r9
 800cf48:	9a05      	ldr	r2, [sp, #20]
 800cf4a:	b1c3      	cbz	r3, 800cf7e <_strtod_l+0x92e>
 800cf4c:	f7ff fb5c 	bl	800c608 <sulp>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf58:	f7f3 f908 	bl	800016c <__adddf3>
 800cf5c:	4680      	mov	r8, r0
 800cf5e:	4689      	mov	r9, r1
 800cf60:	e7de      	b.n	800cf20 <_strtod_l+0x8d0>
 800cf62:	4013      	ands	r3, r2
 800cf64:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf68:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cf6c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cf70:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cf74:	e7d4      	b.n	800cf20 <_strtod_l+0x8d0>
 800cf76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf78:	ea13 0f08 	tst.w	r3, r8
 800cf7c:	e7e0      	b.n	800cf40 <_strtod_l+0x8f0>
 800cf7e:	f7ff fb43 	bl	800c608 <sulp>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf8a:	f7f3 f8ed 	bl	8000168 <__aeabi_dsub>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2300      	movs	r3, #0
 800cf92:	4680      	mov	r8, r0
 800cf94:	4689      	mov	r9, r1
 800cf96:	f7f3 fd07 	bl	80009a8 <__aeabi_dcmpeq>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d0c0      	beq.n	800cf20 <_strtod_l+0x8d0>
 800cf9e:	e606      	b.n	800cbae <_strtod_l+0x55e>
 800cfa0:	4659      	mov	r1, fp
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff fabe 	bl	800c524 <__ratio>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfb6:	f7f3 fd0b 	bl	80009d0 <__aeabi_dcmple>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d06f      	beq.n	800d09e <_strtod_l+0xa4e>
 800cfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d17c      	bne.n	800d0be <_strtod_l+0xa6e>
 800cfc4:	f1b8 0f00 	cmp.w	r8, #0
 800cfc8:	d159      	bne.n	800d07e <_strtod_l+0xa2e>
 800cfca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d17b      	bne.n	800d0ca <_strtod_l+0xa7a>
 800cfd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	4b62      	ldr	r3, [pc, #392]	; (800d164 <_strtod_l+0xb14>)
 800cfda:	f7f3 fcef 	bl	80009bc <__aeabi_dcmplt>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d15a      	bne.n	800d098 <_strtod_l+0xa48>
 800cfe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	4b5f      	ldr	r3, [pc, #380]	; (800d168 <_strtod_l+0xb18>)
 800cfea:	f7f3 fa75 	bl	80004d8 <__aeabi_dmul>
 800cfee:	4605      	mov	r5, r0
 800cff0:	460f      	mov	r7, r1
 800cff2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cff6:	9506      	str	r5, [sp, #24]
 800cff8:	9307      	str	r3, [sp, #28]
 800cffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cffe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d002:	4b56      	ldr	r3, [pc, #344]	; (800d15c <_strtod_l+0xb0c>)
 800d004:	4a55      	ldr	r2, [pc, #340]	; (800d15c <_strtod_l+0xb0c>)
 800d006:	ea0a 0303 	and.w	r3, sl, r3
 800d00a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d00c:	4b57      	ldr	r3, [pc, #348]	; (800d16c <_strtod_l+0xb1c>)
 800d00e:	ea0a 0202 	and.w	r2, sl, r2
 800d012:	429a      	cmp	r2, r3
 800d014:	f040 80b0 	bne.w	800d178 <_strtod_l+0xb28>
 800d018:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d01c:	4640      	mov	r0, r8
 800d01e:	4649      	mov	r1, r9
 800d020:	f7ff f9c2 	bl	800c3a8 <__ulp>
 800d024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d028:	f7f3 fa56 	bl	80004d8 <__aeabi_dmul>
 800d02c:	4642      	mov	r2, r8
 800d02e:	464b      	mov	r3, r9
 800d030:	f7f3 f89c 	bl	800016c <__adddf3>
 800d034:	f8df a124 	ldr.w	sl, [pc, #292]	; 800d15c <_strtod_l+0xb0c>
 800d038:	4a4d      	ldr	r2, [pc, #308]	; (800d170 <_strtod_l+0xb20>)
 800d03a:	ea01 0a0a 	and.w	sl, r1, sl
 800d03e:	4592      	cmp	sl, r2
 800d040:	4680      	mov	r8, r0
 800d042:	d948      	bls.n	800d0d6 <_strtod_l+0xa86>
 800d044:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d046:	4b46      	ldr	r3, [pc, #280]	; (800d160 <_strtod_l+0xb10>)
 800d048:	429a      	cmp	r2, r3
 800d04a:	d103      	bne.n	800d054 <_strtod_l+0xa04>
 800d04c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d04e:	3301      	adds	r3, #1
 800d050:	f43f ad3c 	beq.w	800cacc <_strtod_l+0x47c>
 800d054:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d058:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d160 <_strtod_l+0xb10>
 800d05c:	4620      	mov	r0, r4
 800d05e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d060:	f7fe fe76 	bl	800bd50 <_Bfree>
 800d064:	4620      	mov	r0, r4
 800d066:	9908      	ldr	r1, [sp, #32]
 800d068:	f7fe fe72 	bl	800bd50 <_Bfree>
 800d06c:	4659      	mov	r1, fp
 800d06e:	4620      	mov	r0, r4
 800d070:	f7fe fe6e 	bl	800bd50 <_Bfree>
 800d074:	4631      	mov	r1, r6
 800d076:	4620      	mov	r0, r4
 800d078:	f7fe fe6a 	bl	800bd50 <_Bfree>
 800d07c:	e605      	b.n	800cc8a <_strtod_l+0x63a>
 800d07e:	f1b8 0f01 	cmp.w	r8, #1
 800d082:	d103      	bne.n	800d08c <_strtod_l+0xa3c>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	f43f ad91 	beq.w	800cbae <_strtod_l+0x55e>
 800d08c:	2200      	movs	r2, #0
 800d08e:	4b39      	ldr	r3, [pc, #228]	; (800d174 <_strtod_l+0xb24>)
 800d090:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d092:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d096:	e016      	b.n	800d0c6 <_strtod_l+0xa76>
 800d098:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d09a:	4f33      	ldr	r7, [pc, #204]	; (800d168 <_strtod_l+0xb18>)
 800d09c:	e7a9      	b.n	800cff2 <_strtod_l+0x9a2>
 800d09e:	4b32      	ldr	r3, [pc, #200]	; (800d168 <_strtod_l+0xb18>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0a6:	f7f3 fa17 	bl	80004d8 <__aeabi_dmul>
 800d0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	460f      	mov	r7, r1
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d09e      	beq.n	800cff2 <_strtod_l+0x9a2>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0bc:	e79d      	b.n	800cffa <_strtod_l+0x9aa>
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4b28      	ldr	r3, [pc, #160]	; (800d164 <_strtod_l+0xb14>)
 800d0c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0c6:	4f27      	ldr	r7, [pc, #156]	; (800d164 <_strtod_l+0xb14>)
 800d0c8:	e797      	b.n	800cffa <_strtod_l+0x9aa>
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	4b29      	ldr	r3, [pc, #164]	; (800d174 <_strtod_l+0xb24>)
 800d0ce:	4645      	mov	r5, r8
 800d0d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0d4:	e7f7      	b.n	800d0c6 <_strtod_l+0xa76>
 800d0d6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800d0da:	9b05      	ldr	r3, [sp, #20]
 800d0dc:	46ca      	mov	sl, r9
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1bc      	bne.n	800d05c <_strtod_l+0xa0c>
 800d0e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d0e8:	0d1b      	lsrs	r3, r3, #20
 800d0ea:	051b      	lsls	r3, r3, #20
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d1b5      	bne.n	800d05c <_strtod_l+0xa0c>
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 ff96 	bl	8001024 <__aeabi_d2lz>
 800d0f8:	f7f3 f9c0 	bl	800047c <__aeabi_l2d>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4628      	mov	r0, r5
 800d102:	4639      	mov	r1, r7
 800d104:	f7f3 f830 	bl	8000168 <__aeabi_dsub>
 800d108:	460b      	mov	r3, r1
 800d10a:	4602      	mov	r2, r0
 800d10c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800d110:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d116:	ea4a 0a08 	orr.w	sl, sl, r8
 800d11a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800d11e:	d06c      	beq.n	800d1fa <_strtod_l+0xbaa>
 800d120:	a309      	add	r3, pc, #36	; (adr r3, 800d148 <_strtod_l+0xaf8>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 fc49 	bl	80009bc <__aeabi_dcmplt>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	f47f acd8 	bne.w	800cae0 <_strtod_l+0x490>
 800d130:	a307      	add	r3, pc, #28	; (adr r3, 800d150 <_strtod_l+0xb00>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d13a:	f7f3 fc5d 	bl	80009f8 <__aeabi_dcmpgt>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d08c      	beq.n	800d05c <_strtod_l+0xa0c>
 800d142:	e4cd      	b.n	800cae0 <_strtod_l+0x490>
 800d144:	f3af 8000 	nop.w
 800d148:	94a03595 	.word	0x94a03595
 800d14c:	3fdfffff 	.word	0x3fdfffff
 800d150:	35afe535 	.word	0x35afe535
 800d154:	3fe00000 	.word	0x3fe00000
 800d158:	000fffff 	.word	0x000fffff
 800d15c:	7ff00000 	.word	0x7ff00000
 800d160:	7fefffff 	.word	0x7fefffff
 800d164:	3ff00000 	.word	0x3ff00000
 800d168:	3fe00000 	.word	0x3fe00000
 800d16c:	7fe00000 	.word	0x7fe00000
 800d170:	7c9fffff 	.word	0x7c9fffff
 800d174:	bff00000 	.word	0xbff00000
 800d178:	9b05      	ldr	r3, [sp, #20]
 800d17a:	b333      	cbz	r3, 800d1ca <_strtod_l+0xb7a>
 800d17c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d17e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d182:	d822      	bhi.n	800d1ca <_strtod_l+0xb7a>
 800d184:	a328      	add	r3, pc, #160	; (adr r3, 800d228 <_strtod_l+0xbd8>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	4628      	mov	r0, r5
 800d18c:	4639      	mov	r1, r7
 800d18e:	f7f3 fc1f 	bl	80009d0 <__aeabi_dcmple>
 800d192:	b1a0      	cbz	r0, 800d1be <_strtod_l+0xb6e>
 800d194:	4639      	mov	r1, r7
 800d196:	4628      	mov	r0, r5
 800d198:	f7f3 fc76 	bl	8000a88 <__aeabi_d2uiz>
 800d19c:	2801      	cmp	r0, #1
 800d19e:	bf38      	it	cc
 800d1a0:	2001      	movcc	r0, #1
 800d1a2:	f7f3 f91f 	bl	80003e4 <__aeabi_ui2d>
 800d1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	460f      	mov	r7, r1
 800d1ac:	bb03      	cbnz	r3, 800d1f0 <_strtod_l+0xba0>
 800d1ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1b2:	9014      	str	r0, [sp, #80]	; 0x50
 800d1b4:	9315      	str	r3, [sp, #84]	; 0x54
 800d1b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d1ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d1be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1c2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d1c6:	1a9b      	subs	r3, r3, r2
 800d1c8:	9311      	str	r3, [sp, #68]	; 0x44
 800d1ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1ce:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800d1d2:	f7ff f8e9 	bl	800c3a8 <__ulp>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	f7f3 f97b 	bl	80004d8 <__aeabi_dmul>
 800d1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1e6:	f7f2 ffc1 	bl	800016c <__adddf3>
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	e774      	b.n	800d0da <_strtod_l+0xa8a>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d1f8:	e7dd      	b.n	800d1b6 <_strtod_l+0xb66>
 800d1fa:	a30d      	add	r3, pc, #52	; (adr r3, 800d230 <_strtod_l+0xbe0>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	f7f3 fbdc 	bl	80009bc <__aeabi_dcmplt>
 800d204:	e79b      	b.n	800d13e <_strtod_l+0xaee>
 800d206:	2300      	movs	r3, #0
 800d208:	930e      	str	r3, [sp, #56]	; 0x38
 800d20a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d20c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	f7ff ba5b 	b.w	800c6ca <_strtod_l+0x7a>
 800d214:	2a65      	cmp	r2, #101	; 0x65
 800d216:	f43f ab52 	beq.w	800c8be <_strtod_l+0x26e>
 800d21a:	2a45      	cmp	r2, #69	; 0x45
 800d21c:	f43f ab4f 	beq.w	800c8be <_strtod_l+0x26e>
 800d220:	2301      	movs	r3, #1
 800d222:	f7ff bb87 	b.w	800c934 <_strtod_l+0x2e4>
 800d226:	bf00      	nop
 800d228:	ffc00000 	.word	0xffc00000
 800d22c:	41dfffff 	.word	0x41dfffff
 800d230:	94a03595 	.word	0x94a03595
 800d234:	3fcfffff 	.word	0x3fcfffff

0800d238 <_strtod_r>:
 800d238:	4b01      	ldr	r3, [pc, #4]	; (800d240 <_strtod_r+0x8>)
 800d23a:	f7ff ba09 	b.w	800c650 <_strtod_l>
 800d23e:	bf00      	nop
 800d240:	20000080 	.word	0x20000080

0800d244 <_strtol_l.constprop.0>:
 800d244:	2b01      	cmp	r3, #1
 800d246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d24a:	4686      	mov	lr, r0
 800d24c:	4690      	mov	r8, r2
 800d24e:	d001      	beq.n	800d254 <_strtol_l.constprop.0+0x10>
 800d250:	2b24      	cmp	r3, #36	; 0x24
 800d252:	d906      	bls.n	800d262 <_strtol_l.constprop.0+0x1e>
 800d254:	f7fd fd92 	bl	800ad7c <__errno>
 800d258:	2316      	movs	r3, #22
 800d25a:	6003      	str	r3, [r0, #0]
 800d25c:	2000      	movs	r0, #0
 800d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d262:	460d      	mov	r5, r1
 800d264:	4835      	ldr	r0, [pc, #212]	; (800d33c <_strtol_l.constprop.0+0xf8>)
 800d266:	462a      	mov	r2, r5
 800d268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d26c:	5d06      	ldrb	r6, [r0, r4]
 800d26e:	f016 0608 	ands.w	r6, r6, #8
 800d272:	d1f8      	bne.n	800d266 <_strtol_l.constprop.0+0x22>
 800d274:	2c2d      	cmp	r4, #45	; 0x2d
 800d276:	d12e      	bne.n	800d2d6 <_strtol_l.constprop.0+0x92>
 800d278:	2601      	movs	r6, #1
 800d27a:	782c      	ldrb	r4, [r5, #0]
 800d27c:	1c95      	adds	r5, r2, #2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d057      	beq.n	800d332 <_strtol_l.constprop.0+0xee>
 800d282:	2b10      	cmp	r3, #16
 800d284:	d109      	bne.n	800d29a <_strtol_l.constprop.0+0x56>
 800d286:	2c30      	cmp	r4, #48	; 0x30
 800d288:	d107      	bne.n	800d29a <_strtol_l.constprop.0+0x56>
 800d28a:	782a      	ldrb	r2, [r5, #0]
 800d28c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d290:	2a58      	cmp	r2, #88	; 0x58
 800d292:	d149      	bne.n	800d328 <_strtol_l.constprop.0+0xe4>
 800d294:	2310      	movs	r3, #16
 800d296:	786c      	ldrb	r4, [r5, #1]
 800d298:	3502      	adds	r5, #2
 800d29a:	2200      	movs	r2, #0
 800d29c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800d2a0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800d2a4:	fbbc f9f3 	udiv	r9, ip, r3
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	fb03 ca19 	mls	sl, r3, r9, ip
 800d2ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d2b2:	2f09      	cmp	r7, #9
 800d2b4:	d814      	bhi.n	800d2e0 <_strtol_l.constprop.0+0x9c>
 800d2b6:	463c      	mov	r4, r7
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	dd20      	ble.n	800d2fe <_strtol_l.constprop.0+0xba>
 800d2bc:	1c57      	adds	r7, r2, #1
 800d2be:	d007      	beq.n	800d2d0 <_strtol_l.constprop.0+0x8c>
 800d2c0:	4581      	cmp	r9, r0
 800d2c2:	d319      	bcc.n	800d2f8 <_strtol_l.constprop.0+0xb4>
 800d2c4:	d101      	bne.n	800d2ca <_strtol_l.constprop.0+0x86>
 800d2c6:	45a2      	cmp	sl, r4
 800d2c8:	db16      	blt.n	800d2f8 <_strtol_l.constprop.0+0xb4>
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	fb00 4003 	mla	r0, r0, r3, r4
 800d2d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2d4:	e7eb      	b.n	800d2ae <_strtol_l.constprop.0+0x6a>
 800d2d6:	2c2b      	cmp	r4, #43	; 0x2b
 800d2d8:	bf04      	itt	eq
 800d2da:	782c      	ldrbeq	r4, [r5, #0]
 800d2dc:	1c95      	addeq	r5, r2, #2
 800d2de:	e7ce      	b.n	800d27e <_strtol_l.constprop.0+0x3a>
 800d2e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d2e4:	2f19      	cmp	r7, #25
 800d2e6:	d801      	bhi.n	800d2ec <_strtol_l.constprop.0+0xa8>
 800d2e8:	3c37      	subs	r4, #55	; 0x37
 800d2ea:	e7e5      	b.n	800d2b8 <_strtol_l.constprop.0+0x74>
 800d2ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d2f0:	2f19      	cmp	r7, #25
 800d2f2:	d804      	bhi.n	800d2fe <_strtol_l.constprop.0+0xba>
 800d2f4:	3c57      	subs	r4, #87	; 0x57
 800d2f6:	e7df      	b.n	800d2b8 <_strtol_l.constprop.0+0x74>
 800d2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2fc:	e7e8      	b.n	800d2d0 <_strtol_l.constprop.0+0x8c>
 800d2fe:	1c53      	adds	r3, r2, #1
 800d300:	d108      	bne.n	800d314 <_strtol_l.constprop.0+0xd0>
 800d302:	2322      	movs	r3, #34	; 0x22
 800d304:	4660      	mov	r0, ip
 800d306:	f8ce 3000 	str.w	r3, [lr]
 800d30a:	f1b8 0f00 	cmp.w	r8, #0
 800d30e:	d0a6      	beq.n	800d25e <_strtol_l.constprop.0+0x1a>
 800d310:	1e69      	subs	r1, r5, #1
 800d312:	e006      	b.n	800d322 <_strtol_l.constprop.0+0xde>
 800d314:	b106      	cbz	r6, 800d318 <_strtol_l.constprop.0+0xd4>
 800d316:	4240      	negs	r0, r0
 800d318:	f1b8 0f00 	cmp.w	r8, #0
 800d31c:	d09f      	beq.n	800d25e <_strtol_l.constprop.0+0x1a>
 800d31e:	2a00      	cmp	r2, #0
 800d320:	d1f6      	bne.n	800d310 <_strtol_l.constprop.0+0xcc>
 800d322:	f8c8 1000 	str.w	r1, [r8]
 800d326:	e79a      	b.n	800d25e <_strtol_l.constprop.0+0x1a>
 800d328:	2430      	movs	r4, #48	; 0x30
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1b5      	bne.n	800d29a <_strtol_l.constprop.0+0x56>
 800d32e:	2308      	movs	r3, #8
 800d330:	e7b3      	b.n	800d29a <_strtol_l.constprop.0+0x56>
 800d332:	2c30      	cmp	r4, #48	; 0x30
 800d334:	d0a9      	beq.n	800d28a <_strtol_l.constprop.0+0x46>
 800d336:	230a      	movs	r3, #10
 800d338:	e7af      	b.n	800d29a <_strtol_l.constprop.0+0x56>
 800d33a:	bf00      	nop
 800d33c:	0800ee09 	.word	0x0800ee09

0800d340 <_strtol_r>:
 800d340:	f7ff bf80 	b.w	800d244 <_strtol_l.constprop.0>

0800d344 <__ssputs_r>:
 800d344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d348:	461f      	mov	r7, r3
 800d34a:	688e      	ldr	r6, [r1, #8]
 800d34c:	4682      	mov	sl, r0
 800d34e:	42be      	cmp	r6, r7
 800d350:	460c      	mov	r4, r1
 800d352:	4690      	mov	r8, r2
 800d354:	680b      	ldr	r3, [r1, #0]
 800d356:	d82c      	bhi.n	800d3b2 <__ssputs_r+0x6e>
 800d358:	898a      	ldrh	r2, [r1, #12]
 800d35a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d35e:	d026      	beq.n	800d3ae <__ssputs_r+0x6a>
 800d360:	6965      	ldr	r5, [r4, #20]
 800d362:	6909      	ldr	r1, [r1, #16]
 800d364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d368:	eba3 0901 	sub.w	r9, r3, r1
 800d36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d370:	1c7b      	adds	r3, r7, #1
 800d372:	444b      	add	r3, r9
 800d374:	106d      	asrs	r5, r5, #1
 800d376:	429d      	cmp	r5, r3
 800d378:	bf38      	it	cc
 800d37a:	461d      	movcc	r5, r3
 800d37c:	0553      	lsls	r3, r2, #21
 800d37e:	d527      	bpl.n	800d3d0 <__ssputs_r+0x8c>
 800d380:	4629      	mov	r1, r5
 800d382:	f7fe fc19 	bl	800bbb8 <_malloc_r>
 800d386:	4606      	mov	r6, r0
 800d388:	b360      	cbz	r0, 800d3e4 <__ssputs_r+0xa0>
 800d38a:	464a      	mov	r2, r9
 800d38c:	6921      	ldr	r1, [r4, #16]
 800d38e:	f000 fa17 	bl	800d7c0 <memcpy>
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d39c:	81a3      	strh	r3, [r4, #12]
 800d39e:	6126      	str	r6, [r4, #16]
 800d3a0:	444e      	add	r6, r9
 800d3a2:	6026      	str	r6, [r4, #0]
 800d3a4:	463e      	mov	r6, r7
 800d3a6:	6165      	str	r5, [r4, #20]
 800d3a8:	eba5 0509 	sub.w	r5, r5, r9
 800d3ac:	60a5      	str	r5, [r4, #8]
 800d3ae:	42be      	cmp	r6, r7
 800d3b0:	d900      	bls.n	800d3b4 <__ssputs_r+0x70>
 800d3b2:	463e      	mov	r6, r7
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	4641      	mov	r1, r8
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	f000 f9c5 	bl	800d748 <memmove>
 800d3be:	2000      	movs	r0, #0
 800d3c0:	68a3      	ldr	r3, [r4, #8]
 800d3c2:	1b9b      	subs	r3, r3, r6
 800d3c4:	60a3      	str	r3, [r4, #8]
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	4433      	add	r3, r6
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	f000 fda6 	bl	800df22 <_realloc_r>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1e0      	bne.n	800d39e <__ssputs_r+0x5a>
 800d3dc:	4650      	mov	r0, sl
 800d3de:	6921      	ldr	r1, [r4, #16]
 800d3e0:	f7fe fb7a 	bl	800bad8 <_free_r>
 800d3e4:	230c      	movs	r3, #12
 800d3e6:	f8ca 3000 	str.w	r3, [sl]
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	e7e9      	b.n	800d3cc <__ssputs_r+0x88>

0800d3f8 <_svfiprintf_r>:
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	4698      	mov	r8, r3
 800d3fe:	898b      	ldrh	r3, [r1, #12]
 800d400:	4607      	mov	r7, r0
 800d402:	061b      	lsls	r3, r3, #24
 800d404:	460d      	mov	r5, r1
 800d406:	4614      	mov	r4, r2
 800d408:	b09d      	sub	sp, #116	; 0x74
 800d40a:	d50e      	bpl.n	800d42a <_svfiprintf_r+0x32>
 800d40c:	690b      	ldr	r3, [r1, #16]
 800d40e:	b963      	cbnz	r3, 800d42a <_svfiprintf_r+0x32>
 800d410:	2140      	movs	r1, #64	; 0x40
 800d412:	f7fe fbd1 	bl	800bbb8 <_malloc_r>
 800d416:	6028      	str	r0, [r5, #0]
 800d418:	6128      	str	r0, [r5, #16]
 800d41a:	b920      	cbnz	r0, 800d426 <_svfiprintf_r+0x2e>
 800d41c:	230c      	movs	r3, #12
 800d41e:	603b      	str	r3, [r7, #0]
 800d420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d424:	e0d0      	b.n	800d5c8 <_svfiprintf_r+0x1d0>
 800d426:	2340      	movs	r3, #64	; 0x40
 800d428:	616b      	str	r3, [r5, #20]
 800d42a:	2300      	movs	r3, #0
 800d42c:	9309      	str	r3, [sp, #36]	; 0x24
 800d42e:	2320      	movs	r3, #32
 800d430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d434:	2330      	movs	r3, #48	; 0x30
 800d436:	f04f 0901 	mov.w	r9, #1
 800d43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d43e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d5e0 <_svfiprintf_r+0x1e8>
 800d442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d446:	4623      	mov	r3, r4
 800d448:	469a      	mov	sl, r3
 800d44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d44e:	b10a      	cbz	r2, 800d454 <_svfiprintf_r+0x5c>
 800d450:	2a25      	cmp	r2, #37	; 0x25
 800d452:	d1f9      	bne.n	800d448 <_svfiprintf_r+0x50>
 800d454:	ebba 0b04 	subs.w	fp, sl, r4
 800d458:	d00b      	beq.n	800d472 <_svfiprintf_r+0x7a>
 800d45a:	465b      	mov	r3, fp
 800d45c:	4622      	mov	r2, r4
 800d45e:	4629      	mov	r1, r5
 800d460:	4638      	mov	r0, r7
 800d462:	f7ff ff6f 	bl	800d344 <__ssputs_r>
 800d466:	3001      	adds	r0, #1
 800d468:	f000 80a9 	beq.w	800d5be <_svfiprintf_r+0x1c6>
 800d46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d46e:	445a      	add	r2, fp
 800d470:	9209      	str	r2, [sp, #36]	; 0x24
 800d472:	f89a 3000 	ldrb.w	r3, [sl]
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 80a1 	beq.w	800d5be <_svfiprintf_r+0x1c6>
 800d47c:	2300      	movs	r3, #0
 800d47e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d486:	f10a 0a01 	add.w	sl, sl, #1
 800d48a:	9304      	str	r3, [sp, #16]
 800d48c:	9307      	str	r3, [sp, #28]
 800d48e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d492:	931a      	str	r3, [sp, #104]	; 0x68
 800d494:	4654      	mov	r4, sl
 800d496:	2205      	movs	r2, #5
 800d498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d49c:	4850      	ldr	r0, [pc, #320]	; (800d5e0 <_svfiprintf_r+0x1e8>)
 800d49e:	f7fd fc9a 	bl	800add6 <memchr>
 800d4a2:	9a04      	ldr	r2, [sp, #16]
 800d4a4:	b9d8      	cbnz	r0, 800d4de <_svfiprintf_r+0xe6>
 800d4a6:	06d0      	lsls	r0, r2, #27
 800d4a8:	bf44      	itt	mi
 800d4aa:	2320      	movmi	r3, #32
 800d4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4b0:	0711      	lsls	r1, r2, #28
 800d4b2:	bf44      	itt	mi
 800d4b4:	232b      	movmi	r3, #43	; 0x2b
 800d4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d4be:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c0:	d015      	beq.n	800d4ee <_svfiprintf_r+0xf6>
 800d4c2:	4654      	mov	r4, sl
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	f04f 0c0a 	mov.w	ip, #10
 800d4ca:	9a07      	ldr	r2, [sp, #28]
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4d2:	3b30      	subs	r3, #48	; 0x30
 800d4d4:	2b09      	cmp	r3, #9
 800d4d6:	d94d      	bls.n	800d574 <_svfiprintf_r+0x17c>
 800d4d8:	b1b0      	cbz	r0, 800d508 <_svfiprintf_r+0x110>
 800d4da:	9207      	str	r2, [sp, #28]
 800d4dc:	e014      	b.n	800d508 <_svfiprintf_r+0x110>
 800d4de:	eba0 0308 	sub.w	r3, r0, r8
 800d4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	46a2      	mov	sl, r4
 800d4ea:	9304      	str	r3, [sp, #16]
 800d4ec:	e7d2      	b.n	800d494 <_svfiprintf_r+0x9c>
 800d4ee:	9b03      	ldr	r3, [sp, #12]
 800d4f0:	1d19      	adds	r1, r3, #4
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	9103      	str	r1, [sp, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bfbb      	ittet	lt
 800d4fa:	425b      	neglt	r3, r3
 800d4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800d500:	9307      	strge	r3, [sp, #28]
 800d502:	9307      	strlt	r3, [sp, #28]
 800d504:	bfb8      	it	lt
 800d506:	9204      	strlt	r2, [sp, #16]
 800d508:	7823      	ldrb	r3, [r4, #0]
 800d50a:	2b2e      	cmp	r3, #46	; 0x2e
 800d50c:	d10c      	bne.n	800d528 <_svfiprintf_r+0x130>
 800d50e:	7863      	ldrb	r3, [r4, #1]
 800d510:	2b2a      	cmp	r3, #42	; 0x2a
 800d512:	d134      	bne.n	800d57e <_svfiprintf_r+0x186>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	3402      	adds	r4, #2
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	9203      	str	r2, [sp, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfb8      	it	lt
 800d522:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d526:	9305      	str	r3, [sp, #20]
 800d528:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d5e4 <_svfiprintf_r+0x1ec>
 800d52c:	2203      	movs	r2, #3
 800d52e:	4650      	mov	r0, sl
 800d530:	7821      	ldrb	r1, [r4, #0]
 800d532:	f7fd fc50 	bl	800add6 <memchr>
 800d536:	b138      	cbz	r0, 800d548 <_svfiprintf_r+0x150>
 800d538:	2240      	movs	r2, #64	; 0x40
 800d53a:	9b04      	ldr	r3, [sp, #16]
 800d53c:	eba0 000a 	sub.w	r0, r0, sl
 800d540:	4082      	lsls	r2, r0
 800d542:	4313      	orrs	r3, r2
 800d544:	3401      	adds	r4, #1
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54c:	2206      	movs	r2, #6
 800d54e:	4826      	ldr	r0, [pc, #152]	; (800d5e8 <_svfiprintf_r+0x1f0>)
 800d550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d554:	f7fd fc3f 	bl	800add6 <memchr>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d038      	beq.n	800d5ce <_svfiprintf_r+0x1d6>
 800d55c:	4b23      	ldr	r3, [pc, #140]	; (800d5ec <_svfiprintf_r+0x1f4>)
 800d55e:	bb1b      	cbnz	r3, 800d5a8 <_svfiprintf_r+0x1b0>
 800d560:	9b03      	ldr	r3, [sp, #12]
 800d562:	3307      	adds	r3, #7
 800d564:	f023 0307 	bic.w	r3, r3, #7
 800d568:	3308      	adds	r3, #8
 800d56a:	9303      	str	r3, [sp, #12]
 800d56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56e:	4433      	add	r3, r6
 800d570:	9309      	str	r3, [sp, #36]	; 0x24
 800d572:	e768      	b.n	800d446 <_svfiprintf_r+0x4e>
 800d574:	460c      	mov	r4, r1
 800d576:	2001      	movs	r0, #1
 800d578:	fb0c 3202 	mla	r2, ip, r2, r3
 800d57c:	e7a6      	b.n	800d4cc <_svfiprintf_r+0xd4>
 800d57e:	2300      	movs	r3, #0
 800d580:	f04f 0c0a 	mov.w	ip, #10
 800d584:	4619      	mov	r1, r3
 800d586:	3401      	adds	r4, #1
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	4620      	mov	r0, r4
 800d58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d590:	3a30      	subs	r2, #48	; 0x30
 800d592:	2a09      	cmp	r2, #9
 800d594:	d903      	bls.n	800d59e <_svfiprintf_r+0x1a6>
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0c6      	beq.n	800d528 <_svfiprintf_r+0x130>
 800d59a:	9105      	str	r1, [sp, #20]
 800d59c:	e7c4      	b.n	800d528 <_svfiprintf_r+0x130>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5a6:	e7f0      	b.n	800d58a <_svfiprintf_r+0x192>
 800d5a8:	ab03      	add	r3, sp, #12
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <_svfiprintf_r+0x1f8>)
 800d5b2:	a904      	add	r1, sp, #16
 800d5b4:	f7fc fc9a 	bl	8009eec <_printf_float>
 800d5b8:	1c42      	adds	r2, r0, #1
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	d1d6      	bne.n	800d56c <_svfiprintf_r+0x174>
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	065b      	lsls	r3, r3, #25
 800d5c2:	f53f af2d 	bmi.w	800d420 <_svfiprintf_r+0x28>
 800d5c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5c8:	b01d      	add	sp, #116	; 0x74
 800d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	ab03      	add	r3, sp, #12
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <_svfiprintf_r+0x1f8>)
 800d5d8:	a904      	add	r1, sp, #16
 800d5da:	f7fc ff27 	bl	800a42c <_printf_i>
 800d5de:	e7eb      	b.n	800d5b8 <_svfiprintf_r+0x1c0>
 800d5e0:	0800ef09 	.word	0x0800ef09
 800d5e4:	0800ef0f 	.word	0x0800ef0f
 800d5e8:	0800ef13 	.word	0x0800ef13
 800d5ec:	08009eed 	.word	0x08009eed
 800d5f0:	0800d345 	.word	0x0800d345

0800d5f4 <__sflush_r>:
 800d5f4:	898a      	ldrh	r2, [r1, #12]
 800d5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	0710      	lsls	r0, r2, #28
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	d457      	bmi.n	800d6b0 <__sflush_r+0xbc>
 800d600:	684b      	ldr	r3, [r1, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	dc04      	bgt.n	800d610 <__sflush_r+0x1c>
 800d606:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	dc01      	bgt.n	800d610 <__sflush_r+0x1c>
 800d60c:	2000      	movs	r0, #0
 800d60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d612:	2e00      	cmp	r6, #0
 800d614:	d0fa      	beq.n	800d60c <__sflush_r+0x18>
 800d616:	2300      	movs	r3, #0
 800d618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d61c:	682f      	ldr	r7, [r5, #0]
 800d61e:	6a21      	ldr	r1, [r4, #32]
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	d032      	beq.n	800d68a <__sflush_r+0x96>
 800d624:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	075a      	lsls	r2, r3, #29
 800d62a:	d505      	bpl.n	800d638 <__sflush_r+0x44>
 800d62c:	6863      	ldr	r3, [r4, #4]
 800d62e:	1ac0      	subs	r0, r0, r3
 800d630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d632:	b10b      	cbz	r3, 800d638 <__sflush_r+0x44>
 800d634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d636:	1ac0      	subs	r0, r0, r3
 800d638:	2300      	movs	r3, #0
 800d63a:	4602      	mov	r2, r0
 800d63c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d63e:	4628      	mov	r0, r5
 800d640:	6a21      	ldr	r1, [r4, #32]
 800d642:	47b0      	blx	r6
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	d106      	bne.n	800d658 <__sflush_r+0x64>
 800d64a:	6829      	ldr	r1, [r5, #0]
 800d64c:	291d      	cmp	r1, #29
 800d64e:	d82b      	bhi.n	800d6a8 <__sflush_r+0xb4>
 800d650:	4a28      	ldr	r2, [pc, #160]	; (800d6f4 <__sflush_r+0x100>)
 800d652:	410a      	asrs	r2, r1
 800d654:	07d6      	lsls	r6, r2, #31
 800d656:	d427      	bmi.n	800d6a8 <__sflush_r+0xb4>
 800d658:	2200      	movs	r2, #0
 800d65a:	6062      	str	r2, [r4, #4]
 800d65c:	6922      	ldr	r2, [r4, #16]
 800d65e:	04d9      	lsls	r1, r3, #19
 800d660:	6022      	str	r2, [r4, #0]
 800d662:	d504      	bpl.n	800d66e <__sflush_r+0x7a>
 800d664:	1c42      	adds	r2, r0, #1
 800d666:	d101      	bne.n	800d66c <__sflush_r+0x78>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b903      	cbnz	r3, 800d66e <__sflush_r+0x7a>
 800d66c:	6560      	str	r0, [r4, #84]	; 0x54
 800d66e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d670:	602f      	str	r7, [r5, #0]
 800d672:	2900      	cmp	r1, #0
 800d674:	d0ca      	beq.n	800d60c <__sflush_r+0x18>
 800d676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d67a:	4299      	cmp	r1, r3
 800d67c:	d002      	beq.n	800d684 <__sflush_r+0x90>
 800d67e:	4628      	mov	r0, r5
 800d680:	f7fe fa2a 	bl	800bad8 <_free_r>
 800d684:	2000      	movs	r0, #0
 800d686:	6360      	str	r0, [r4, #52]	; 0x34
 800d688:	e7c1      	b.n	800d60e <__sflush_r+0x1a>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4628      	mov	r0, r5
 800d68e:	47b0      	blx	r6
 800d690:	1c41      	adds	r1, r0, #1
 800d692:	d1c8      	bne.n	800d626 <__sflush_r+0x32>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0c5      	beq.n	800d626 <__sflush_r+0x32>
 800d69a:	2b1d      	cmp	r3, #29
 800d69c:	d001      	beq.n	800d6a2 <__sflush_r+0xae>
 800d69e:	2b16      	cmp	r3, #22
 800d6a0:	d101      	bne.n	800d6a6 <__sflush_r+0xb2>
 800d6a2:	602f      	str	r7, [r5, #0]
 800d6a4:	e7b2      	b.n	800d60c <__sflush_r+0x18>
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	e7ae      	b.n	800d60e <__sflush_r+0x1a>
 800d6b0:	690f      	ldr	r7, [r1, #16]
 800d6b2:	2f00      	cmp	r7, #0
 800d6b4:	d0aa      	beq.n	800d60c <__sflush_r+0x18>
 800d6b6:	0793      	lsls	r3, r2, #30
 800d6b8:	bf18      	it	ne
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	680e      	ldr	r6, [r1, #0]
 800d6be:	bf08      	it	eq
 800d6c0:	694b      	ldreq	r3, [r1, #20]
 800d6c2:	1bf6      	subs	r6, r6, r7
 800d6c4:	600f      	str	r7, [r1, #0]
 800d6c6:	608b      	str	r3, [r1, #8]
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	dd9f      	ble.n	800d60c <__sflush_r+0x18>
 800d6cc:	4633      	mov	r3, r6
 800d6ce:	463a      	mov	r2, r7
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	6a21      	ldr	r1, [r4, #32]
 800d6d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d6d8:	47e0      	blx	ip
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	dc06      	bgt.n	800d6ec <__sflush_r+0xf8>
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	e790      	b.n	800d60e <__sflush_r+0x1a>
 800d6ec:	4407      	add	r7, r0
 800d6ee:	1a36      	subs	r6, r6, r0
 800d6f0:	e7ea      	b.n	800d6c8 <__sflush_r+0xd4>
 800d6f2:	bf00      	nop
 800d6f4:	dfbffffe 	.word	0xdfbffffe

0800d6f8 <_fflush_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	690b      	ldr	r3, [r1, #16]
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	460c      	mov	r4, r1
 800d700:	b913      	cbnz	r3, 800d708 <_fflush_r+0x10>
 800d702:	2500      	movs	r5, #0
 800d704:	4628      	mov	r0, r5
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	b118      	cbz	r0, 800d712 <_fflush_r+0x1a>
 800d70a:	6a03      	ldr	r3, [r0, #32]
 800d70c:	b90b      	cbnz	r3, 800d712 <_fflush_r+0x1a>
 800d70e:	f7fd fa49 	bl	800aba4 <__sinit>
 800d712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0f3      	beq.n	800d702 <_fflush_r+0xa>
 800d71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d71c:	07d0      	lsls	r0, r2, #31
 800d71e:	d404      	bmi.n	800d72a <_fflush_r+0x32>
 800d720:	0599      	lsls	r1, r3, #22
 800d722:	d402      	bmi.n	800d72a <_fflush_r+0x32>
 800d724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d726:	f7fd fb54 	bl	800add2 <__retarget_lock_acquire_recursive>
 800d72a:	4628      	mov	r0, r5
 800d72c:	4621      	mov	r1, r4
 800d72e:	f7ff ff61 	bl	800d5f4 <__sflush_r>
 800d732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d734:	4605      	mov	r5, r0
 800d736:	07da      	lsls	r2, r3, #31
 800d738:	d4e4      	bmi.n	800d704 <_fflush_r+0xc>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	059b      	lsls	r3, r3, #22
 800d73e:	d4e1      	bmi.n	800d704 <_fflush_r+0xc>
 800d740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d742:	f7fd fb47 	bl	800add4 <__retarget_lock_release_recursive>
 800d746:	e7dd      	b.n	800d704 <_fflush_r+0xc>

0800d748 <memmove>:
 800d748:	4288      	cmp	r0, r1
 800d74a:	b510      	push	{r4, lr}
 800d74c:	eb01 0402 	add.w	r4, r1, r2
 800d750:	d902      	bls.n	800d758 <memmove+0x10>
 800d752:	4284      	cmp	r4, r0
 800d754:	4623      	mov	r3, r4
 800d756:	d807      	bhi.n	800d768 <memmove+0x20>
 800d758:	1e43      	subs	r3, r0, #1
 800d75a:	42a1      	cmp	r1, r4
 800d75c:	d008      	beq.n	800d770 <memmove+0x28>
 800d75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d766:	e7f8      	b.n	800d75a <memmove+0x12>
 800d768:	4601      	mov	r1, r0
 800d76a:	4402      	add	r2, r0
 800d76c:	428a      	cmp	r2, r1
 800d76e:	d100      	bne.n	800d772 <memmove+0x2a>
 800d770:	bd10      	pop	{r4, pc}
 800d772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d77a:	e7f7      	b.n	800d76c <memmove+0x24>

0800d77c <strncmp>:
 800d77c:	b510      	push	{r4, lr}
 800d77e:	b16a      	cbz	r2, 800d79c <strncmp+0x20>
 800d780:	3901      	subs	r1, #1
 800d782:	1884      	adds	r4, r0, r2
 800d784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d788:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d103      	bne.n	800d798 <strncmp+0x1c>
 800d790:	42a0      	cmp	r0, r4
 800d792:	d001      	beq.n	800d798 <strncmp+0x1c>
 800d794:	2a00      	cmp	r2, #0
 800d796:	d1f5      	bne.n	800d784 <strncmp+0x8>
 800d798:	1ad0      	subs	r0, r2, r3
 800d79a:	bd10      	pop	{r4, pc}
 800d79c:	4610      	mov	r0, r2
 800d79e:	e7fc      	b.n	800d79a <strncmp+0x1e>

0800d7a0 <_sbrk_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	4d05      	ldr	r5, [pc, #20]	; (800d7bc <_sbrk_r+0x1c>)
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	602b      	str	r3, [r5, #0]
 800d7ac:	f7f5 fa4e 	bl	8002c4c <_sbrk>
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	d102      	bne.n	800d7ba <_sbrk_r+0x1a>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	b103      	cbz	r3, 800d7ba <_sbrk_r+0x1a>
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	20002be4 	.word	0x20002be4

0800d7c0 <memcpy>:
 800d7c0:	440a      	add	r2, r1
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d7c8:	d100      	bne.n	800d7cc <memcpy+0xc>
 800d7ca:	4770      	bx	lr
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7d2:	4291      	cmp	r1, r2
 800d7d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d8:	d1f9      	bne.n	800d7ce <memcpy+0xe>
 800d7da:	bd10      	pop	{r4, pc}

0800d7dc <nan>:
 800d7dc:	2000      	movs	r0, #0
 800d7de:	4901      	ldr	r1, [pc, #4]	; (800d7e4 <nan+0x8>)
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	7ff80000 	.word	0x7ff80000

0800d7e8 <__assert_func>:
 800d7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ea:	4614      	mov	r4, r2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	4b09      	ldr	r3, [pc, #36]	; (800d814 <__assert_func+0x2c>)
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68d8      	ldr	r0, [r3, #12]
 800d7f6:	b14c      	cbz	r4, 800d80c <__assert_func+0x24>
 800d7f8:	4b07      	ldr	r3, [pc, #28]	; (800d818 <__assert_func+0x30>)
 800d7fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7fe:	9100      	str	r1, [sp, #0]
 800d800:	462b      	mov	r3, r5
 800d802:	4906      	ldr	r1, [pc, #24]	; (800d81c <__assert_func+0x34>)
 800d804:	f000 fbca 	bl	800df9c <fiprintf>
 800d808:	f000 fbda 	bl	800dfc0 <abort>
 800d80c:	4b04      	ldr	r3, [pc, #16]	; (800d820 <__assert_func+0x38>)
 800d80e:	461c      	mov	r4, r3
 800d810:	e7f3      	b.n	800d7fa <__assert_func+0x12>
 800d812:	bf00      	nop
 800d814:	2000007c 	.word	0x2000007c
 800d818:	0800ef22 	.word	0x0800ef22
 800d81c:	0800ef2f 	.word	0x0800ef2f
 800d820:	0800ef5d 	.word	0x0800ef5d

0800d824 <_calloc_r>:
 800d824:	b570      	push	{r4, r5, r6, lr}
 800d826:	fba1 5402 	umull	r5, r4, r1, r2
 800d82a:	b934      	cbnz	r4, 800d83a <_calloc_r+0x16>
 800d82c:	4629      	mov	r1, r5
 800d82e:	f7fe f9c3 	bl	800bbb8 <_malloc_r>
 800d832:	4606      	mov	r6, r0
 800d834:	b928      	cbnz	r0, 800d842 <_calloc_r+0x1e>
 800d836:	4630      	mov	r0, r6
 800d838:	bd70      	pop	{r4, r5, r6, pc}
 800d83a:	220c      	movs	r2, #12
 800d83c:	2600      	movs	r6, #0
 800d83e:	6002      	str	r2, [r0, #0]
 800d840:	e7f9      	b.n	800d836 <_calloc_r+0x12>
 800d842:	462a      	mov	r2, r5
 800d844:	4621      	mov	r1, r4
 800d846:	f7fd fa46 	bl	800acd6 <memset>
 800d84a:	e7f4      	b.n	800d836 <_calloc_r+0x12>

0800d84c <rshift>:
 800d84c:	6903      	ldr	r3, [r0, #16]
 800d84e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d852:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d856:	f100 0414 	add.w	r4, r0, #20
 800d85a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d85e:	dd46      	ble.n	800d8ee <rshift+0xa2>
 800d860:	f011 011f 	ands.w	r1, r1, #31
 800d864:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d868:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d86c:	d10c      	bne.n	800d888 <rshift+0x3c>
 800d86e:	4629      	mov	r1, r5
 800d870:	f100 0710 	add.w	r7, r0, #16
 800d874:	42b1      	cmp	r1, r6
 800d876:	d335      	bcc.n	800d8e4 <rshift+0x98>
 800d878:	1a9b      	subs	r3, r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	1eea      	subs	r2, r5, #3
 800d87e:	4296      	cmp	r6, r2
 800d880:	bf38      	it	cc
 800d882:	2300      	movcc	r3, #0
 800d884:	4423      	add	r3, r4
 800d886:	e015      	b.n	800d8b4 <rshift+0x68>
 800d888:	46a1      	mov	r9, r4
 800d88a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d88e:	f1c1 0820 	rsb	r8, r1, #32
 800d892:	40cf      	lsrs	r7, r1
 800d894:	f105 0e04 	add.w	lr, r5, #4
 800d898:	4576      	cmp	r6, lr
 800d89a:	46f4      	mov	ip, lr
 800d89c:	d816      	bhi.n	800d8cc <rshift+0x80>
 800d89e:	1a9a      	subs	r2, r3, r2
 800d8a0:	0092      	lsls	r2, r2, #2
 800d8a2:	3a04      	subs	r2, #4
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	42ae      	cmp	r6, r5
 800d8a8:	bf38      	it	cc
 800d8aa:	2200      	movcc	r2, #0
 800d8ac:	18a3      	adds	r3, r4, r2
 800d8ae:	50a7      	str	r7, [r4, r2]
 800d8b0:	b107      	cbz	r7, 800d8b4 <rshift+0x68>
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	42a3      	cmp	r3, r4
 800d8b6:	eba3 0204 	sub.w	r2, r3, r4
 800d8ba:	bf08      	it	eq
 800d8bc:	2300      	moveq	r3, #0
 800d8be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8c2:	6102      	str	r2, [r0, #16]
 800d8c4:	bf08      	it	eq
 800d8c6:	6143      	streq	r3, [r0, #20]
 800d8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8cc:	f8dc c000 	ldr.w	ip, [ip]
 800d8d0:	fa0c fc08 	lsl.w	ip, ip, r8
 800d8d4:	ea4c 0707 	orr.w	r7, ip, r7
 800d8d8:	f849 7b04 	str.w	r7, [r9], #4
 800d8dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8e0:	40cf      	lsrs	r7, r1
 800d8e2:	e7d9      	b.n	800d898 <rshift+0x4c>
 800d8e4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8e8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8ec:	e7c2      	b.n	800d874 <rshift+0x28>
 800d8ee:	4623      	mov	r3, r4
 800d8f0:	e7e0      	b.n	800d8b4 <rshift+0x68>

0800d8f2 <__hexdig_fun>:
 800d8f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d8f6:	2b09      	cmp	r3, #9
 800d8f8:	d802      	bhi.n	800d900 <__hexdig_fun+0xe>
 800d8fa:	3820      	subs	r0, #32
 800d8fc:	b2c0      	uxtb	r0, r0
 800d8fe:	4770      	bx	lr
 800d900:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d904:	2b05      	cmp	r3, #5
 800d906:	d801      	bhi.n	800d90c <__hexdig_fun+0x1a>
 800d908:	3847      	subs	r0, #71	; 0x47
 800d90a:	e7f7      	b.n	800d8fc <__hexdig_fun+0xa>
 800d90c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d910:	2b05      	cmp	r3, #5
 800d912:	d801      	bhi.n	800d918 <__hexdig_fun+0x26>
 800d914:	3827      	subs	r0, #39	; 0x27
 800d916:	e7f1      	b.n	800d8fc <__hexdig_fun+0xa>
 800d918:	2000      	movs	r0, #0
 800d91a:	4770      	bx	lr

0800d91c <__gethex>:
 800d91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d920:	4681      	mov	r9, r0
 800d922:	468a      	mov	sl, r1
 800d924:	4617      	mov	r7, r2
 800d926:	680a      	ldr	r2, [r1, #0]
 800d928:	b085      	sub	sp, #20
 800d92a:	f102 0b02 	add.w	fp, r2, #2
 800d92e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d932:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d936:	9302      	str	r3, [sp, #8]
 800d938:	32fe      	adds	r2, #254	; 0xfe
 800d93a:	eb02 030b 	add.w	r3, r2, fp
 800d93e:	46d8      	mov	r8, fp
 800d940:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	2830      	cmp	r0, #48	; 0x30
 800d948:	d0f7      	beq.n	800d93a <__gethex+0x1e>
 800d94a:	f7ff ffd2 	bl	800d8f2 <__hexdig_fun>
 800d94e:	4604      	mov	r4, r0
 800d950:	2800      	cmp	r0, #0
 800d952:	d138      	bne.n	800d9c6 <__gethex+0xaa>
 800d954:	2201      	movs	r2, #1
 800d956:	4640      	mov	r0, r8
 800d958:	49a7      	ldr	r1, [pc, #668]	; (800dbf8 <__gethex+0x2dc>)
 800d95a:	f7ff ff0f 	bl	800d77c <strncmp>
 800d95e:	4606      	mov	r6, r0
 800d960:	2800      	cmp	r0, #0
 800d962:	d169      	bne.n	800da38 <__gethex+0x11c>
 800d964:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d968:	465d      	mov	r5, fp
 800d96a:	f7ff ffc2 	bl	800d8f2 <__hexdig_fun>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d064      	beq.n	800da3c <__gethex+0x120>
 800d972:	465a      	mov	r2, fp
 800d974:	7810      	ldrb	r0, [r2, #0]
 800d976:	4690      	mov	r8, r2
 800d978:	2830      	cmp	r0, #48	; 0x30
 800d97a:	f102 0201 	add.w	r2, r2, #1
 800d97e:	d0f9      	beq.n	800d974 <__gethex+0x58>
 800d980:	f7ff ffb7 	bl	800d8f2 <__hexdig_fun>
 800d984:	2301      	movs	r3, #1
 800d986:	fab0 f480 	clz	r4, r0
 800d98a:	465e      	mov	r6, fp
 800d98c:	0964      	lsrs	r4, r4, #5
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	4642      	mov	r2, r8
 800d992:	4615      	mov	r5, r2
 800d994:	7828      	ldrb	r0, [r5, #0]
 800d996:	3201      	adds	r2, #1
 800d998:	f7ff ffab 	bl	800d8f2 <__hexdig_fun>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d1f8      	bne.n	800d992 <__gethex+0x76>
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	4994      	ldr	r1, [pc, #592]	; (800dbf8 <__gethex+0x2dc>)
 800d9a6:	f7ff fee9 	bl	800d77c <strncmp>
 800d9aa:	b978      	cbnz	r0, 800d9cc <__gethex+0xb0>
 800d9ac:	b946      	cbnz	r6, 800d9c0 <__gethex+0xa4>
 800d9ae:	1c6e      	adds	r6, r5, #1
 800d9b0:	4632      	mov	r2, r6
 800d9b2:	4615      	mov	r5, r2
 800d9b4:	7828      	ldrb	r0, [r5, #0]
 800d9b6:	3201      	adds	r2, #1
 800d9b8:	f7ff ff9b 	bl	800d8f2 <__hexdig_fun>
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	d1f8      	bne.n	800d9b2 <__gethex+0x96>
 800d9c0:	1b73      	subs	r3, r6, r5
 800d9c2:	009e      	lsls	r6, r3, #2
 800d9c4:	e004      	b.n	800d9d0 <__gethex+0xb4>
 800d9c6:	2400      	movs	r4, #0
 800d9c8:	4626      	mov	r6, r4
 800d9ca:	e7e1      	b.n	800d990 <__gethex+0x74>
 800d9cc:	2e00      	cmp	r6, #0
 800d9ce:	d1f7      	bne.n	800d9c0 <__gethex+0xa4>
 800d9d0:	782b      	ldrb	r3, [r5, #0]
 800d9d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d9d6:	2b50      	cmp	r3, #80	; 0x50
 800d9d8:	d13d      	bne.n	800da56 <__gethex+0x13a>
 800d9da:	786b      	ldrb	r3, [r5, #1]
 800d9dc:	2b2b      	cmp	r3, #43	; 0x2b
 800d9de:	d02f      	beq.n	800da40 <__gethex+0x124>
 800d9e0:	2b2d      	cmp	r3, #45	; 0x2d
 800d9e2:	d031      	beq.n	800da48 <__gethex+0x12c>
 800d9e4:	f04f 0b00 	mov.w	fp, #0
 800d9e8:	1c69      	adds	r1, r5, #1
 800d9ea:	7808      	ldrb	r0, [r1, #0]
 800d9ec:	f7ff ff81 	bl	800d8f2 <__hexdig_fun>
 800d9f0:	1e42      	subs	r2, r0, #1
 800d9f2:	b2d2      	uxtb	r2, r2
 800d9f4:	2a18      	cmp	r2, #24
 800d9f6:	d82e      	bhi.n	800da56 <__gethex+0x13a>
 800d9f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d9fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da00:	f7ff ff77 	bl	800d8f2 <__hexdig_fun>
 800da04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800da08:	fa5f fc8c 	uxtb.w	ip, ip
 800da0c:	f1bc 0f18 	cmp.w	ip, #24
 800da10:	d91d      	bls.n	800da4e <__gethex+0x132>
 800da12:	f1bb 0f00 	cmp.w	fp, #0
 800da16:	d000      	beq.n	800da1a <__gethex+0xfe>
 800da18:	4252      	negs	r2, r2
 800da1a:	4416      	add	r6, r2
 800da1c:	f8ca 1000 	str.w	r1, [sl]
 800da20:	b1dc      	cbz	r4, 800da5a <__gethex+0x13e>
 800da22:	9b01      	ldr	r3, [sp, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	bf14      	ite	ne
 800da28:	f04f 0800 	movne.w	r8, #0
 800da2c:	f04f 0806 	moveq.w	r8, #6
 800da30:	4640      	mov	r0, r8
 800da32:	b005      	add	sp, #20
 800da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da38:	4645      	mov	r5, r8
 800da3a:	4626      	mov	r6, r4
 800da3c:	2401      	movs	r4, #1
 800da3e:	e7c7      	b.n	800d9d0 <__gethex+0xb4>
 800da40:	f04f 0b00 	mov.w	fp, #0
 800da44:	1ca9      	adds	r1, r5, #2
 800da46:	e7d0      	b.n	800d9ea <__gethex+0xce>
 800da48:	f04f 0b01 	mov.w	fp, #1
 800da4c:	e7fa      	b.n	800da44 <__gethex+0x128>
 800da4e:	230a      	movs	r3, #10
 800da50:	fb03 0002 	mla	r0, r3, r2, r0
 800da54:	e7d0      	b.n	800d9f8 <__gethex+0xdc>
 800da56:	4629      	mov	r1, r5
 800da58:	e7e0      	b.n	800da1c <__gethex+0x100>
 800da5a:	4621      	mov	r1, r4
 800da5c:	eba5 0308 	sub.w	r3, r5, r8
 800da60:	3b01      	subs	r3, #1
 800da62:	2b07      	cmp	r3, #7
 800da64:	dc0a      	bgt.n	800da7c <__gethex+0x160>
 800da66:	4648      	mov	r0, r9
 800da68:	f7fe f932 	bl	800bcd0 <_Balloc>
 800da6c:	4604      	mov	r4, r0
 800da6e:	b940      	cbnz	r0, 800da82 <__gethex+0x166>
 800da70:	4602      	mov	r2, r0
 800da72:	21e4      	movs	r1, #228	; 0xe4
 800da74:	4b61      	ldr	r3, [pc, #388]	; (800dbfc <__gethex+0x2e0>)
 800da76:	4862      	ldr	r0, [pc, #392]	; (800dc00 <__gethex+0x2e4>)
 800da78:	f7ff feb6 	bl	800d7e8 <__assert_func>
 800da7c:	3101      	adds	r1, #1
 800da7e:	105b      	asrs	r3, r3, #1
 800da80:	e7ef      	b.n	800da62 <__gethex+0x146>
 800da82:	2300      	movs	r3, #0
 800da84:	469b      	mov	fp, r3
 800da86:	f100 0a14 	add.w	sl, r0, #20
 800da8a:	f8cd a004 	str.w	sl, [sp, #4]
 800da8e:	45a8      	cmp	r8, r5
 800da90:	d344      	bcc.n	800db1c <__gethex+0x200>
 800da92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da96:	4658      	mov	r0, fp
 800da98:	f848 bb04 	str.w	fp, [r8], #4
 800da9c:	eba8 080a 	sub.w	r8, r8, sl
 800daa0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800daa4:	6122      	str	r2, [r4, #16]
 800daa6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800daaa:	f7fe fa03 	bl	800beb4 <__hi0bits>
 800daae:	683d      	ldr	r5, [r7, #0]
 800dab0:	eba8 0800 	sub.w	r8, r8, r0
 800dab4:	45a8      	cmp	r8, r5
 800dab6:	dd59      	ble.n	800db6c <__gethex+0x250>
 800dab8:	eba8 0805 	sub.w	r8, r8, r5
 800dabc:	4641      	mov	r1, r8
 800dabe:	4620      	mov	r0, r4
 800dac0:	f7fe fd81 	bl	800c5c6 <__any_on>
 800dac4:	4683      	mov	fp, r0
 800dac6:	b1b8      	cbz	r0, 800daf8 <__gethex+0x1dc>
 800dac8:	f04f 0b01 	mov.w	fp, #1
 800dacc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800dad0:	1159      	asrs	r1, r3, #5
 800dad2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dad6:	f003 021f 	and.w	r2, r3, #31
 800dada:	fa0b f202 	lsl.w	r2, fp, r2
 800dade:	420a      	tst	r2, r1
 800dae0:	d00a      	beq.n	800daf8 <__gethex+0x1dc>
 800dae2:	455b      	cmp	r3, fp
 800dae4:	dd06      	ble.n	800daf4 <__gethex+0x1d8>
 800dae6:	4620      	mov	r0, r4
 800dae8:	f1a8 0102 	sub.w	r1, r8, #2
 800daec:	f7fe fd6b 	bl	800c5c6 <__any_on>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d138      	bne.n	800db66 <__gethex+0x24a>
 800daf4:	f04f 0b02 	mov.w	fp, #2
 800daf8:	4641      	mov	r1, r8
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7ff fea6 	bl	800d84c <rshift>
 800db00:	4446      	add	r6, r8
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	42b3      	cmp	r3, r6
 800db06:	da41      	bge.n	800db8c <__gethex+0x270>
 800db08:	4621      	mov	r1, r4
 800db0a:	4648      	mov	r0, r9
 800db0c:	f7fe f920 	bl	800bd50 <_Bfree>
 800db10:	2300      	movs	r3, #0
 800db12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db14:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800db18:	6013      	str	r3, [r2, #0]
 800db1a:	e789      	b.n	800da30 <__gethex+0x114>
 800db1c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800db20:	2a2e      	cmp	r2, #46	; 0x2e
 800db22:	d014      	beq.n	800db4e <__gethex+0x232>
 800db24:	2b20      	cmp	r3, #32
 800db26:	d106      	bne.n	800db36 <__gethex+0x21a>
 800db28:	9b01      	ldr	r3, [sp, #4]
 800db2a:	f843 bb04 	str.w	fp, [r3], #4
 800db2e:	f04f 0b00 	mov.w	fp, #0
 800db32:	9301      	str	r3, [sp, #4]
 800db34:	465b      	mov	r3, fp
 800db36:	7828      	ldrb	r0, [r5, #0]
 800db38:	9303      	str	r3, [sp, #12]
 800db3a:	f7ff feda 	bl	800d8f2 <__hexdig_fun>
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	f000 000f 	and.w	r0, r0, #15
 800db44:	4098      	lsls	r0, r3
 800db46:	ea4b 0b00 	orr.w	fp, fp, r0
 800db4a:	3304      	adds	r3, #4
 800db4c:	e79f      	b.n	800da8e <__gethex+0x172>
 800db4e:	45a8      	cmp	r8, r5
 800db50:	d8e8      	bhi.n	800db24 <__gethex+0x208>
 800db52:	2201      	movs	r2, #1
 800db54:	4628      	mov	r0, r5
 800db56:	4928      	ldr	r1, [pc, #160]	; (800dbf8 <__gethex+0x2dc>)
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	f7ff fe0f 	bl	800d77c <strncmp>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	2800      	cmp	r0, #0
 800db62:	d1df      	bne.n	800db24 <__gethex+0x208>
 800db64:	e793      	b.n	800da8e <__gethex+0x172>
 800db66:	f04f 0b03 	mov.w	fp, #3
 800db6a:	e7c5      	b.n	800daf8 <__gethex+0x1dc>
 800db6c:	da0b      	bge.n	800db86 <__gethex+0x26a>
 800db6e:	eba5 0808 	sub.w	r8, r5, r8
 800db72:	4621      	mov	r1, r4
 800db74:	4642      	mov	r2, r8
 800db76:	4648      	mov	r0, r9
 800db78:	f7fe fb02 	bl	800c180 <__lshift>
 800db7c:	4604      	mov	r4, r0
 800db7e:	eba6 0608 	sub.w	r6, r6, r8
 800db82:	f100 0a14 	add.w	sl, r0, #20
 800db86:	f04f 0b00 	mov.w	fp, #0
 800db8a:	e7ba      	b.n	800db02 <__gethex+0x1e6>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	42b3      	cmp	r3, r6
 800db90:	dd74      	ble.n	800dc7c <__gethex+0x360>
 800db92:	1b9e      	subs	r6, r3, r6
 800db94:	42b5      	cmp	r5, r6
 800db96:	dc35      	bgt.n	800dc04 <__gethex+0x2e8>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d023      	beq.n	800dbe6 <__gethex+0x2ca>
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d025      	beq.n	800dbee <__gethex+0x2d2>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d115      	bne.n	800dbd2 <__gethex+0x2b6>
 800dba6:	42b5      	cmp	r5, r6
 800dba8:	d113      	bne.n	800dbd2 <__gethex+0x2b6>
 800dbaa:	2d01      	cmp	r5, #1
 800dbac:	d10b      	bne.n	800dbc6 <__gethex+0x2aa>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	9a02      	ldr	r2, [sp, #8]
 800dbb2:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	2301      	movs	r3, #1
 800dbba:	6123      	str	r3, [r4, #16]
 800dbbc:	f8ca 3000 	str.w	r3, [sl]
 800dbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc2:	601c      	str	r4, [r3, #0]
 800dbc4:	e734      	b.n	800da30 <__gethex+0x114>
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	1e69      	subs	r1, r5, #1
 800dbca:	f7fe fcfc 	bl	800c5c6 <__any_on>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d1ed      	bne.n	800dbae <__gethex+0x292>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4648      	mov	r0, r9
 800dbd6:	f7fe f8bb 	bl	800bd50 <_Bfree>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbde:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	e724      	b.n	800da30 <__gethex+0x114>
 800dbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f2      	bne.n	800dbd2 <__gethex+0x2b6>
 800dbec:	e7df      	b.n	800dbae <__gethex+0x292>
 800dbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1dc      	bne.n	800dbae <__gethex+0x292>
 800dbf4:	e7ed      	b.n	800dbd2 <__gethex+0x2b6>
 800dbf6:	bf00      	nop
 800dbf8:	0800edb4 	.word	0x0800edb4
 800dbfc:	0800ec49 	.word	0x0800ec49
 800dc00:	0800ef5e 	.word	0x0800ef5e
 800dc04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800dc08:	f1bb 0f00 	cmp.w	fp, #0
 800dc0c:	d133      	bne.n	800dc76 <__gethex+0x35a>
 800dc0e:	f1b8 0f00 	cmp.w	r8, #0
 800dc12:	d004      	beq.n	800dc1e <__gethex+0x302>
 800dc14:	4641      	mov	r1, r8
 800dc16:	4620      	mov	r0, r4
 800dc18:	f7fe fcd5 	bl	800c5c6 <__any_on>
 800dc1c:	4683      	mov	fp, r0
 800dc1e:	2301      	movs	r3, #1
 800dc20:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dc24:	f008 081f 	and.w	r8, r8, #31
 800dc28:	fa03 f308 	lsl.w	r3, r3, r8
 800dc2c:	f04f 0802 	mov.w	r8, #2
 800dc30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc34:	4631      	mov	r1, r6
 800dc36:	4213      	tst	r3, r2
 800dc38:	4620      	mov	r0, r4
 800dc3a:	bf18      	it	ne
 800dc3c:	f04b 0b02 	orrne.w	fp, fp, #2
 800dc40:	1bad      	subs	r5, r5, r6
 800dc42:	f7ff fe03 	bl	800d84c <rshift>
 800dc46:	687e      	ldr	r6, [r7, #4]
 800dc48:	f1bb 0f00 	cmp.w	fp, #0
 800dc4c:	d04a      	beq.n	800dce4 <__gethex+0x3c8>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d016      	beq.n	800dc82 <__gethex+0x366>
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d018      	beq.n	800dc8a <__gethex+0x36e>
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d109      	bne.n	800dc70 <__gethex+0x354>
 800dc5c:	f01b 0f02 	tst.w	fp, #2
 800dc60:	d006      	beq.n	800dc70 <__gethex+0x354>
 800dc62:	f8da 3000 	ldr.w	r3, [sl]
 800dc66:	ea4b 0b03 	orr.w	fp, fp, r3
 800dc6a:	f01b 0f01 	tst.w	fp, #1
 800dc6e:	d10f      	bne.n	800dc90 <__gethex+0x374>
 800dc70:	f048 0810 	orr.w	r8, r8, #16
 800dc74:	e036      	b.n	800dce4 <__gethex+0x3c8>
 800dc76:	f04f 0b01 	mov.w	fp, #1
 800dc7a:	e7d0      	b.n	800dc1e <__gethex+0x302>
 800dc7c:	f04f 0801 	mov.w	r8, #1
 800dc80:	e7e2      	b.n	800dc48 <__gethex+0x32c>
 800dc82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc84:	f1c3 0301 	rsb	r3, r3, #1
 800dc88:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0ef      	beq.n	800dc70 <__gethex+0x354>
 800dc90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc94:	f104 0214 	add.w	r2, r4, #20
 800dc98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800dca4:	4694      	mov	ip, r2
 800dca6:	f852 1b04 	ldr.w	r1, [r2], #4
 800dcaa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800dcae:	d01e      	beq.n	800dcee <__gethex+0x3d2>
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	f8cc 1000 	str.w	r1, [ip]
 800dcb6:	f1b8 0f02 	cmp.w	r8, #2
 800dcba:	f104 0214 	add.w	r2, r4, #20
 800dcbe:	d13d      	bne.n	800dd3c <__gethex+0x420>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	42ab      	cmp	r3, r5
 800dcc6:	d10b      	bne.n	800dce0 <__gethex+0x3c4>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	1169      	asrs	r1, r5, #5
 800dccc:	f005 051f 	and.w	r5, r5, #31
 800dcd0:	fa03 f505 	lsl.w	r5, r3, r5
 800dcd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcd8:	421d      	tst	r5, r3
 800dcda:	bf18      	it	ne
 800dcdc:	f04f 0801 	movne.w	r8, #1
 800dce0:	f048 0820 	orr.w	r8, r8, #32
 800dce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dce6:	601c      	str	r4, [r3, #0]
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	601e      	str	r6, [r3, #0]
 800dcec:	e6a0      	b.n	800da30 <__gethex+0x114>
 800dcee:	4290      	cmp	r0, r2
 800dcf0:	f842 3c04 	str.w	r3, [r2, #-4]
 800dcf4:	d8d6      	bhi.n	800dca4 <__gethex+0x388>
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	4593      	cmp	fp, r2
 800dcfa:	db17      	blt.n	800dd2c <__gethex+0x410>
 800dcfc:	6861      	ldr	r1, [r4, #4]
 800dcfe:	4648      	mov	r0, r9
 800dd00:	3101      	adds	r1, #1
 800dd02:	f7fd ffe5 	bl	800bcd0 <_Balloc>
 800dd06:	4682      	mov	sl, r0
 800dd08:	b918      	cbnz	r0, 800dd12 <__gethex+0x3f6>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	2184      	movs	r1, #132	; 0x84
 800dd0e:	4b1a      	ldr	r3, [pc, #104]	; (800dd78 <__gethex+0x45c>)
 800dd10:	e6b1      	b.n	800da76 <__gethex+0x15a>
 800dd12:	6922      	ldr	r2, [r4, #16]
 800dd14:	f104 010c 	add.w	r1, r4, #12
 800dd18:	3202      	adds	r2, #2
 800dd1a:	0092      	lsls	r2, r2, #2
 800dd1c:	300c      	adds	r0, #12
 800dd1e:	f7ff fd4f 	bl	800d7c0 <memcpy>
 800dd22:	4621      	mov	r1, r4
 800dd24:	4648      	mov	r0, r9
 800dd26:	f7fe f813 	bl	800bd50 <_Bfree>
 800dd2a:	4654      	mov	r4, sl
 800dd2c:	6922      	ldr	r2, [r4, #16]
 800dd2e:	1c51      	adds	r1, r2, #1
 800dd30:	6121      	str	r1, [r4, #16]
 800dd32:	2101      	movs	r1, #1
 800dd34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dd38:	6151      	str	r1, [r2, #20]
 800dd3a:	e7bc      	b.n	800dcb6 <__gethex+0x39a>
 800dd3c:	6921      	ldr	r1, [r4, #16]
 800dd3e:	4559      	cmp	r1, fp
 800dd40:	dd0b      	ble.n	800dd5a <__gethex+0x43e>
 800dd42:	2101      	movs	r1, #1
 800dd44:	4620      	mov	r0, r4
 800dd46:	f7ff fd81 	bl	800d84c <rshift>
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	3601      	adds	r6, #1
 800dd4e:	42b3      	cmp	r3, r6
 800dd50:	f6ff aeda 	blt.w	800db08 <__gethex+0x1ec>
 800dd54:	f04f 0801 	mov.w	r8, #1
 800dd58:	e7c2      	b.n	800dce0 <__gethex+0x3c4>
 800dd5a:	f015 051f 	ands.w	r5, r5, #31
 800dd5e:	d0f9      	beq.n	800dd54 <__gethex+0x438>
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	f1c5 0520 	rsb	r5, r5, #32
 800dd66:	441a      	add	r2, r3
 800dd68:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800dd6c:	f7fe f8a2 	bl	800beb4 <__hi0bits>
 800dd70:	42a8      	cmp	r0, r5
 800dd72:	dbe6      	blt.n	800dd42 <__gethex+0x426>
 800dd74:	e7ee      	b.n	800dd54 <__gethex+0x438>
 800dd76:	bf00      	nop
 800dd78:	0800ec49 	.word	0x0800ec49

0800dd7c <L_shift>:
 800dd7c:	f1c2 0208 	rsb	r2, r2, #8
 800dd80:	0092      	lsls	r2, r2, #2
 800dd82:	b570      	push	{r4, r5, r6, lr}
 800dd84:	f1c2 0620 	rsb	r6, r2, #32
 800dd88:	6843      	ldr	r3, [r0, #4]
 800dd8a:	6804      	ldr	r4, [r0, #0]
 800dd8c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd90:	432c      	orrs	r4, r5
 800dd92:	40d3      	lsrs	r3, r2
 800dd94:	6004      	str	r4, [r0, #0]
 800dd96:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd9a:	4288      	cmp	r0, r1
 800dd9c:	d3f4      	bcc.n	800dd88 <L_shift+0xc>
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}

0800dda0 <__match>:
 800dda0:	b530      	push	{r4, r5, lr}
 800dda2:	6803      	ldr	r3, [r0, #0]
 800dda4:	3301      	adds	r3, #1
 800dda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddaa:	b914      	cbnz	r4, 800ddb2 <__match+0x12>
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	2001      	movs	r0, #1
 800ddb0:	bd30      	pop	{r4, r5, pc}
 800ddb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ddba:	2d19      	cmp	r5, #25
 800ddbc:	bf98      	it	ls
 800ddbe:	3220      	addls	r2, #32
 800ddc0:	42a2      	cmp	r2, r4
 800ddc2:	d0f0      	beq.n	800dda6 <__match+0x6>
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	e7f3      	b.n	800ddb0 <__match+0x10>

0800ddc8 <__hexnan>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	2500      	movs	r5, #0
 800ddce:	680b      	ldr	r3, [r1, #0]
 800ddd0:	4682      	mov	sl, r0
 800ddd2:	115e      	asrs	r6, r3, #5
 800ddd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddd8:	f013 031f 	ands.w	r3, r3, #31
 800dddc:	bf18      	it	ne
 800ddde:	3604      	addne	r6, #4
 800dde0:	1f37      	subs	r7, r6, #4
 800dde2:	4690      	mov	r8, r2
 800dde4:	46b9      	mov	r9, r7
 800dde6:	463c      	mov	r4, r7
 800dde8:	46ab      	mov	fp, r5
 800ddea:	b087      	sub	sp, #28
 800ddec:	6801      	ldr	r1, [r0, #0]
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddf4:	9502      	str	r5, [sp, #8]
 800ddf6:	784a      	ldrb	r2, [r1, #1]
 800ddf8:	1c4b      	adds	r3, r1, #1
 800ddfa:	9303      	str	r3, [sp, #12]
 800ddfc:	b342      	cbz	r2, 800de50 <__hexnan+0x88>
 800ddfe:	4610      	mov	r0, r2
 800de00:	9105      	str	r1, [sp, #20]
 800de02:	9204      	str	r2, [sp, #16]
 800de04:	f7ff fd75 	bl	800d8f2 <__hexdig_fun>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d14f      	bne.n	800deac <__hexnan+0xe4>
 800de0c:	9a04      	ldr	r2, [sp, #16]
 800de0e:	9905      	ldr	r1, [sp, #20]
 800de10:	2a20      	cmp	r2, #32
 800de12:	d818      	bhi.n	800de46 <__hexnan+0x7e>
 800de14:	9b02      	ldr	r3, [sp, #8]
 800de16:	459b      	cmp	fp, r3
 800de18:	dd13      	ble.n	800de42 <__hexnan+0x7a>
 800de1a:	454c      	cmp	r4, r9
 800de1c:	d206      	bcs.n	800de2c <__hexnan+0x64>
 800de1e:	2d07      	cmp	r5, #7
 800de20:	dc04      	bgt.n	800de2c <__hexnan+0x64>
 800de22:	462a      	mov	r2, r5
 800de24:	4649      	mov	r1, r9
 800de26:	4620      	mov	r0, r4
 800de28:	f7ff ffa8 	bl	800dd7c <L_shift>
 800de2c:	4544      	cmp	r4, r8
 800de2e:	d950      	bls.n	800ded2 <__hexnan+0x10a>
 800de30:	2300      	movs	r3, #0
 800de32:	f1a4 0904 	sub.w	r9, r4, #4
 800de36:	f844 3c04 	str.w	r3, [r4, #-4]
 800de3a:	461d      	mov	r5, r3
 800de3c:	464c      	mov	r4, r9
 800de3e:	f8cd b008 	str.w	fp, [sp, #8]
 800de42:	9903      	ldr	r1, [sp, #12]
 800de44:	e7d7      	b.n	800ddf6 <__hexnan+0x2e>
 800de46:	2a29      	cmp	r2, #41	; 0x29
 800de48:	d155      	bne.n	800def6 <__hexnan+0x12e>
 800de4a:	3102      	adds	r1, #2
 800de4c:	f8ca 1000 	str.w	r1, [sl]
 800de50:	f1bb 0f00 	cmp.w	fp, #0
 800de54:	d04f      	beq.n	800def6 <__hexnan+0x12e>
 800de56:	454c      	cmp	r4, r9
 800de58:	d206      	bcs.n	800de68 <__hexnan+0xa0>
 800de5a:	2d07      	cmp	r5, #7
 800de5c:	dc04      	bgt.n	800de68 <__hexnan+0xa0>
 800de5e:	462a      	mov	r2, r5
 800de60:	4649      	mov	r1, r9
 800de62:	4620      	mov	r0, r4
 800de64:	f7ff ff8a 	bl	800dd7c <L_shift>
 800de68:	4544      	cmp	r4, r8
 800de6a:	d934      	bls.n	800ded6 <__hexnan+0x10e>
 800de6c:	4623      	mov	r3, r4
 800de6e:	f1a8 0204 	sub.w	r2, r8, #4
 800de72:	f853 1b04 	ldr.w	r1, [r3], #4
 800de76:	429f      	cmp	r7, r3
 800de78:	f842 1f04 	str.w	r1, [r2, #4]!
 800de7c:	d2f9      	bcs.n	800de72 <__hexnan+0xaa>
 800de7e:	1b3b      	subs	r3, r7, r4
 800de80:	f023 0303 	bic.w	r3, r3, #3
 800de84:	3304      	adds	r3, #4
 800de86:	3e03      	subs	r6, #3
 800de88:	3401      	adds	r4, #1
 800de8a:	42a6      	cmp	r6, r4
 800de8c:	bf38      	it	cc
 800de8e:	2304      	movcc	r3, #4
 800de90:	2200      	movs	r2, #0
 800de92:	4443      	add	r3, r8
 800de94:	f843 2b04 	str.w	r2, [r3], #4
 800de98:	429f      	cmp	r7, r3
 800de9a:	d2fb      	bcs.n	800de94 <__hexnan+0xcc>
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	b91b      	cbnz	r3, 800dea8 <__hexnan+0xe0>
 800dea0:	4547      	cmp	r7, r8
 800dea2:	d126      	bne.n	800def2 <__hexnan+0x12a>
 800dea4:	2301      	movs	r3, #1
 800dea6:	603b      	str	r3, [r7, #0]
 800dea8:	2005      	movs	r0, #5
 800deaa:	e025      	b.n	800def8 <__hexnan+0x130>
 800deac:	3501      	adds	r5, #1
 800deae:	2d08      	cmp	r5, #8
 800deb0:	f10b 0b01 	add.w	fp, fp, #1
 800deb4:	dd06      	ble.n	800dec4 <__hexnan+0xfc>
 800deb6:	4544      	cmp	r4, r8
 800deb8:	d9c3      	bls.n	800de42 <__hexnan+0x7a>
 800deba:	2300      	movs	r3, #0
 800debc:	2501      	movs	r5, #1
 800debe:	f844 3c04 	str.w	r3, [r4, #-4]
 800dec2:	3c04      	subs	r4, #4
 800dec4:	6822      	ldr	r2, [r4, #0]
 800dec6:	f000 000f 	and.w	r0, r0, #15
 800deca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	e7b7      	b.n	800de42 <__hexnan+0x7a>
 800ded2:	2508      	movs	r5, #8
 800ded4:	e7b5      	b.n	800de42 <__hexnan+0x7a>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0df      	beq.n	800de9c <__hexnan+0xd4>
 800dedc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dee0:	f1c3 0320 	rsb	r3, r3, #32
 800dee4:	40da      	lsrs	r2, r3
 800dee6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800deea:	4013      	ands	r3, r2
 800deec:	f846 3c04 	str.w	r3, [r6, #-4]
 800def0:	e7d4      	b.n	800de9c <__hexnan+0xd4>
 800def2:	3f04      	subs	r7, #4
 800def4:	e7d2      	b.n	800de9c <__hexnan+0xd4>
 800def6:	2004      	movs	r0, #4
 800def8:	b007      	add	sp, #28
 800defa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800defe <__ascii_mbtowc>:
 800defe:	b082      	sub	sp, #8
 800df00:	b901      	cbnz	r1, 800df04 <__ascii_mbtowc+0x6>
 800df02:	a901      	add	r1, sp, #4
 800df04:	b142      	cbz	r2, 800df18 <__ascii_mbtowc+0x1a>
 800df06:	b14b      	cbz	r3, 800df1c <__ascii_mbtowc+0x1e>
 800df08:	7813      	ldrb	r3, [r2, #0]
 800df0a:	600b      	str	r3, [r1, #0]
 800df0c:	7812      	ldrb	r2, [r2, #0]
 800df0e:	1e10      	subs	r0, r2, #0
 800df10:	bf18      	it	ne
 800df12:	2001      	movne	r0, #1
 800df14:	b002      	add	sp, #8
 800df16:	4770      	bx	lr
 800df18:	4610      	mov	r0, r2
 800df1a:	e7fb      	b.n	800df14 <__ascii_mbtowc+0x16>
 800df1c:	f06f 0001 	mvn.w	r0, #1
 800df20:	e7f8      	b.n	800df14 <__ascii_mbtowc+0x16>

0800df22 <_realloc_r>:
 800df22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df26:	4680      	mov	r8, r0
 800df28:	4614      	mov	r4, r2
 800df2a:	460e      	mov	r6, r1
 800df2c:	b921      	cbnz	r1, 800df38 <_realloc_r+0x16>
 800df2e:	4611      	mov	r1, r2
 800df30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df34:	f7fd be40 	b.w	800bbb8 <_malloc_r>
 800df38:	b92a      	cbnz	r2, 800df46 <_realloc_r+0x24>
 800df3a:	f7fd fdcd 	bl	800bad8 <_free_r>
 800df3e:	4625      	mov	r5, r4
 800df40:	4628      	mov	r0, r5
 800df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df46:	f000 f842 	bl	800dfce <_malloc_usable_size_r>
 800df4a:	4284      	cmp	r4, r0
 800df4c:	4607      	mov	r7, r0
 800df4e:	d802      	bhi.n	800df56 <_realloc_r+0x34>
 800df50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df54:	d812      	bhi.n	800df7c <_realloc_r+0x5a>
 800df56:	4621      	mov	r1, r4
 800df58:	4640      	mov	r0, r8
 800df5a:	f7fd fe2d 	bl	800bbb8 <_malloc_r>
 800df5e:	4605      	mov	r5, r0
 800df60:	2800      	cmp	r0, #0
 800df62:	d0ed      	beq.n	800df40 <_realloc_r+0x1e>
 800df64:	42bc      	cmp	r4, r7
 800df66:	4622      	mov	r2, r4
 800df68:	4631      	mov	r1, r6
 800df6a:	bf28      	it	cs
 800df6c:	463a      	movcs	r2, r7
 800df6e:	f7ff fc27 	bl	800d7c0 <memcpy>
 800df72:	4631      	mov	r1, r6
 800df74:	4640      	mov	r0, r8
 800df76:	f7fd fdaf 	bl	800bad8 <_free_r>
 800df7a:	e7e1      	b.n	800df40 <_realloc_r+0x1e>
 800df7c:	4635      	mov	r5, r6
 800df7e:	e7df      	b.n	800df40 <_realloc_r+0x1e>

0800df80 <__ascii_wctomb>:
 800df80:	4603      	mov	r3, r0
 800df82:	4608      	mov	r0, r1
 800df84:	b141      	cbz	r1, 800df98 <__ascii_wctomb+0x18>
 800df86:	2aff      	cmp	r2, #255	; 0xff
 800df88:	d904      	bls.n	800df94 <__ascii_wctomb+0x14>
 800df8a:	228a      	movs	r2, #138	; 0x8a
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df90:	601a      	str	r2, [r3, #0]
 800df92:	4770      	bx	lr
 800df94:	2001      	movs	r0, #1
 800df96:	700a      	strb	r2, [r1, #0]
 800df98:	4770      	bx	lr
	...

0800df9c <fiprintf>:
 800df9c:	b40e      	push	{r1, r2, r3}
 800df9e:	b503      	push	{r0, r1, lr}
 800dfa0:	4601      	mov	r1, r0
 800dfa2:	ab03      	add	r3, sp, #12
 800dfa4:	4805      	ldr	r0, [pc, #20]	; (800dfbc <fiprintf+0x20>)
 800dfa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfaa:	6800      	ldr	r0, [r0, #0]
 800dfac:	9301      	str	r3, [sp, #4]
 800dfae:	f000 f83d 	bl	800e02c <_vfiprintf_r>
 800dfb2:	b002      	add	sp, #8
 800dfb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfb8:	b003      	add	sp, #12
 800dfba:	4770      	bx	lr
 800dfbc:	2000007c 	.word	0x2000007c

0800dfc0 <abort>:
 800dfc0:	2006      	movs	r0, #6
 800dfc2:	b508      	push	{r3, lr}
 800dfc4:	f000 fa0a 	bl	800e3dc <raise>
 800dfc8:	2001      	movs	r0, #1
 800dfca:	f7f4 fde8 	bl	8002b9e <_exit>

0800dfce <_malloc_usable_size_r>:
 800dfce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfd2:	1f18      	subs	r0, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfbc      	itt	lt
 800dfd8:	580b      	ldrlt	r3, [r1, r0]
 800dfda:	18c0      	addlt	r0, r0, r3
 800dfdc:	4770      	bx	lr

0800dfde <__sfputc_r>:
 800dfde:	6893      	ldr	r3, [r2, #8]
 800dfe0:	b410      	push	{r4}
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	6093      	str	r3, [r2, #8]
 800dfe8:	da07      	bge.n	800dffa <__sfputc_r+0x1c>
 800dfea:	6994      	ldr	r4, [r2, #24]
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	db01      	blt.n	800dff4 <__sfputc_r+0x16>
 800dff0:	290a      	cmp	r1, #10
 800dff2:	d102      	bne.n	800dffa <__sfputc_r+0x1c>
 800dff4:	bc10      	pop	{r4}
 800dff6:	f000 b933 	b.w	800e260 <__swbuf_r>
 800dffa:	6813      	ldr	r3, [r2, #0]
 800dffc:	1c58      	adds	r0, r3, #1
 800dffe:	6010      	str	r0, [r2, #0]
 800e000:	7019      	strb	r1, [r3, #0]
 800e002:	4608      	mov	r0, r1
 800e004:	bc10      	pop	{r4}
 800e006:	4770      	bx	lr

0800e008 <__sfputs_r>:
 800e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00a:	4606      	mov	r6, r0
 800e00c:	460f      	mov	r7, r1
 800e00e:	4614      	mov	r4, r2
 800e010:	18d5      	adds	r5, r2, r3
 800e012:	42ac      	cmp	r4, r5
 800e014:	d101      	bne.n	800e01a <__sfputs_r+0x12>
 800e016:	2000      	movs	r0, #0
 800e018:	e007      	b.n	800e02a <__sfputs_r+0x22>
 800e01a:	463a      	mov	r2, r7
 800e01c:	4630      	mov	r0, r6
 800e01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e022:	f7ff ffdc 	bl	800dfde <__sfputc_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d1f3      	bne.n	800e012 <__sfputs_r+0xa>
 800e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e02c <_vfiprintf_r>:
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	460d      	mov	r5, r1
 800e032:	4614      	mov	r4, r2
 800e034:	4698      	mov	r8, r3
 800e036:	4606      	mov	r6, r0
 800e038:	b09d      	sub	sp, #116	; 0x74
 800e03a:	b118      	cbz	r0, 800e044 <_vfiprintf_r+0x18>
 800e03c:	6a03      	ldr	r3, [r0, #32]
 800e03e:	b90b      	cbnz	r3, 800e044 <_vfiprintf_r+0x18>
 800e040:	f7fc fdb0 	bl	800aba4 <__sinit>
 800e044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e046:	07d9      	lsls	r1, r3, #31
 800e048:	d405      	bmi.n	800e056 <_vfiprintf_r+0x2a>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	059a      	lsls	r2, r3, #22
 800e04e:	d402      	bmi.n	800e056 <_vfiprintf_r+0x2a>
 800e050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e052:	f7fc febe 	bl	800add2 <__retarget_lock_acquire_recursive>
 800e056:	89ab      	ldrh	r3, [r5, #12]
 800e058:	071b      	lsls	r3, r3, #28
 800e05a:	d501      	bpl.n	800e060 <_vfiprintf_r+0x34>
 800e05c:	692b      	ldr	r3, [r5, #16]
 800e05e:	b99b      	cbnz	r3, 800e088 <_vfiprintf_r+0x5c>
 800e060:	4629      	mov	r1, r5
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f93a 	bl	800e2dc <__swsetup_r>
 800e068:	b170      	cbz	r0, 800e088 <_vfiprintf_r+0x5c>
 800e06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06c:	07dc      	lsls	r4, r3, #31
 800e06e:	d504      	bpl.n	800e07a <_vfiprintf_r+0x4e>
 800e070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e074:	b01d      	add	sp, #116	; 0x74
 800e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	0598      	lsls	r0, r3, #22
 800e07e:	d4f7      	bmi.n	800e070 <_vfiprintf_r+0x44>
 800e080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e082:	f7fc fea7 	bl	800add4 <__retarget_lock_release_recursive>
 800e086:	e7f3      	b.n	800e070 <_vfiprintf_r+0x44>
 800e088:	2300      	movs	r3, #0
 800e08a:	9309      	str	r3, [sp, #36]	; 0x24
 800e08c:	2320      	movs	r3, #32
 800e08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e092:	2330      	movs	r3, #48	; 0x30
 800e094:	f04f 0901 	mov.w	r9, #1
 800e098:	f8cd 800c 	str.w	r8, [sp, #12]
 800e09c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e24c <_vfiprintf_r+0x220>
 800e0a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	469a      	mov	sl, r3
 800e0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ac:	b10a      	cbz	r2, 800e0b2 <_vfiprintf_r+0x86>
 800e0ae:	2a25      	cmp	r2, #37	; 0x25
 800e0b0:	d1f9      	bne.n	800e0a6 <_vfiprintf_r+0x7a>
 800e0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e0b6:	d00b      	beq.n	800e0d0 <_vfiprintf_r+0xa4>
 800e0b8:	465b      	mov	r3, fp
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7ff ffa2 	bl	800e008 <__sfputs_r>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	f000 80a9 	beq.w	800e21c <_vfiprintf_r+0x1f0>
 800e0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0cc:	445a      	add	r2, fp
 800e0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 80a1 	beq.w	800e21c <_vfiprintf_r+0x1f0>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0e4:	f10a 0a01 	add.w	sl, sl, #1
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	9307      	str	r3, [sp, #28]
 800e0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f0:	931a      	str	r3, [sp, #104]	; 0x68
 800e0f2:	4654      	mov	r4, sl
 800e0f4:	2205      	movs	r2, #5
 800e0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fa:	4854      	ldr	r0, [pc, #336]	; (800e24c <_vfiprintf_r+0x220>)
 800e0fc:	f7fc fe6b 	bl	800add6 <memchr>
 800e100:	9a04      	ldr	r2, [sp, #16]
 800e102:	b9d8      	cbnz	r0, 800e13c <_vfiprintf_r+0x110>
 800e104:	06d1      	lsls	r1, r2, #27
 800e106:	bf44      	itt	mi
 800e108:	2320      	movmi	r3, #32
 800e10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e10e:	0713      	lsls	r3, r2, #28
 800e110:	bf44      	itt	mi
 800e112:	232b      	movmi	r3, #43	; 0x2b
 800e114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e118:	f89a 3000 	ldrb.w	r3, [sl]
 800e11c:	2b2a      	cmp	r3, #42	; 0x2a
 800e11e:	d015      	beq.n	800e14c <_vfiprintf_r+0x120>
 800e120:	4654      	mov	r4, sl
 800e122:	2000      	movs	r0, #0
 800e124:	f04f 0c0a 	mov.w	ip, #10
 800e128:	9a07      	ldr	r2, [sp, #28]
 800e12a:	4621      	mov	r1, r4
 800e12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e130:	3b30      	subs	r3, #48	; 0x30
 800e132:	2b09      	cmp	r3, #9
 800e134:	d94d      	bls.n	800e1d2 <_vfiprintf_r+0x1a6>
 800e136:	b1b0      	cbz	r0, 800e166 <_vfiprintf_r+0x13a>
 800e138:	9207      	str	r2, [sp, #28]
 800e13a:	e014      	b.n	800e166 <_vfiprintf_r+0x13a>
 800e13c:	eba0 0308 	sub.w	r3, r0, r8
 800e140:	fa09 f303 	lsl.w	r3, r9, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	46a2      	mov	sl, r4
 800e148:	9304      	str	r3, [sp, #16]
 800e14a:	e7d2      	b.n	800e0f2 <_vfiprintf_r+0xc6>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	1d19      	adds	r1, r3, #4
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	9103      	str	r1, [sp, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	bfbb      	ittet	lt
 800e158:	425b      	neglt	r3, r3
 800e15a:	f042 0202 	orrlt.w	r2, r2, #2
 800e15e:	9307      	strge	r3, [sp, #28]
 800e160:	9307      	strlt	r3, [sp, #28]
 800e162:	bfb8      	it	lt
 800e164:	9204      	strlt	r2, [sp, #16]
 800e166:	7823      	ldrb	r3, [r4, #0]
 800e168:	2b2e      	cmp	r3, #46	; 0x2e
 800e16a:	d10c      	bne.n	800e186 <_vfiprintf_r+0x15a>
 800e16c:	7863      	ldrb	r3, [r4, #1]
 800e16e:	2b2a      	cmp	r3, #42	; 0x2a
 800e170:	d134      	bne.n	800e1dc <_vfiprintf_r+0x1b0>
 800e172:	9b03      	ldr	r3, [sp, #12]
 800e174:	3402      	adds	r4, #2
 800e176:	1d1a      	adds	r2, r3, #4
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	9203      	str	r2, [sp, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bfb8      	it	lt
 800e180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e184:	9305      	str	r3, [sp, #20]
 800e186:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e250 <_vfiprintf_r+0x224>
 800e18a:	2203      	movs	r2, #3
 800e18c:	4650      	mov	r0, sl
 800e18e:	7821      	ldrb	r1, [r4, #0]
 800e190:	f7fc fe21 	bl	800add6 <memchr>
 800e194:	b138      	cbz	r0, 800e1a6 <_vfiprintf_r+0x17a>
 800e196:	2240      	movs	r2, #64	; 0x40
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	eba0 000a 	sub.w	r0, r0, sl
 800e19e:	4082      	lsls	r2, r0
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	3401      	adds	r4, #1
 800e1a4:	9304      	str	r3, [sp, #16]
 800e1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1aa:	2206      	movs	r2, #6
 800e1ac:	4829      	ldr	r0, [pc, #164]	; (800e254 <_vfiprintf_r+0x228>)
 800e1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1b2:	f7fc fe10 	bl	800add6 <memchr>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d03f      	beq.n	800e23a <_vfiprintf_r+0x20e>
 800e1ba:	4b27      	ldr	r3, [pc, #156]	; (800e258 <_vfiprintf_r+0x22c>)
 800e1bc:	bb1b      	cbnz	r3, 800e206 <_vfiprintf_r+0x1da>
 800e1be:	9b03      	ldr	r3, [sp, #12]
 800e1c0:	3307      	adds	r3, #7
 800e1c2:	f023 0307 	bic.w	r3, r3, #7
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1cc:	443b      	add	r3, r7
 800e1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e1d0:	e768      	b.n	800e0a4 <_vfiprintf_r+0x78>
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1da:	e7a6      	b.n	800e12a <_vfiprintf_r+0xfe>
 800e1dc:	2300      	movs	r3, #0
 800e1de:	f04f 0c0a 	mov.w	ip, #10
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	9305      	str	r3, [sp, #20]
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ee:	3a30      	subs	r2, #48	; 0x30
 800e1f0:	2a09      	cmp	r2, #9
 800e1f2:	d903      	bls.n	800e1fc <_vfiprintf_r+0x1d0>
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0c6      	beq.n	800e186 <_vfiprintf_r+0x15a>
 800e1f8:	9105      	str	r1, [sp, #20]
 800e1fa:	e7c4      	b.n	800e186 <_vfiprintf_r+0x15a>
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2301      	movs	r3, #1
 800e200:	fb0c 2101 	mla	r1, ip, r1, r2
 800e204:	e7f0      	b.n	800e1e8 <_vfiprintf_r+0x1bc>
 800e206:	ab03      	add	r3, sp, #12
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	462a      	mov	r2, r5
 800e20c:	4630      	mov	r0, r6
 800e20e:	4b13      	ldr	r3, [pc, #76]	; (800e25c <_vfiprintf_r+0x230>)
 800e210:	a904      	add	r1, sp, #16
 800e212:	f7fb fe6b 	bl	8009eec <_printf_float>
 800e216:	4607      	mov	r7, r0
 800e218:	1c78      	adds	r0, r7, #1
 800e21a:	d1d6      	bne.n	800e1ca <_vfiprintf_r+0x19e>
 800e21c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e21e:	07d9      	lsls	r1, r3, #31
 800e220:	d405      	bmi.n	800e22e <_vfiprintf_r+0x202>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	059a      	lsls	r2, r3, #22
 800e226:	d402      	bmi.n	800e22e <_vfiprintf_r+0x202>
 800e228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e22a:	f7fc fdd3 	bl	800add4 <__retarget_lock_release_recursive>
 800e22e:	89ab      	ldrh	r3, [r5, #12]
 800e230:	065b      	lsls	r3, r3, #25
 800e232:	f53f af1d 	bmi.w	800e070 <_vfiprintf_r+0x44>
 800e236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e238:	e71c      	b.n	800e074 <_vfiprintf_r+0x48>
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	462a      	mov	r2, r5
 800e240:	4630      	mov	r0, r6
 800e242:	4b06      	ldr	r3, [pc, #24]	; (800e25c <_vfiprintf_r+0x230>)
 800e244:	a904      	add	r1, sp, #16
 800e246:	f7fc f8f1 	bl	800a42c <_printf_i>
 800e24a:	e7e4      	b.n	800e216 <_vfiprintf_r+0x1ea>
 800e24c:	0800ef09 	.word	0x0800ef09
 800e250:	0800ef0f 	.word	0x0800ef0f
 800e254:	0800ef13 	.word	0x0800ef13
 800e258:	08009eed 	.word	0x08009eed
 800e25c:	0800e009 	.word	0x0800e009

0800e260 <__swbuf_r>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	460e      	mov	r6, r1
 800e264:	4614      	mov	r4, r2
 800e266:	4605      	mov	r5, r0
 800e268:	b118      	cbz	r0, 800e272 <__swbuf_r+0x12>
 800e26a:	6a03      	ldr	r3, [r0, #32]
 800e26c:	b90b      	cbnz	r3, 800e272 <__swbuf_r+0x12>
 800e26e:	f7fc fc99 	bl	800aba4 <__sinit>
 800e272:	69a3      	ldr	r3, [r4, #24]
 800e274:	60a3      	str	r3, [r4, #8]
 800e276:	89a3      	ldrh	r3, [r4, #12]
 800e278:	071a      	lsls	r2, r3, #28
 800e27a:	d525      	bpl.n	800e2c8 <__swbuf_r+0x68>
 800e27c:	6923      	ldr	r3, [r4, #16]
 800e27e:	b31b      	cbz	r3, 800e2c8 <__swbuf_r+0x68>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	6922      	ldr	r2, [r4, #16]
 800e284:	b2f6      	uxtb	r6, r6
 800e286:	1a98      	subs	r0, r3, r2
 800e288:	6963      	ldr	r3, [r4, #20]
 800e28a:	4637      	mov	r7, r6
 800e28c:	4283      	cmp	r3, r0
 800e28e:	dc04      	bgt.n	800e29a <__swbuf_r+0x3a>
 800e290:	4621      	mov	r1, r4
 800e292:	4628      	mov	r0, r5
 800e294:	f7ff fa30 	bl	800d6f8 <_fflush_r>
 800e298:	b9e0      	cbnz	r0, 800e2d4 <__swbuf_r+0x74>
 800e29a:	68a3      	ldr	r3, [r4, #8]
 800e29c:	3b01      	subs	r3, #1
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	6022      	str	r2, [r4, #0]
 800e2a6:	701e      	strb	r6, [r3, #0]
 800e2a8:	6962      	ldr	r2, [r4, #20]
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d004      	beq.n	800e2ba <__swbuf_r+0x5a>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	07db      	lsls	r3, r3, #31
 800e2b4:	d506      	bpl.n	800e2c4 <__swbuf_r+0x64>
 800e2b6:	2e0a      	cmp	r6, #10
 800e2b8:	d104      	bne.n	800e2c4 <__swbuf_r+0x64>
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f7ff fa1b 	bl	800d6f8 <_fflush_r>
 800e2c2:	b938      	cbnz	r0, 800e2d4 <__swbuf_r+0x74>
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f000 f806 	bl	800e2dc <__swsetup_r>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d0d5      	beq.n	800e280 <__swbuf_r+0x20>
 800e2d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e2d8:	e7f4      	b.n	800e2c4 <__swbuf_r+0x64>
	...

0800e2dc <__swsetup_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4b2a      	ldr	r3, [pc, #168]	; (800e388 <__swsetup_r+0xac>)
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	6818      	ldr	r0, [r3, #0]
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	b118      	cbz	r0, 800e2f0 <__swsetup_r+0x14>
 800e2e8:	6a03      	ldr	r3, [r0, #32]
 800e2ea:	b90b      	cbnz	r3, 800e2f0 <__swsetup_r+0x14>
 800e2ec:	f7fc fc5a 	bl	800aba4 <__sinit>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2f6:	0718      	lsls	r0, r3, #28
 800e2f8:	d422      	bmi.n	800e340 <__swsetup_r+0x64>
 800e2fa:	06d9      	lsls	r1, r3, #27
 800e2fc:	d407      	bmi.n	800e30e <__swsetup_r+0x32>
 800e2fe:	2309      	movs	r3, #9
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e30a:	81a3      	strh	r3, [r4, #12]
 800e30c:	e034      	b.n	800e378 <__swsetup_r+0x9c>
 800e30e:	0758      	lsls	r0, r3, #29
 800e310:	d512      	bpl.n	800e338 <__swsetup_r+0x5c>
 800e312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e314:	b141      	cbz	r1, 800e328 <__swsetup_r+0x4c>
 800e316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e31a:	4299      	cmp	r1, r3
 800e31c:	d002      	beq.n	800e324 <__swsetup_r+0x48>
 800e31e:	4628      	mov	r0, r5
 800e320:	f7fd fbda 	bl	800bad8 <_free_r>
 800e324:	2300      	movs	r3, #0
 800e326:	6363      	str	r3, [r4, #52]	; 0x34
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e32e:	81a3      	strh	r3, [r4, #12]
 800e330:	2300      	movs	r3, #0
 800e332:	6063      	str	r3, [r4, #4]
 800e334:	6923      	ldr	r3, [r4, #16]
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f043 0308 	orr.w	r3, r3, #8
 800e33e:	81a3      	strh	r3, [r4, #12]
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	b94b      	cbnz	r3, 800e358 <__swsetup_r+0x7c>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e34a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e34e:	d003      	beq.n	800e358 <__swsetup_r+0x7c>
 800e350:	4621      	mov	r1, r4
 800e352:	4628      	mov	r0, r5
 800e354:	f000 f883 	bl	800e45e <__smakebuf_r>
 800e358:	89a0      	ldrh	r0, [r4, #12]
 800e35a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e35e:	f010 0301 	ands.w	r3, r0, #1
 800e362:	d00a      	beq.n	800e37a <__swsetup_r+0x9e>
 800e364:	2300      	movs	r3, #0
 800e366:	60a3      	str	r3, [r4, #8]
 800e368:	6963      	ldr	r3, [r4, #20]
 800e36a:	425b      	negs	r3, r3
 800e36c:	61a3      	str	r3, [r4, #24]
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	b943      	cbnz	r3, 800e384 <__swsetup_r+0xa8>
 800e372:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e376:	d1c4      	bne.n	800e302 <__swsetup_r+0x26>
 800e378:	bd38      	pop	{r3, r4, r5, pc}
 800e37a:	0781      	lsls	r1, r0, #30
 800e37c:	bf58      	it	pl
 800e37e:	6963      	ldrpl	r3, [r4, #20]
 800e380:	60a3      	str	r3, [r4, #8]
 800e382:	e7f4      	b.n	800e36e <__swsetup_r+0x92>
 800e384:	2000      	movs	r0, #0
 800e386:	e7f7      	b.n	800e378 <__swsetup_r+0x9c>
 800e388:	2000007c 	.word	0x2000007c

0800e38c <_raise_r>:
 800e38c:	291f      	cmp	r1, #31
 800e38e:	b538      	push	{r3, r4, r5, lr}
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	d904      	bls.n	800e3a0 <_raise_r+0x14>
 800e396:	2316      	movs	r3, #22
 800e398:	6003      	str	r3, [r0, #0]
 800e39a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3a2:	b112      	cbz	r2, 800e3aa <_raise_r+0x1e>
 800e3a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3a8:	b94b      	cbnz	r3, 800e3be <_raise_r+0x32>
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 f830 	bl	800e410 <_getpid_r>
 800e3b0:	462a      	mov	r2, r5
 800e3b2:	4601      	mov	r1, r0
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3ba:	f000 b817 	b.w	800e3ec <_kill_r>
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d00a      	beq.n	800e3d8 <_raise_r+0x4c>
 800e3c2:	1c59      	adds	r1, r3, #1
 800e3c4:	d103      	bne.n	800e3ce <_raise_r+0x42>
 800e3c6:	2316      	movs	r3, #22
 800e3c8:	6003      	str	r3, [r0, #0]
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	e7e7      	b.n	800e39e <_raise_r+0x12>
 800e3ce:	2400      	movs	r4, #0
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3d6:	4798      	blx	r3
 800e3d8:	2000      	movs	r0, #0
 800e3da:	e7e0      	b.n	800e39e <_raise_r+0x12>

0800e3dc <raise>:
 800e3dc:	4b02      	ldr	r3, [pc, #8]	; (800e3e8 <raise+0xc>)
 800e3de:	4601      	mov	r1, r0
 800e3e0:	6818      	ldr	r0, [r3, #0]
 800e3e2:	f7ff bfd3 	b.w	800e38c <_raise_r>
 800e3e6:	bf00      	nop
 800e3e8:	2000007c 	.word	0x2000007c

0800e3ec <_kill_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	4d06      	ldr	r5, [pc, #24]	; (800e40c <_kill_r+0x20>)
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	f7f4 fbc0 	bl	8002b7e <_kill>
 800e3fe:	1c43      	adds	r3, r0, #1
 800e400:	d102      	bne.n	800e408 <_kill_r+0x1c>
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	b103      	cbz	r3, 800e408 <_kill_r+0x1c>
 800e406:	6023      	str	r3, [r4, #0]
 800e408:	bd38      	pop	{r3, r4, r5, pc}
 800e40a:	bf00      	nop
 800e40c:	20002be4 	.word	0x20002be4

0800e410 <_getpid_r>:
 800e410:	f7f4 bbae 	b.w	8002b70 <_getpid>

0800e414 <__swhatbuf_r>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	460c      	mov	r4, r1
 800e418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41c:	4615      	mov	r5, r2
 800e41e:	2900      	cmp	r1, #0
 800e420:	461e      	mov	r6, r3
 800e422:	b096      	sub	sp, #88	; 0x58
 800e424:	da0c      	bge.n	800e440 <__swhatbuf_r+0x2c>
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	2100      	movs	r1, #0
 800e42a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e42e:	bf0c      	ite	eq
 800e430:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e434:	2340      	movne	r3, #64	; 0x40
 800e436:	2000      	movs	r0, #0
 800e438:	6031      	str	r1, [r6, #0]
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	b016      	add	sp, #88	; 0x58
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	466a      	mov	r2, sp
 800e442:	f000 f849 	bl	800e4d8 <_fstat_r>
 800e446:	2800      	cmp	r0, #0
 800e448:	dbed      	blt.n	800e426 <__swhatbuf_r+0x12>
 800e44a:	9901      	ldr	r1, [sp, #4]
 800e44c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e450:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e454:	4259      	negs	r1, r3
 800e456:	4159      	adcs	r1, r3
 800e458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e45c:	e7eb      	b.n	800e436 <__swhatbuf_r+0x22>

0800e45e <__smakebuf_r>:
 800e45e:	898b      	ldrh	r3, [r1, #12]
 800e460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e462:	079d      	lsls	r5, r3, #30
 800e464:	4606      	mov	r6, r0
 800e466:	460c      	mov	r4, r1
 800e468:	d507      	bpl.n	800e47a <__smakebuf_r+0x1c>
 800e46a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e46e:	6023      	str	r3, [r4, #0]
 800e470:	6123      	str	r3, [r4, #16]
 800e472:	2301      	movs	r3, #1
 800e474:	6163      	str	r3, [r4, #20]
 800e476:	b002      	add	sp, #8
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	466a      	mov	r2, sp
 800e47c:	ab01      	add	r3, sp, #4
 800e47e:	f7ff ffc9 	bl	800e414 <__swhatbuf_r>
 800e482:	9900      	ldr	r1, [sp, #0]
 800e484:	4605      	mov	r5, r0
 800e486:	4630      	mov	r0, r6
 800e488:	f7fd fb96 	bl	800bbb8 <_malloc_r>
 800e48c:	b948      	cbnz	r0, 800e4a2 <__smakebuf_r+0x44>
 800e48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e492:	059a      	lsls	r2, r3, #22
 800e494:	d4ef      	bmi.n	800e476 <__smakebuf_r+0x18>
 800e496:	f023 0303 	bic.w	r3, r3, #3
 800e49a:	f043 0302 	orr.w	r3, r3, #2
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	e7e3      	b.n	800e46a <__smakebuf_r+0xc>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	6020      	str	r0, [r4, #0]
 800e4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4aa:	81a3      	strh	r3, [r4, #12]
 800e4ac:	9b00      	ldr	r3, [sp, #0]
 800e4ae:	6120      	str	r0, [r4, #16]
 800e4b0:	6163      	str	r3, [r4, #20]
 800e4b2:	9b01      	ldr	r3, [sp, #4]
 800e4b4:	b15b      	cbz	r3, 800e4ce <__smakebuf_r+0x70>
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4bc:	f000 f81e 	bl	800e4fc <_isatty_r>
 800e4c0:	b128      	cbz	r0, 800e4ce <__smakebuf_r+0x70>
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f023 0303 	bic.w	r3, r3, #3
 800e4c8:	f043 0301 	orr.w	r3, r3, #1
 800e4cc:	81a3      	strh	r3, [r4, #12]
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	431d      	orrs	r5, r3
 800e4d2:	81a5      	strh	r5, [r4, #12]
 800e4d4:	e7cf      	b.n	800e476 <__smakebuf_r+0x18>
	...

0800e4d8 <_fstat_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	2300      	movs	r3, #0
 800e4dc:	4d06      	ldr	r5, [pc, #24]	; (800e4f8 <_fstat_r+0x20>)
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	f7f4 fb8c 	bl	8002c02 <_fstat>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	d102      	bne.n	800e4f4 <_fstat_r+0x1c>
 800e4ee:	682b      	ldr	r3, [r5, #0]
 800e4f0:	b103      	cbz	r3, 800e4f4 <_fstat_r+0x1c>
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20002be4 	.word	0x20002be4

0800e4fc <_isatty_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	2300      	movs	r3, #0
 800e500:	4d05      	ldr	r5, [pc, #20]	; (800e518 <_isatty_r+0x1c>)
 800e502:	4604      	mov	r4, r0
 800e504:	4608      	mov	r0, r1
 800e506:	602b      	str	r3, [r5, #0]
 800e508:	f7f4 fb8a 	bl	8002c20 <_isatty>
 800e50c:	1c43      	adds	r3, r0, #1
 800e50e:	d102      	bne.n	800e516 <_isatty_r+0x1a>
 800e510:	682b      	ldr	r3, [r5, #0]
 800e512:	b103      	cbz	r3, 800e516 <_isatty_r+0x1a>
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	bd38      	pop	{r3, r4, r5, pc}
 800e518:	20002be4 	.word	0x20002be4

0800e51c <_init>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr

0800e528 <_fini>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	bf00      	nop
 800e52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52e:	bc08      	pop	{r3}
 800e530:	469e      	mov	lr, r3
 800e532:	4770      	bx	lr
